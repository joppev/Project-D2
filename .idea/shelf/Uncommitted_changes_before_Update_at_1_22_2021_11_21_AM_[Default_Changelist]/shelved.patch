Index: public/js/app.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/js/app.js	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ public/js/app.js	(date 1611306293062)
@@ -34430,12 +34430,12 @@
 /*! no static exports found */
 /***/ (function(module, exports, __webpack_require__) {
 
-/* 
-  @package NOTY - Dependency-free notification library 
-  @version version: 3.2.0-beta 
-  @contributors https://github.com/needim/noty/graphs/contributors 
-  @documentation Examples and Documentation - https://ned.im/noty 
-  @license Licensed under the MIT licenses: http://www.opensource.org/licenses/mit-license.php 
+/*
+  @package NOTY - Dependency-free notification library
+  @version version: 3.2.0-beta
+  @contributors https://github.com/needim/noty/graphs/contributors
+  @documentation Examples and Documentation - https://ned.im/noty
+  @license Licensed under the MIT licenses: http://www.opensource.org/licenses/mit-license.php
 */
 
 (function webpackUniversalModuleDefinition(root, factory) {
@@ -36462,7 +36462,7 @@
     The primary way of interacting with a promise is through its `then` method,
     which registers callbacks to receive either a promise's eventual value or the
     reason why the promise cannot be fulfilled.
-  
+
     ```js
     findUser().then(function(user){
       // user is available
@@ -36470,14 +36470,14 @@
       // user is unavailable, and you are given the reason why
     });
     ```
-  
+
     Chaining
     --------
-  
+
     The return value of `then` is itself a promise.  This second, 'downstream'
     promise is resolved with the return value of the first promise's fulfillment
     or rejection handler, or rejected if the handler throws an exception.
-  
+
     ```js
     findUser().then(function (user) {
       return user.name;
@@ -36487,7 +36487,7 @@
       // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
       // will be `'default name'`
     });
-  
+
     findUser().then(function (user) {
       throw new Error('Found user, but still unhappy');
     }, function (reason) {
@@ -36500,7 +36500,7 @@
     });
     ```
     If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
-  
+
     ```js
     findUser().then(function (user) {
       throw new PedagogicalException('Upstream error');
@@ -36512,15 +36512,15 @@
       // The `PedgagocialException` is propagated all the way down to here
     });
     ```
-  
+
     Assimilation
     ------------
-  
+
     Sometimes the value you want to propagate to a downstream promise can only be
     retrieved asynchronously. This can be achieved by returning a promise in the
     fulfillment or rejection handler. The downstream promise will then be pending
     until the returned promise is settled. This is called *assimilation*.
-  
+
     ```js
     findUser().then(function (user) {
       return findCommentsByAuthor(user);
@@ -36528,9 +36528,9 @@
       // The user's comments are now available
     });
     ```
-  
+
     If the assimliated promise rejects, then the downstream promise will also reject.
-  
+
     ```js
     findUser().then(function (user) {
       return findCommentsByAuthor(user);
@@ -36540,15 +36540,15 @@
       // If `findCommentsByAuthor` rejects, we'll have the reason here
     });
     ```
-  
+
     Simple Example
     --------------
-  
+
     Synchronous Example
-  
+
     ```javascript
     let result;
-  
+
     try {
       result = findResult();
       // success
@@ -36556,9 +36556,9 @@
       // failure
     }
     ```
-  
+
     Errback Example
-  
+
     ```js
     findResult(function(result, err){
       if (err) {
@@ -36568,9 +36568,9 @@
       }
     });
     ```
-  
+
     Promise Example;
-  
+
     ```javascript
     findResult().then(function(result){
       // success
@@ -36578,15 +36578,15 @@
       // failure
     });
     ```
-  
+
     Advanced Example
     --------------
-  
+
     Synchronous Example
-  
+
     ```javascript
     let author, books;
-  
+
     try {
       author = findAuthor();
       books  = findBooksByAuthor(author);
@@ -36595,19 +36595,19 @@
       // failure
     }
     ```
-  
+
     Errback Example
-  
+
     ```js
-  
+
     function foundBooks(books) {
-  
+
     }
-  
+
     function failure(reason) {
-  
+
     }
-  
+
     findAuthor(function(author, err){
       if (err) {
         failure(err);
@@ -36632,9 +36632,9 @@
       }
     });
     ```
-  
+
     Promise Example;
-  
+
     ```javascript
     findAuthor().
       then(findBooksByAuthor).
@@ -36644,7 +36644,7 @@
       // something went wrong
     });
     ```
-  
+
     @method then
     @param {Function} onFulfilled
     @param {Function} onRejected
@@ -36656,25 +36656,25 @@
   /**
     `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
     as the catch block of a try/catch statement.
-  
+
     ```js
     function findAuthor(){
       throw new Error('couldn't find that author');
     }
-  
+
     // synchronous
     try {
       findAuthor();
     } catch(reason) {
       // something went wrong
     }
-  
+
     // async with promises
     findAuthor().catch(function(reason){
       // something went wrong
     });
     ```
-  
+
     @method catch
     @param {Function} onRejection
     Useful for tooling.
@@ -40583,4 +40583,4 @@
 
 /***/ })
 
-/******/ });
\ No newline at end of file
+/******/ });
Index: routes/web.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Illuminate\\Support\\Facades\\Route;\r\n\r\n/*\r\n|--------------------------------------------------------------------------\r\n| Web Routes\r\n|--------------------------------------------------------------------------\r\n|\r\n| Here is where you can register web routes for your application. These\r\n| routes are loaded by the RouteServiceProvider within a group which\r\n| contains the \"web\" middleware group. Now create something great!\r\n|\r\n*/\r\n\r\nAuth::routes();\r\nRoute::get('logout', 'Auth\\LoginController@logout');\r\n// Route::get('/home', 'HomeController@index')->name('home');\r\nRoute::redirect('home', '/');\r\nRoute::view('/', 'home');\r\nRoute::get('home/dagplanning', 'HomeController@dagplanning');\r\nRoute::get('home/kade', 'HomeController@kade');\r\n\r\nRoute::get('home/getinfo', 'HomeController@getinfo');\r\nRoute::middleware(['auth', 'admin'])->prefix('admin')->group(function () {\r\n    Route::resource('OverzichtGebruiker', 'Admin\\UserController');\r\n    Route::get('qryUsers', 'Admin\\UserController@qryUsers');\r\n    Route::get('qryUsers2', 'Admin\\UserController@qryUsers2');\r\n\r\n    Route::resource('kades', 'Admin\\KadeController');\r\n    Route::get('qryKades', 'Admin\\KadeController@qryKades');\r\n});\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- routes/web.php	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ routes/web.php	(date 1611310848826)
@@ -21,12 +21,15 @@
 Route::get('home/dagplanning', 'HomeController@dagplanning');
 Route::get('home/kade', 'HomeController@kade');
 
+
+
 Route::get('home/getinfo', 'HomeController@getinfo');
 Route::middleware(['auth', 'admin'])->prefix('admin')->group(function () {
     Route::resource('OverzichtGebruiker', 'Admin\UserController');
     Route::get('qryUsers', 'Admin\UserController@qryUsers');
     Route::get('qryUsers2', 'Admin\UserController@qryUsers2');
-
+    Route::resource('OverzichtBedrijven', 'Admin\BedrijfController');
+    Route::get('qryBedrijven', 'Admin\BedrijfController@qryBedrijven');
     Route::resource('kades', 'Admin\KadeController');
     Route::get('qryKades', 'Admin\KadeController@qryKades');
 });
Index: database/migrations/2021_01_19_152828_create_nummerplaats_table.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nuse Illuminate\\Database\\Migrations\\Migration;\r\nuse Illuminate\\Database\\Schema\\Blueprint;\r\nuse Illuminate\\Support\\Facades\\Schema;\r\n\r\nclass CreateNummerplaatsTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::create('nummerplaats', function (Blueprint $table) {\r\n            $table->id();\r\n            $table->foreignId('bedrijfID');\r\n            $table->string('plaatcombinatie');\r\n            $table->timestamps();\r\n\r\n            $table->foreign('bedrijfID')->references('id')->on('bedrijfs')->onDelete('cascade')->onUpdate('cascade');\r\n\r\n        });\r\n        DB::table('nummerplaats')->insert(\r\n            [\r\n                [\r\n                    'bedrijfID' => 1,\r\n                    'plaatcombinatie' => \"plaatcombinatie1\",\r\n                ],\r\n                [\r\n                'bedrijfID' => 2,\r\n                'plaatcombinatie' => \"plaatcombinatie2\",\r\n            ],\r\n                [\r\n                    'bedrijfID' => 3,\r\n                    'plaatcombinatie' => \"plaatcombinatie3\",\r\n                ]\r\n            ]);\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::dropIfExists('nummerplaats');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- database/migrations/2021_01_19_152828_create_nummerplaats_table.php	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ database/migrations/2021_01_19_152828_create_nummerplaats_table.php	(date 1611306292762)
@@ -35,7 +35,15 @@
                 [
                     'bedrijfID' => 3,
                     'plaatcombinatie' => "plaatcombinatie3",
-                ]
+                ],
+                [
+                    'bedrijfID' => 4,
+                    'plaatcombinatie' => "plaatcombinatie4",
+                ],
+                [
+                    'bedrijfID' => 4,
+                    'plaatcombinatie' => "plaatcombinatie5",
+                ],
             ]);
     }
 
Index: resources/views/admin/bedrijven/modal.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources/views/admin/bedrijven/modal.blade.php	(date 1611308913442)
+++ resources/views/admin/bedrijven/modal.blade.php	(date 1611308913442)
@@ -0,0 +1,41 @@
+<div class="modal" id="modal-bedrijven">
+    <div class="modal-dialog">
+        <div class="modal-content">
+            <div class="modal-header">
+                <h5 class="modal-title">modal-bedrijf-title</h5>
+                <button type="button" class="close" data-dismiss="modal">
+                    <span>&times;</span>
+                </button>
+            </div>
+            <div class="modal-body">
+                <form action="" method="post">
+                    @method('')
+                    @csrf
+
+                    <div class="form-group">
+                        <label for="bedrijfsnaam">Naam bedrijf</label>
+                        <input type="text" name="bedrijfsnaam" id="bedrijfsnaam"
+                               class="form-control"
+                               placeholder="Bedrijfsnaam"
+                               minlength="3"
+                               required
+                               value="">
+                    </div>
+                    <div class="form-group">
+                        <label for="standaardWachtwoord">Standaard wachtwoord</label>
+                        <input type="text" name="standaardWachtwoord" id="standaardWachtwoord"
+                               class="form-control"
+                               placeholder="Standaard wachtwoord"
+                               minlength="8"
+                               required
+                               value="">
+                    </div>
+
+                <button type="submit" class="btn btn-success">Opslaan</button>
+                </form>
+            </div>
+        </div>
+    </div>
+</div>
+
+
Index: _ide_helper.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- _ide_helper.php	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ _ide_helper.php	(date 1611306292884)
@@ -11,19 +11,19 @@
  * @see https://github.com/barryvdh/laravel-ide-helper
  */
 
-    namespace Illuminate\Support\Facades { 
+    namespace Illuminate\Support\Facades {
             /**
-     * 
+     *
      *
      * @see \Illuminate\Contracts\Foundation\Application
-     */ 
+     */
         class App {
                     /**
          * Get the version number of the application.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function version()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -33,9 +33,9 @@
          * Run the given array of bootstrap classes.
          *
          * @param string[] $bootstrappers
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bootstrapWith($bootstrappers)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -45,9 +45,9 @@
          * Register a callback to run after loading the environment.
          *
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function afterLoadingEnvironment($callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -58,9 +58,9 @@
          *
          * @param string $bootstrapper
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function beforeBootstrapping($bootstrapper, $callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -71,9 +71,9 @@
          *
          * @param string $bootstrapper
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function afterBootstrapping($bootstrapper, $callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -82,9 +82,9 @@
                     /**
          * Determine if the application has been bootstrapped before.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasBeenBootstrapped()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -94,9 +94,9 @@
          * Set the base path for the application.
          *
          * @param string $basePath
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function setBasePath($basePath)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -106,9 +106,9 @@
          * Get the path to the application "app" directory.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function path($path = '')
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -118,9 +118,9 @@
          * Set the application directory.
          *
          * @param string $path
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function useAppPath($path)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -130,9 +130,9 @@
          * Get the base path of the Laravel installation.
          *
          * @param string $path Optionally, a path to append to the base path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function basePath($path = '')
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -142,9 +142,9 @@
          * Get the path to the bootstrap directory.
          *
          * @param string $path Optionally, a path to append to the bootstrap path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function bootstrapPath($path = '')
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -154,9 +154,9 @@
          * Get the path to the application configuration files.
          *
          * @param string $path Optionally, a path to append to the config path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function configPath($path = '')
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -166,9 +166,9 @@
          * Get the path to the database directory.
          *
          * @param string $path Optionally, a path to append to the database path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function databasePath($path = '')
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -178,9 +178,9 @@
          * Set the database directory.
          *
          * @param string $path
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function useDatabasePath($path)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -189,9 +189,9 @@
                     /**
          * Get the path to the language files.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function langPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -200,9 +200,9 @@
                     /**
          * Get the path to the public / web directory.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function publicPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -211,9 +211,9 @@
                     /**
          * Get the path to the storage directory.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function storagePath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -223,9 +223,9 @@
          * Set the storage directory.
          *
          * @param string $path
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function useStoragePath($path)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -235,9 +235,9 @@
          * Get the path to the resources directory.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function resourcePath($path = '')
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -246,9 +246,9 @@
                     /**
          * Get the path to the environment file directory.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function environmentPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -258,9 +258,9 @@
          * Set the directory for the environment file.
          *
          * @param string $path
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function useEnvironmentPath($path)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -270,9 +270,9 @@
          * Set the environment file to be loaded during bootstrapping.
          *
          * @param string $file
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function loadEnvironmentFrom($file)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -281,9 +281,9 @@
                     /**
          * Get the environment file the application is using.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function environmentFile()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -292,9 +292,9 @@
                     /**
          * Get the fully qualified path to the environment file.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function environmentFilePath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -304,9 +304,9 @@
          * Get or check the current application environment.
          *
          * @param string|array $environments
-         * @return string|bool 
-         * @static 
-         */ 
+         * @return string|bool
+         * @static
+         */
         public static function environment(...$environments)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -315,9 +315,9 @@
                     /**
          * Determine if application is in local environment.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isLocal()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -326,9 +326,9 @@
                     /**
          * Determine if application is in production environment.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isProduction()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -338,9 +338,9 @@
          * Detect the application's current environment.
          *
          * @param \Closure $callback
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function detectEnvironment($callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -349,9 +349,9 @@
                     /**
          * Determine if the application is running in the console.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function runningInConsole()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -360,9 +360,9 @@
                     /**
          * Determine if the application is running unit tests.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function runningUnitTests()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -371,9 +371,9 @@
                     /**
          * Register all of the configured providers.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function registerConfiguredProviders()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -384,9 +384,9 @@
          *
          * @param \Illuminate\Support\ServiceProvider|string $provider
          * @param bool $force
-         * @return \Illuminate\Support\ServiceProvider 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\ServiceProvider
+         * @static
+         */
         public static function register($provider, $force = false)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -396,9 +396,9 @@
          * Get the registered service provider instance if it exists.
          *
          * @param \Illuminate\Support\ServiceProvider|string $provider
-         * @return \Illuminate\Support\ServiceProvider|null 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\ServiceProvider|null
+         * @static
+         */
         public static function getProvider($provider)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -408,9 +408,9 @@
          * Get the registered service provider instances if any exist.
          *
          * @param \Illuminate\Support\ServiceProvider|string $provider
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getProviders($provider)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -420,9 +420,9 @@
          * Resolve a service provider instance from the class name.
          *
          * @param string $provider
-         * @return \Illuminate\Support\ServiceProvider 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\ServiceProvider
+         * @static
+         */
         public static function resolveProvider($provider)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -431,9 +431,9 @@
                     /**
          * Load and boot all of the remaining deferred providers.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function loadDeferredProviders()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -443,9 +443,9 @@
          * Load the provider for a deferred service.
          *
          * @param string $service
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function loadDeferredProvider($service)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -456,9 +456,9 @@
          *
          * @param string $provider
          * @param string|null $service
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function registerDeferredProvider($provider, $service = null)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -469,9 +469,9 @@
          *
          * @param string $abstract
          * @param array $parameters
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function make($abstract, $parameters = [])
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -481,9 +481,9 @@
          * Determine if the given abstract type has been bound.
          *
          * @param string $abstract
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function bound($abstract)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -492,9 +492,9 @@
                     /**
          * Determine if the application has booted.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isBooted()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -503,9 +503,9 @@
                     /**
          * Boot the application's service providers.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function boot()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -515,9 +515,9 @@
          * Register a new boot listener.
          *
          * @param callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function booting($callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -527,9 +527,9 @@
          * Register a new "booted" listener.
          *
          * @param callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function booted($callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -538,8 +538,8 @@
                     /**
          * {@inheritdoc}
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function handle($request, $type = 1, $catch = true)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -548,9 +548,9 @@
                     /**
          * Determine if middleware has been disabled for the application.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function shouldSkipMiddleware()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -559,9 +559,9 @@
                     /**
          * Get the path to the cached services.php file.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getCachedServicesPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -570,9 +570,9 @@
                     /**
          * Get the path to the cached packages.php file.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getCachedPackagesPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -581,9 +581,9 @@
                     /**
          * Determine if the application configuration is cached.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function configurationIsCached()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -592,9 +592,9 @@
                     /**
          * Get the path to the configuration cache file.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getCachedConfigPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -603,9 +603,9 @@
                     /**
          * Determine if the application routes are cached.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function routesAreCached()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -614,9 +614,9 @@
                     /**
          * Get the path to the routes cache file.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getCachedRoutesPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -625,9 +625,9 @@
                     /**
          * Determine if the application events are cached.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function eventsAreCached()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -636,9 +636,9 @@
                     /**
          * Get the path to the events cache file.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getCachedEventsPath()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -648,9 +648,9 @@
          * Add new prefix to list of absolute path prefixes.
          *
          * @param string $prefix
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function addAbsoluteCachePathPrefix($prefix)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -659,9 +659,9 @@
                     /**
          * Determine if the application is currently down for maintenance.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isDownForMaintenance()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -673,11 +673,11 @@
          * @param int $code
          * @param string $message
          * @param array $headers
-         * @return void 
+         * @return void
          * @throws \Symfony\Component\HttpKernel\Exception\HttpException
          * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
-         * @static 
-         */ 
+         * @static
+         */
         public static function abort($code, $message = '', $headers = [])
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -687,9 +687,9 @@
          * Register a terminating callback with the application.
          *
          * @param callable|string $callback
-         * @return \Illuminate\Foundation\Application 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Application
+         * @static
+         */
         public static function terminating($callback)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -698,9 +698,9 @@
                     /**
          * Terminate the application.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function terminate()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -709,9 +709,9 @@
                     /**
          * Get the service providers that have been loaded.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getLoadedProviders()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -721,9 +721,9 @@
          * Determine if the given service provider is loaded.
          *
          * @param string $provider
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function providerIsLoaded($provider)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -732,9 +732,9 @@
                     /**
          * Get the application's deferred services.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getDeferredServices()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -744,9 +744,9 @@
          * Set the application's deferred services.
          *
          * @param array $services
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDeferredServices($services)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -756,9 +756,9 @@
          * Add an array of services to the application's deferred services.
          *
          * @param array $services
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addDeferredServices($services)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -768,9 +768,9 @@
          * Determine if the given service is a deferred service.
          *
          * @param string $service
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isDeferredService($service)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -780,9 +780,9 @@
          * Configure the real-time facade namespace.
          *
          * @param string $namespace
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function provideFacades($namespace)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -791,9 +791,9 @@
                     /**
          * Get the current application locale.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getLocale()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -802,9 +802,9 @@
                     /**
          * Get the current application fallback locale.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getFallbackLocale()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -814,9 +814,9 @@
          * Set the current application locale.
          *
          * @param string $locale
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setLocale($locale)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -826,9 +826,9 @@
          * Set the current application fallback locale.
          *
          * @param string $fallbackLocale
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setFallbackLocale($fallbackLocale)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -838,9 +838,9 @@
          * Determine if application locale is the given locale.
          *
          * @param string $locale
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isLocale($locale)
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -849,9 +849,9 @@
                     /**
          * Register the core class aliases in the container.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function registerCoreContainerAliases()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -860,9 +860,9 @@
                     /**
          * Flush the container of all bindings and resolved instances.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flush()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -871,10 +871,10 @@
                     /**
          * Get the application namespace.
          *
-         * @return string 
+         * @return string
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function getNamespace()
         {
                         /** @var \Illuminate\Foundation\Application $instance */
@@ -884,28 +884,28 @@
          * Define a contextual binding.
          *
          * @param array|string $concrete
-         * @return \Illuminate\Contracts\Container\ContextualBindingBuilder 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Container\ContextualBindingBuilder
+         * @static
+         */
         public static function when($concrete)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->when($concrete);
         }
                     /**
          * Returns true if the container can return an entry for the given identifier.
-         * 
+         *
          * Returns false otherwise.
-         * 
+         *
          * `has($id)` returning true does not mean that `get($id)` will not throw an exception.
          * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.
          *
          * @param string $id Identifier of the entry to look for.
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($id)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->has($id);
         }
@@ -913,11 +913,11 @@
          * Determine if the given abstract type has been resolved.
          *
          * @param string $abstract
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function resolved($abstract)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->resolved($abstract);
         }
@@ -925,11 +925,11 @@
          * Determine if a given type is shared.
          *
          * @param string $abstract
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isShared($abstract)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->isShared($abstract);
         }
@@ -937,11 +937,11 @@
          * Determine if a given string is an alias.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isAlias($name)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->isAlias($name);
         }
@@ -951,11 +951,11 @@
          * @param string $abstract
          * @param \Closure|string|null $concrete
          * @param bool $shared
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bind($abstract, $concrete = null, $shared = false)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->bind($abstract, $concrete, $shared);
         }
@@ -963,11 +963,11 @@
          * Determine if the container has a method binding.
          *
          * @param string $method
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMethodBinding($method)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->hasMethodBinding($method);
         }
@@ -976,11 +976,11 @@
          *
          * @param array|string $method
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bindMethod($method, $callback)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->bindMethod($method, $callback);
         }
@@ -989,11 +989,11 @@
          *
          * @param string $method
          * @param mixed $instance
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function callMethodBinding($method, $instance)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->callMethodBinding($method, $instance);
         }
@@ -1003,11 +1003,11 @@
          * @param string $concrete
          * @param string $abstract
          * @param \Closure|string $implementation
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addContextualBinding($concrete, $abstract, $implementation)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->addContextualBinding($concrete, $abstract, $implementation);
         }
@@ -1017,11 +1017,11 @@
          * @param string $abstract
          * @param \Closure|string|null $concrete
          * @param bool $shared
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bindIf($abstract, $concrete = null, $shared = false)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->bindIf($abstract, $concrete, $shared);
         }
@@ -1030,11 +1030,11 @@
          *
          * @param string $abstract
          * @param \Closure|string|null $concrete
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function singleton($abstract, $concrete = null)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->singleton($abstract, $concrete);
         }
@@ -1043,11 +1043,11 @@
          *
          * @param string $abstract
          * @param \Closure|string|null $concrete
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function singletonIf($abstract, $concrete = null)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->singletonIf($abstract, $concrete);
         }
@@ -1056,12 +1056,12 @@
          *
          * @param string $abstract
          * @param \Closure $closure
-         * @return void 
+         * @return void
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function extend($abstract, $closure)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->extend($abstract, $closure);
         }
@@ -1070,11 +1070,11 @@
          *
          * @param string $abstract
          * @param mixed $instance
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function instance($abstract, $instance)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->instance($abstract, $instance);
         }
@@ -1083,11 +1083,11 @@
          *
          * @param array|string $abstracts
          * @param array|mixed $tags
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function tag($abstracts, $tags)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->tag($abstracts, $tags);
         }
@@ -1095,11 +1095,11 @@
          * Resolve all of the bindings for a given tag.
          *
          * @param string $tag
-         * @return \Illuminate\Container\iterable 
-         * @static 
-         */ 
+         * @return \Illuminate\Container\iterable
+         * @static
+         */
         public static function tagged($tag)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->tagged($tag);
         }
@@ -1108,12 +1108,12 @@
          *
          * @param string $abstract
          * @param string $alias
-         * @return void 
+         * @return void
          * @throws \LogicException
-         * @static 
-         */ 
+         * @static
+         */
         public static function alias($abstract, $alias)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->alias($abstract, $alias);
         }
@@ -1122,11 +1122,11 @@
          *
          * @param string $abstract
          * @param \Closure $callback
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function rebinding($abstract, $callback)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->rebinding($abstract, $callback);
         }
@@ -1136,11 +1136,11 @@
          * @param string $abstract
          * @param mixed $target
          * @param string $method
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function refresh($abstract, $target, $method)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->refresh($abstract, $target, $method);
         }
@@ -1149,11 +1149,11 @@
          *
          * @param \Closure $callback
          * @param array $parameters
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function wrap($callback, $parameters = [])
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->wrap($callback, $parameters);
         }
@@ -1163,12 +1163,12 @@
          * @param callable|string $callback
          * @param \Illuminate\Container\array<string,  mixed>  $parameters
          * @param string|null $defaultMethod
-         * @return mixed 
+         * @return mixed
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function call($callback, $parameters = [], $defaultMethod = null)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->call($callback, $parameters, $defaultMethod);
         }
@@ -1176,11 +1176,11 @@
          * Get a closure to resolve the given type from the container.
          *
          * @param string $abstract
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function factory($abstract)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->factory($abstract);
         }
@@ -1189,12 +1189,12 @@
          *
          * @param string $abstract
          * @param array $parameters
-         * @return mixed 
+         * @return mixed
          * @throws \Illuminate\Contracts\Container\BindingResolutionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function makeWith($abstract, $parameters = [])
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->makeWith($abstract, $parameters);
         }
@@ -1205,10 +1205,10 @@
          * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.
          * @throws ContainerExceptionInterface Error while retrieving the entry.
          * @return mixed Entry.
-         * @static 
-         */ 
+         * @static
+         */
         public static function get($id)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->get($id);
         }
@@ -1216,12 +1216,12 @@
          * Instantiate a concrete instance of the given type.
          *
          * @param \Closure|string $concrete
-         * @return mixed 
+         * @return mixed
          * @throws \Illuminate\Contracts\Container\BindingResolutionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function build($concrete)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->build($concrete);
         }
@@ -1230,11 +1230,11 @@
          *
          * @param \Closure|string $abstract
          * @param \Closure|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function resolving($abstract, $callback = null)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->resolving($abstract, $callback);
         }
@@ -1243,22 +1243,22 @@
          *
          * @param \Closure|string $abstract
          * @param \Closure|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function afterResolving($abstract, $callback = null)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->afterResolving($abstract, $callback);
         }
                     /**
          * Get the container's bindings.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getBindings()
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->getBindings();
         }
@@ -1266,11 +1266,11 @@
          * Get the alias for an abstract if available.
          *
          * @param string $abstract
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getAlias($abstract)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->getAlias($abstract);
         }
@@ -1278,11 +1278,11 @@
          * Remove all of the extender callbacks for a given type.
          *
          * @param string $abstract
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forgetExtenders($abstract)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->forgetExtenders($abstract);
         }
@@ -1290,55 +1290,55 @@
          * Remove a resolved instance from the instance cache.
          *
          * @param string $abstract
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forgetInstance($abstract)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->forgetInstance($abstract);
         }
                     /**
          * Clear all of the instances from the container.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forgetInstances()
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->forgetInstances();
         }
                     /**
          * Get the globally available instance of the container.
          *
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function getInstance()
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         return \Illuminate\Foundation\Application::getInstance();
         }
                     /**
          * Set the shared instance of the container.
          *
          * @param \Illuminate\Contracts\Container\Container|null $container
-         * @return \Illuminate\Contracts\Container\Container|static 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Container\Container|static
+         * @static
+         */
         public static function setInstance($container = null)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         return \Illuminate\Foundation\Application::setInstance($container);
         }
                     /**
          * Determine if a given offset exists.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function offsetExists($key)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->offsetExists($key);
         }
@@ -1346,11 +1346,11 @@
          * Get the value at a given offset.
          *
          * @param string $key
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function offsetGet($key)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         return $instance->offsetGet($key);
         }
@@ -1359,11 +1359,11 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetSet($key, $value)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->offsetSet($key, $value);
         }
@@ -1371,32 +1371,32 @@
          * Unset the value at a given offset.
          *
          * @param string $key
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetUnset($key)
-        {            //Method inherited from \Illuminate\Container\Container         
+        {            //Method inherited from \Illuminate\Container\Container
                         /** @var \Illuminate\Foundation\Application $instance */
                         $instance->offsetUnset($key);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Contracts\Console\Kernel
-     */ 
+     */
         class Artisan {
                     /**
          * Run the console application.
          *
          * @param \Symfony\Component\Console\Input\InputInterface $input
          * @param \Symfony\Component\Console\Output\OutputInterface|null $output
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function handle($input, $output = null)
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         return $instance->handle($input, $output);
         }
@@ -1405,11 +1405,11 @@
          *
          * @param \Symfony\Component\Console\Input\InputInterface $input
          * @param int $status
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function terminate($input, $status)
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         $instance->terminate($input, $status);
         }
@@ -1418,11 +1418,11 @@
          *
          * @param string $signature
          * @param \Closure $callback
-         * @return \Illuminate\Foundation\Console\ClosureCommand 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Console\ClosureCommand
+         * @static
+         */
         public static function command($signature, $callback)
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         return $instance->command($signature, $callback);
         }
@@ -1430,11 +1430,11 @@
          * Register the given command with the console application.
          *
          * @param \Symfony\Component\Console\Command\Command $command
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function registerCommand($command)
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         $instance->registerCommand($command);
         }
@@ -1444,12 +1444,12 @@
          * @param string $command
          * @param array $parameters
          * @param \Symfony\Component\Console\Output\OutputInterface|null $outputBuffer
-         * @return int 
+         * @return int
          * @throws \Symfony\Component\Console\Exception\CommandNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function call($command, $parameters = [], $outputBuffer = null)
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         return $instance->call($command, $parameters, $outputBuffer);
         }
@@ -1458,44 +1458,44 @@
          *
          * @param string $command
          * @param array $parameters
-         * @return \Illuminate\Foundation\Bus\PendingDispatch 
-         * @static 
-         */ 
+         * @return \Illuminate\Foundation\Bus\PendingDispatch
+         * @static
+         */
         public static function queue($command, $parameters = [])
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         return $instance->queue($command, $parameters);
         }
                     /**
          * Get all of the commands registered with the console.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function all()
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         return $instance->all();
         }
                     /**
          * Get the output for the last run command.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function output()
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         return $instance->output();
         }
                     /**
          * Bootstrap the application for artisan commands.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bootstrap()
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         $instance->bootstrap();
         }
@@ -1503,32 +1503,32 @@
          * Set the Artisan application instance.
          *
          * @param \Illuminate\Console\Application $artisan
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setArtisan($artisan)
-        {            //Method inherited from \Illuminate\Foundation\Console\Kernel         
+        {            //Method inherited from \Illuminate\Foundation\Console\Kernel
                         /** @var \App\Console\Kernel $instance */
                         $instance->setArtisan($artisan);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Auth\AuthManager
      * @see \Illuminate\Contracts\Auth\Factory
      * @see \Illuminate\Contracts\Auth\Guard
      * @see \Illuminate\Contracts\Auth\StatefulGuard
-     */ 
+     */
         class Auth {
                     /**
          * Attempt to get the guard from the local cache.
          *
          * @param string|null $name
-         * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard
+         * @static
+         */
         public static function guard($name = null)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1539,9 +1539,9 @@
          *
          * @param string $name
          * @param array $config
-         * @return \Illuminate\Auth\SessionGuard 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\SessionGuard
+         * @static
+         */
         public static function createSessionDriver($name, $config)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1552,9 +1552,9 @@
          *
          * @param string $name
          * @param array $config
-         * @return \Illuminate\Auth\TokenGuard 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\TokenGuard
+         * @static
+         */
         public static function createTokenDriver($name, $config)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1563,9 +1563,9 @@
                     /**
          * Get the default authentication driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1575,9 +1575,9 @@
          * Set the default guard driver the factory should serve.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function shouldUse($name)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1587,9 +1587,9 @@
          * Set the default authentication driver name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1600,9 +1600,9 @@
          *
          * @param string $driver
          * @param callable $callback
-         * @return \Illuminate\Auth\AuthManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\AuthManager
+         * @static
+         */
         public static function viaRequest($driver, $callback)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1611,9 +1611,9 @@
                     /**
          * Get the user resolver callback.
          *
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function userResolver()
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1623,9 +1623,9 @@
          * Set the callback to be used to resolve users.
          *
          * @param \Closure $userResolver
-         * @return \Illuminate\Auth\AuthManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\AuthManager
+         * @static
+         */
         public static function resolveUsersUsing($userResolver)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1636,9 +1636,9 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Auth\AuthManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\AuthManager
+         * @static
+         */
         public static function extend($driver, $callback)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1649,9 +1649,9 @@
          *
          * @param string $name
          * @param \Closure $callback
-         * @return \Illuminate\Auth\AuthManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\AuthManager
+         * @static
+         */
         public static function provider($name, $callback)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1660,9 +1660,9 @@
                     /**
          * Determines if any guards have already been resolved.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasResolvedGuards()
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1672,10 +1672,10 @@
          * Create the user provider implementation for the driver.
          *
          * @param string|null $provider
-         * @return \Illuminate\Contracts\Auth\UserProvider|null 
+         * @return \Illuminate\Contracts\Auth\UserProvider|null
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function createUserProvider($provider = null)
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1684,9 +1684,9 @@
                     /**
          * Get the default user provider name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultUserProvider()
         {
                         /** @var \Illuminate\Auth\AuthManager $instance */
@@ -1695,9 +1695,9 @@
                     /**
          * Get the currently authenticated user.
          *
-         * @return \App\User|null 
-         * @static 
-         */ 
+         * @return \App\User|null
+         * @static
+         */
         public static function user()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1706,9 +1706,9 @@
                     /**
          * Get the ID for the currently authenticated user.
          *
-         * @return int|string|null 
-         * @static 
-         */ 
+         * @return int|string|null
+         * @static
+         */
         public static function id()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1718,9 +1718,9 @@
          * Log a user into the application without sessions or cookies.
          *
          * @param array $credentials
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function once($credentials = [])
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1730,9 +1730,9 @@
          * Log the given user ID into the application without sessions or cookies.
          *
          * @param mixed $id
-         * @return \App\User|false 
-         * @static 
-         */ 
+         * @return \App\User|false
+         * @static
+         */
         public static function onceUsingId($id)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1742,9 +1742,9 @@
          * Validate a user's credentials.
          *
          * @param array $credentials
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function validate($credentials = [])
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1755,9 +1755,9 @@
          *
          * @param string $field
          * @param array $extraConditions
-         * @return \Symfony\Component\HttpFoundation\Response|null 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response|null
+         * @static
+         */
         public static function basic($field = 'email', $extraConditions = [])
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1768,9 +1768,9 @@
          *
          * @param string $field
          * @param array $extraConditions
-         * @return \Symfony\Component\HttpFoundation\Response|null 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response|null
+         * @static
+         */
         public static function onceBasic($field = 'email', $extraConditions = [])
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1781,9 +1781,9 @@
          *
          * @param array $credentials
          * @param bool $remember
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function attempt($credentials = [], $remember = false)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1794,9 +1794,9 @@
          *
          * @param mixed $id
          * @param bool $remember
-         * @return \App\User|false 
-         * @static 
-         */ 
+         * @return \App\User|false
+         * @static
+         */
         public static function loginUsingId($id, $remember = false)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1807,9 +1807,9 @@
          *
          * @param \Illuminate\Contracts\Auth\Authenticatable $user
          * @param bool $remember
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function login($user, $remember = false)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1818,9 +1818,9 @@
                     /**
          * Log the user out of the application.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function logout()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1829,9 +1829,9 @@
                     /**
          * Log the user out of the application on their current device only.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function logoutCurrentDevice()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1839,14 +1839,14 @@
         }
                     /**
          * Invalidate other sessions for the current user.
-         * 
+         *
          * The application must be using the AuthenticateSession middleware.
          *
          * @param string $password
          * @param string $attribute
-         * @return bool|null 
-         * @static 
-         */ 
+         * @return bool|null
+         * @static
+         */
         public static function logoutOtherDevices($password, $attribute = 'password')
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1856,9 +1856,9 @@
          * Register an authentication attempt event listener.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function attempting($callback)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1867,9 +1867,9 @@
                     /**
          * Get the last user we attempted to authenticate.
          *
-         * @return \App\User 
-         * @static 
-         */ 
+         * @return \App\User
+         * @static
+         */
         public static function getLastAttempted()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1878,9 +1878,9 @@
                     /**
          * Get a unique identifier for the auth session value.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getName()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1889,9 +1889,9 @@
                     /**
          * Get the name of the cookie used to store the "recaller".
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getRecallerName()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1900,9 +1900,9 @@
                     /**
          * Determine if the user was authenticated via "remember me" cookie.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function viaRemember()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1911,10 +1911,10 @@
                     /**
          * Get the cookie creator instance used by the guard.
          *
-         * @return \Illuminate\Contracts\Cookie\QueueingFactory 
+         * @return \Illuminate\Contracts\Cookie\QueueingFactory
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function getCookieJar()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1924,9 +1924,9 @@
          * Set the cookie creator instance used by the guard.
          *
          * @param \Illuminate\Contracts\Cookie\QueueingFactory $cookie
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setCookieJar($cookie)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1935,9 +1935,9 @@
                     /**
          * Get the event dispatcher instance.
          *
-         * @return \Illuminate\Contracts\Events\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Events\Dispatcher
+         * @static
+         */
         public static function getDispatcher()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1947,9 +1947,9 @@
          * Set the event dispatcher instance.
          *
          * @param \Illuminate\Contracts\Events\Dispatcher $events
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDispatcher($events)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1958,9 +1958,9 @@
                     /**
          * Get the session store used by the guard.
          *
-         * @return \Illuminate\Contracts\Session\Session 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Session\Session
+         * @static
+         */
         public static function getSession()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1969,9 +1969,9 @@
                     /**
          * Return the currently cached user.
          *
-         * @return \App\User|null 
-         * @static 
-         */ 
+         * @return \App\User|null
+         * @static
+         */
         public static function getUser()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1981,9 +1981,9 @@
          * Set the current user.
          *
          * @param \Illuminate\Contracts\Auth\Authenticatable $user
-         * @return \Illuminate\Auth\SessionGuard 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\SessionGuard
+         * @static
+         */
         public static function setUser($user)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -1992,9 +1992,9 @@
                     /**
          * Get the current request instance.
          *
-         * @return \Symfony\Component\HttpFoundation\Request 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Request
+         * @static
+         */
         public static function getRequest()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2004,9 +2004,9 @@
          * Set the current request instance.
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
-         * @return \Illuminate\Auth\SessionGuard 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\SessionGuard
+         * @static
+         */
         public static function setRequest($request)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2015,10 +2015,10 @@
                     /**
          * Determine if current user is authenticated. If not, throw an exception.
          *
-         * @return \App\User 
+         * @return \App\User
          * @throws \Illuminate\Auth\AuthenticationException
-         * @static 
-         */ 
+         * @static
+         */
         public static function authenticate()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2027,9 +2027,9 @@
                     /**
          * Determine if the guard has a user instance.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasUser()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2038,9 +2038,9 @@
                     /**
          * Determine if the current user is authenticated.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function check()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2049,9 +2049,9 @@
                     /**
          * Determine if the current user is a guest.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function guest()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2060,9 +2060,9 @@
                     /**
          * Get the user provider used by the guard.
          *
-         * @return \Illuminate\Contracts\Auth\UserProvider 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Auth\UserProvider
+         * @static
+         */
         public static function getProvider()
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2072,9 +2072,9 @@
          * Set the user provider used by the guard.
          *
          * @param \Illuminate\Contracts\Auth\UserProvider $provider
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setProvider($provider)
         {
                         /** @var \Illuminate\Auth\SessionGuard $instance */
@@ -2085,9 +2085,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Auth\SessionGuard::macro($name, $macro);
@@ -2097,10 +2097,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Auth\SessionGuard::mixin($mixin, $replace);
@@ -2109,28 +2109,28 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Auth\SessionGuard::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\View\Compilers\BladeCompiler
-     */ 
+     */
         class Blade {
                     /**
          * Compile the view at the given path.
          *
          * @param string|null $path
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function compile($path = null)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2139,9 +2139,9 @@
                     /**
          * Get the path currently being compiled.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getPath()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2151,9 +2151,9 @@
          * Set the path currently being compiled.
          *
          * @param string $path
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setPath($path)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2163,9 +2163,9 @@
          * Compile the given Blade template contents.
          *
          * @param string $value
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function compileString($value)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2175,9 +2175,9 @@
          * Strip the parentheses from the given expression.
          *
          * @param string $expression
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function stripParentheses($expression)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2187,9 +2187,9 @@
          * Register a custom Blade compiler.
          *
          * @param callable $compiler
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function extend($compiler)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2198,9 +2198,9 @@
                     /**
          * Get the extensions used by the compiler.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getExtensions()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2211,9 +2211,9 @@
          *
          * @param string $name
          * @param callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function if($name, $callback)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2224,9 +2224,9 @@
          *
          * @param string $name
          * @param array $parameters
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function check($name, ...$parameters)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2238,9 +2238,9 @@
          * @param string $class
          * @param string|null $alias
          * @param string $prefix
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function component($class, $alias = null, $prefix = '')
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2251,9 +2251,9 @@
          *
          * @param array $components
          * @param string $prefix
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function components($components, $prefix = '')
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2262,9 +2262,9 @@
                     /**
          * Get the registered class component aliases.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getClassComponentAliases()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2275,9 +2275,9 @@
          *
          * @param string $path
          * @param string|null $alias
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function aliasComponent($path, $alias = null)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2288,9 +2288,9 @@
          *
          * @param string $path
          * @param string|null $alias
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function include($path, $alias = null)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2301,9 +2301,9 @@
          *
          * @param string $path
          * @param string|null $alias
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function aliasInclude($path, $alias = null)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2314,10 +2314,10 @@
          *
          * @param string $name
          * @param callable $handler
-         * @return void 
+         * @return void
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function directive($name, $handler)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2326,9 +2326,9 @@
                     /**
          * Get the list of custom directives.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getCustomDirectives()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2338,9 +2338,9 @@
          * Register a new precompiler.
          *
          * @param callable $precompiler
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function precompiler($precompiler)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2350,9 +2350,9 @@
          * Set the echo format to be used by the compiler.
          *
          * @param string $format
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setEchoFormat($format)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2361,9 +2361,9 @@
                     /**
          * Set the "echo" format to double encode entities.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function withDoubleEncoding()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2372,9 +2372,9 @@
                     /**
          * Set the "echo" format to not double encode entities.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function withoutDoubleEncoding()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2383,9 +2383,9 @@
                     /**
          * Indicate that component tags should not be compiled.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function withoutComponentTags()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2395,11 +2395,11 @@
          * Get the path to the compiled version of a view.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getCompiledPath($path)
-        {            //Method inherited from \Illuminate\View\Compilers\Compiler         
+        {            //Method inherited from \Illuminate\View\Compilers\Compiler
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
                         return $instance->getCompiledPath($path);
         }
@@ -2407,11 +2407,11 @@
          * Determine if the view at the given path is expired.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isExpired($path)
-        {            //Method inherited from \Illuminate\View\Compilers\Compiler         
+        {            //Method inherited from \Illuminate\View\Compilers\Compiler
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
                         return $instance->isExpired($path);
         }
@@ -2419,9 +2419,9 @@
          * Get a new component hash for a component name.
          *
          * @param string $component
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function newComponentHash($component)
         {
                         return \Illuminate\View\Compilers\BladeCompiler::newComponentHash($component);
@@ -2433,9 +2433,9 @@
          * @param string $alias
          * @param string $data
          * @param string $hash
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function compileClassComponentOpening($component, $alias, $data, $hash)
         {
                         return \Illuminate\View\Compilers\BladeCompiler::compileClassComponentOpening($component, $alias, $data, $hash);
@@ -2443,9 +2443,9 @@
                     /**
          * Compile the end-component statements into valid PHP.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function compileEndComponentClass()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2455,9 +2455,9 @@
          * Sanitize the given component attribute value.
          *
          * @param mixed $value
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function sanitizeComponentAttribute($value)
         {
                         return \Illuminate\View\Compilers\BladeCompiler::sanitizeComponentAttribute($value);
@@ -2465,9 +2465,9 @@
                     /**
          * Compile an end-once block into valid PHP.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function compileEndOnce()
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
@@ -2477,31 +2477,31 @@
          * Compile Blade echos into valid PHP.
          *
          * @param string $value
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function compileEchos($value)
         {
                         /** @var \Illuminate\View\Compilers\BladeCompiler $instance */
                         return $instance->compileEchos($value);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @method static \Illuminate\Broadcasting\Broadcasters\Broadcaster channel(string $channel, callable|string  $callback, array $options = [])
      * @method static mixed auth(\Illuminate\Http\Request $request)
      * @see \Illuminate\Contracts\Broadcasting\Factory
-     */ 
+     */
         class Broadcast {
                     /**
          * Register the routes for handling broadcast authentication and sockets.
          *
          * @param array|null $attributes
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function routes($attributes = null)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2511,9 +2511,9 @@
          * Get the socket ID for the given request.
          *
          * @param \Illuminate\Http\Request|null $request
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function socket($request = null)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2523,9 +2523,9 @@
          * Begin broadcasting an event.
          *
          * @param mixed|null $event
-         * @return \Illuminate\Broadcasting\PendingBroadcast 
-         * @static 
-         */ 
+         * @return \Illuminate\Broadcasting\PendingBroadcast
+         * @static
+         */
         public static function event($event = null)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2535,9 +2535,9 @@
          * Queue the given event for broadcast.
          *
          * @param mixed $event
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function queue($event)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2547,9 +2547,9 @@
          * Get a driver instance.
          *
          * @param string|null $driver
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function connection($driver = null)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2559,9 +2559,9 @@
          * Get a driver instance.
          *
          * @param string|null $name
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function driver($name = null)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2570,9 +2570,9 @@
                     /**
          * Get the default driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2582,9 +2582,9 @@
          * Set the default driver name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
@@ -2595,29 +2595,29 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Broadcasting\BroadcastManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Broadcasting\BroadcastManager
+         * @static
+         */
         public static function extend($driver, $callback)
         {
                         /** @var \Illuminate\Broadcasting\BroadcastManager $instance */
                         return $instance->extend($driver, $callback);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Contracts\Bus\Dispatcher
-     */ 
+     */
         class Bus {
                     /**
          * Dispatch a command to its appropriate handler.
          *
          * @param mixed $command
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function dispatch($command)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2628,9 +2628,9 @@
          *
          * @param mixed $command
          * @param mixed $handler
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function dispatchNow($command, $handler = null)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2640,9 +2640,9 @@
          * Determine if the given command has a handler.
          *
          * @param mixed $command
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasCommandHandler($command)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2652,9 +2652,9 @@
          * Retrieve the handler for a command.
          *
          * @param mixed $command
-         * @return bool|mixed 
-         * @static 
-         */ 
+         * @return bool|mixed
+         * @static
+         */
         public static function getCommandHandler($command)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2664,9 +2664,9 @@
          * Dispatch a command to its appropriate handler behind a queue.
          *
          * @param mixed $command
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function dispatchToQueue($command)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2677,9 +2677,9 @@
          *
          * @param mixed $command
          * @param mixed $handler
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function dispatchAfterResponse($command, $handler = null)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2689,9 +2689,9 @@
          * Set the pipes through which commands should be piped before dispatching.
          *
          * @param array $pipes
-         * @return \Illuminate\Bus\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Bus\Dispatcher
+         * @static
+         */
         public static function pipeThrough($pipes)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2701,9 +2701,9 @@
          * Map a command to a handler.
          *
          * @param array $map
-         * @return \Illuminate\Bus\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Bus\Dispatcher
+         * @static
+         */
         public static function map($map)
         {
                         /** @var \Illuminate\Bus\Dispatcher $instance */
@@ -2714,9 +2714,9 @@
          *
          * @param string|\Closure $command
          * @param callable|int|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertDispatched($command, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2727,9 +2727,9 @@
          *
          * @param string $command
          * @param int $times
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertDispatchedTimes($command, $times = 1)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2740,9 +2740,9 @@
          *
          * @param string|\Closure $command
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotDispatched($command, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2753,9 +2753,9 @@
          *
          * @param string|\Closure $command
          * @param callable|int|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertDispatchedAfterResponse($command, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2766,9 +2766,9 @@
          *
          * @param string $command
          * @param int $times
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertDispatchedAfterResponseTimes($command, $times = 1)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2779,9 +2779,9 @@
          *
          * @param string|\Closure $command
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotDispatchedAfterResponse($command, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2792,9 +2792,9 @@
          *
          * @param string $command
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function dispatched($command, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2805,9 +2805,9 @@
          *
          * @param string $command
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function dispatchedAfterResponse($command, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2817,9 +2817,9 @@
          * Determine if there are any stored commands for a given class.
          *
          * @param string $command
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasDispatched($command)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
@@ -2829,32 +2829,32 @@
          * Determine if there are any stored commands for a given class.
          *
          * @param string $command
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasDispatchedAfterResponse($command)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\BusFake $instance */
                         return $instance->hasDispatchedAfterResponse($command);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @method static \Illuminate\Contracts\Cache\Lock lock(string $name, int $seconds = 0, mixed $owner = null)
      * @method static \Illuminate\Contracts\Cache\Lock restoreLock(string $name, string $owner)
      * @see \Illuminate\Cache\CacheManager
      * @see \Illuminate\Cache\Repository
-     */ 
+     */
         class Cache {
                     /**
          * Get a cache store instance by name, wrapped in a repository.
          *
          * @param string|null $name
-         * @return \Illuminate\Contracts\Cache\Repository 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Cache\Repository
+         * @static
+         */
         public static function store($name = null)
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2864,9 +2864,9 @@
          * Get a cache driver instance.
          *
          * @param string|null $driver
-         * @return \Illuminate\Contracts\Cache\Repository 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Cache\Repository
+         * @static
+         */
         public static function driver($driver = null)
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2876,9 +2876,9 @@
          * Create a new cache repository with the given implementation.
          *
          * @param \Illuminate\Contracts\Cache\Store $store
-         * @return \Illuminate\Cache\Repository 
-         * @static 
-         */ 
+         * @return \Illuminate\Cache\Repository
+         * @static
+         */
         public static function repository($store)
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2887,9 +2887,9 @@
                     /**
          * Re-set the event dispatcher on all resolved cache repositories.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function refreshEventDispatcher()
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2898,9 +2898,9 @@
                     /**
          * Get the default cache driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2910,9 +2910,9 @@
          * Set the default cache driver name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2922,9 +2922,9 @@
          * Unset the given driver instances.
          *
          * @param array|string|null $name
-         * @return \Illuminate\Cache\CacheManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Cache\CacheManager
+         * @static
+         */
         public static function forgetDriver($name = null)
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2935,9 +2935,9 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Cache\CacheManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Cache\CacheManager
+         * @static
+         */
         public static function extend($driver, $callback)
         {
                         /** @var \Illuminate\Cache\CacheManager $instance */
@@ -2947,9 +2947,9 @@
          * Determine if an item exists in the cache.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -2959,9 +2959,9 @@
          * Determine if an item doesn't exist in the cache.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function missing($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -2972,9 +2972,9 @@
          *
          * @param string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function get($key, $default = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -2982,13 +2982,13 @@
         }
                     /**
          * Retrieve multiple items from the cache by key.
-         * 
+         *
          * Items not found in the cache will have a null value.
          *
          * @param array $keys
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function many($keys)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3003,8 +3003,8 @@
          * @throws \Psr\SimpleCache\InvalidArgumentException
          *   MUST be thrown if $keys is neither an array nor a Traversable,
          *   or if any of the $keys are not a legal value.
-         * @static 
-         */ 
+         * @static
+         */
         public static function getMultiple($keys, $default = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3015,9 +3015,9 @@
          *
          * @param string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function pull($key, $default = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3029,9 +3029,9 @@
          * @param string $key
          * @param mixed $value
          * @param \DateTimeInterface|\DateInterval|int|null $ttl
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function put($key, $value, $ttl = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3048,8 +3048,8 @@
          * @return bool True on success and false on failure.
          * @throws \Psr\SimpleCache\InvalidArgumentException
          *   MUST be thrown if the $key string is not a legal value.
-         * @static 
-         */ 
+         * @static
+         */
         public static function set($key, $value, $ttl = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3060,9 +3060,9 @@
          *
          * @param array $values
          * @param \DateTimeInterface|\DateInterval|int|null $ttl
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function putMany($values, $ttl = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3079,8 +3079,8 @@
          * @throws \Psr\SimpleCache\InvalidArgumentException
          *   MUST be thrown if $values is neither an array nor a Traversable,
          *   or if any of the $values are not a legal value.
-         * @static 
-         */ 
+         * @static
+         */
         public static function setMultiple($values, $ttl = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3092,9 +3092,9 @@
          * @param string $key
          * @param mixed $value
          * @param \DateTimeInterface|\DateInterval|int|null $ttl
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function add($key, $value, $ttl = null)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3105,9 +3105,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return int|bool 
-         * @static 
-         */ 
+         * @return int|bool
+         * @static
+         */
         public static function increment($key, $value = 1)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3118,9 +3118,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return int|bool 
-         * @static 
-         */ 
+         * @return int|bool
+         * @static
+         */
         public static function decrement($key, $value = 1)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3131,9 +3131,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function forever($key, $value)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3145,9 +3145,9 @@
          * @param string $key
          * @param \DateTimeInterface|\DateInterval|int|null $ttl
          * @param \Closure $callback
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function remember($key, $ttl, $callback)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3158,9 +3158,9 @@
          *
          * @param string $key
          * @param \Closure $callback
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function sear($key, $callback)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3171,9 +3171,9 @@
          *
          * @param string $key
          * @param \Closure $callback
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function rememberForever($key, $callback)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3183,9 +3183,9 @@
          * Remove an item from the cache.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function forget($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3198,8 +3198,8 @@
          * @return bool True if the item was successfully removed. False if there was an error.
          * @throws \Psr\SimpleCache\InvalidArgumentException
          *   MUST be thrown if the $key string is not a legal value.
-         * @static 
-         */ 
+         * @static
+         */
         public static function delete($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3213,8 +3213,8 @@
          * @throws \Psr\SimpleCache\InvalidArgumentException
          *   MUST be thrown if $keys is neither an array nor a Traversable,
          *   or if any of the $keys are not a legal value.
-         * @static 
-         */ 
+         * @static
+         */
         public static function deleteMultiple($keys)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3224,8 +3224,8 @@
          * Wipes clean the entire cache's keys.
          *
          * @return bool True on success and false on failure.
-         * @static 
-         */ 
+         * @static
+         */
         public static function clear()
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3235,10 +3235,10 @@
          * Begin executing a new tags operation if the store supports it.
          *
          * @param array|mixed $names
-         * @return \Illuminate\Cache\TaggedCache 
+         * @return \Illuminate\Cache\TaggedCache
          * @throws \BadMethodCallException
-         * @static 
-         */ 
+         * @static
+         */
         public static function tags($names)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3247,9 +3247,9 @@
                     /**
          * Get the default cache time.
          *
-         * @return int|null 
-         * @static 
-         */ 
+         * @return int|null
+         * @static
+         */
         public static function getDefaultCacheTime()
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3259,9 +3259,9 @@
          * Set the default cache time in seconds.
          *
          * @param int|null $seconds
-         * @return \Illuminate\Cache\Repository 
-         * @static 
-         */ 
+         * @return \Illuminate\Cache\Repository
+         * @static
+         */
         public static function setDefaultCacheTime($seconds)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3270,9 +3270,9 @@
                     /**
          * Get the cache store implementation.
          *
-         * @return \Illuminate\Contracts\Cache\Store 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Cache\Store
+         * @static
+         */
         public static function getStore()
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3281,9 +3281,9 @@
                     /**
          * Get the event dispatcher instance.
          *
-         * @return \Illuminate\Contracts\Events\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Events\Dispatcher
+         * @static
+         */
         public static function getEventDispatcher()
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3293,9 +3293,9 @@
          * Set the event dispatcher instance.
          *
          * @param \Illuminate\Contracts\Events\Dispatcher $events
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setEventDispatcher($events)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3305,9 +3305,9 @@
          * Determine if a cached value exists.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function offsetExists($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3317,9 +3317,9 @@
          * Retrieve an item from the cache by key.
          *
          * @param string $key
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function offsetGet($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3330,9 +3330,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetSet($key, $value)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3342,9 +3342,9 @@
          * Remove an item from the cache.
          *
          * @param string $key
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetUnset($key)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3355,9 +3355,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Cache\Repository::macro($name, $macro);
@@ -3367,10 +3367,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Cache\Repository::mixin($mixin, $replace);
@@ -3379,9 +3379,9 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Cache\Repository::hasMacro($name);
@@ -3391,10 +3391,10 @@
          *
          * @param string $method
          * @param array $parameters
-         * @return mixed 
+         * @return mixed
          * @throws \BadMethodCallException
-         * @static 
-         */ 
+         * @static
+         */
         public static function macroCall($method, $parameters)
         {
                         /** @var \Illuminate\Cache\Repository $instance */
@@ -3403,9 +3403,9 @@
                     /**
          * Remove all items from the cache.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function flush()
         {
                         /** @var \Illuminate\Cache\FileStore $instance */
@@ -3414,9 +3414,9 @@
                     /**
          * Get the Filesystem instance.
          *
-         * @return \Illuminate\Filesystem\Filesystem 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\Filesystem
+         * @static
+         */
         public static function getFilesystem()
         {
                         /** @var \Illuminate\Cache\FileStore $instance */
@@ -3425,9 +3425,9 @@
                     /**
          * Get the working directory of the cache.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDirectory()
         {
                         /** @var \Illuminate\Cache\FileStore $instance */
@@ -3436,29 +3436,29 @@
                     /**
          * Get the cache key prefix.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getPrefix()
         {
                         /** @var \Illuminate\Cache\FileStore $instance */
                         return $instance->getPrefix();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Config\Repository
-     */ 
+     */
         class Config {
                     /**
          * Determine if the given configuration value exists.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($key)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3469,9 +3469,9 @@
          *
          * @param array|string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function get($key, $default = null)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3481,9 +3481,9 @@
          * Get many configuration values.
          *
          * @param array $keys
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getMany($keys)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3494,9 +3494,9 @@
          *
          * @param array|string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function set($key, $value = null)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3507,9 +3507,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function prepend($key, $value)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3520,9 +3520,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function push($key, $value)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3531,9 +3531,9 @@
                     /**
          * Get all of the configuration items for the application.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function all()
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3543,9 +3543,9 @@
          * Determine if the given configuration option exists.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function offsetExists($key)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3555,9 +3555,9 @@
          * Get a configuration option.
          *
          * @param string $key
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function offsetGet($key)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3568,9 +3568,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetSet($key, $value)
         {
                         /** @var \Illuminate\Config\Repository $instance */
@@ -3580,21 +3580,21 @@
          * Unset a configuration option.
          *
          * @param string $key
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetUnset($key)
         {
                         /** @var \Illuminate\Config\Repository $instance */
                         $instance->offsetUnset($key);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Cookie\CookieJar
-     */ 
+     */
         class Cookie {
                     /**
          * Create a new cookie instance.
@@ -3608,9 +3608,9 @@
          * @param bool $httpOnly
          * @param bool $raw
          * @param string|null $sameSite
-         * @return \Symfony\Component\HttpFoundation\Cookie 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Cookie
+         * @static
+         */
         public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3627,9 +3627,9 @@
          * @param bool $httpOnly
          * @param bool $raw
          * @param string|null $sameSite
-         * @return \Symfony\Component\HttpFoundation\Cookie 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Cookie
+         * @static
+         */
         public static function forever($name, $value, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3641,9 +3641,9 @@
          * @param string $name
          * @param string|null $path
          * @param string|null $domain
-         * @return \Symfony\Component\HttpFoundation\Cookie 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Cookie
+         * @static
+         */
         public static function forget($name, $path = null, $domain = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3654,9 +3654,9 @@
          *
          * @param string $key
          * @param string|null $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasQueued($key, $path = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3668,9 +3668,9 @@
          * @param string $key
          * @param mixed $default
          * @param string|null $path
-         * @return \Symfony\Component\HttpFoundation\Cookie|null 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Cookie|null
+         * @static
+         */
         public static function queued($key, $default = null, $path = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3680,9 +3680,9 @@
          * Queue a cookie to send with the next response.
          *
          * @param array $parameters
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function queue(...$parameters)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3693,9 +3693,9 @@
          *
          * @param string $name
          * @param string|null $path
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function unqueue($name, $path = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3708,9 +3708,9 @@
          * @param string $domain
          * @param bool $secure
          * @param string|null $sameSite
-         * @return \Illuminate\Cookie\CookieJar 
-         * @static 
-         */ 
+         * @return \Illuminate\Cookie\CookieJar
+         * @static
+         */
         public static function setDefaultPathAndDomain($path, $domain, $secure = false, $sameSite = null)
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3719,9 +3719,9 @@
                     /**
          * Get the cookies which have been queued for the next request.
          *
-         * @return \Symfony\Component\HttpFoundation\Cookie[] 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Cookie[]
+         * @static
+         */
         public static function getQueuedCookies()
         {
                         /** @var \Illuminate\Cookie\CookieJar $instance */
@@ -3732,9 +3732,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Cookie\CookieJar::macro($name, $macro);
@@ -3744,10 +3744,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Cookie\CookieJar::mixin($mixin, $replace);
@@ -3756,29 +3756,29 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Cookie\CookieJar::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Encryption\Encrypter
-     */ 
+     */
         class Crypt {
                     /**
          * Determine if the given key and cipher combination is valid.
          *
          * @param string $key
          * @param string $cipher
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function supported($key, $cipher)
         {
                         return \Illuminate\Encryption\Encrypter::supported($key, $cipher);
@@ -3787,9 +3787,9 @@
          * Create a new encryption key for the given cipher.
          *
          * @param string $cipher
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function generateKey($cipher)
         {
                         return \Illuminate\Encryption\Encrypter::generateKey($cipher);
@@ -3799,10 +3799,10 @@
          *
          * @param mixed $value
          * @param bool $serialize
-         * @return string 
+         * @return string
          * @throws \Illuminate\Contracts\Encryption\EncryptException
-         * @static 
-         */ 
+         * @static
+         */
         public static function encrypt($value, $serialize = true)
         {
                         /** @var \Illuminate\Encryption\Encrypter $instance */
@@ -3812,10 +3812,10 @@
          * Encrypt a string without serialization.
          *
          * @param string $value
-         * @return string 
+         * @return string
          * @throws \Illuminate\Contracts\Encryption\EncryptException
-         * @static 
-         */ 
+         * @static
+         */
         public static function encryptString($value)
         {
                         /** @var \Illuminate\Encryption\Encrypter $instance */
@@ -3826,10 +3826,10 @@
          *
          * @param string $payload
          * @param bool $unserialize
-         * @return mixed 
+         * @return mixed
          * @throws \Illuminate\Contracts\Encryption\DecryptException
-         * @static 
-         */ 
+         * @static
+         */
         public static function decrypt($payload, $unserialize = true)
         {
                         /** @var \Illuminate\Encryption\Encrypter $instance */
@@ -3839,10 +3839,10 @@
          * Decrypt the given string without unserialization.
          *
          * @param string $payload
-         * @return string 
+         * @return string
          * @throws \Illuminate\Contracts\Encryption\DecryptException
-         * @static 
-         */ 
+         * @static
+         */
         public static function decryptString($payload)
         {
                         /** @var \Illuminate\Encryption\Encrypter $instance */
@@ -3851,30 +3851,30 @@
                     /**
          * Get the encryption key.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getKey()
         {
                         /** @var \Illuminate\Encryption\Encrypter $instance */
                         return $instance->getKey();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Database\DatabaseManager
      * @see \Illuminate\Database\Connection
-     */ 
+     */
         class DB {
                     /**
          * Get a database connection instance.
          *
          * @param string|null $name
-         * @return \Illuminate\Database\Connection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Connection
+         * @static
+         */
         public static function connection($name = null)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3884,9 +3884,9 @@
          * Disconnect from the given database and remove from local cache.
          *
          * @param string|null $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function purge($name = null)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3896,9 +3896,9 @@
          * Disconnect from the given database.
          *
          * @param string|null $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function disconnect($name = null)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3908,9 +3908,9 @@
          * Reconnect to the given database.
          *
          * @param string|null $name
-         * @return \Illuminate\Database\Connection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Connection
+         * @static
+         */
         public static function reconnect($name = null)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3921,9 +3921,9 @@
          *
          * @param string $name
          * @param callable $callback
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function usingConnection($name, $callback)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3932,9 +3932,9 @@
                     /**
          * Get the default connection name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultConnection()
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3944,9 +3944,9 @@
          * Set the default connection name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultConnection($name)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3955,9 +3955,9 @@
                     /**
          * Get all of the support drivers.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function supportedDrivers()
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3966,9 +3966,9 @@
                     /**
          * Get all of the drivers that are actually available.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function availableDrivers()
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3979,9 +3979,9 @@
          *
          * @param string $name
          * @param callable $resolver
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function extend($name, $resolver)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -3990,9 +3990,9 @@
                     /**
          * Return all of the created connections.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getConnections()
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -4002,9 +4002,9 @@
          * Set the database reconnector callback.
          *
          * @param callable $reconnector
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setReconnector($reconnector)
         {
                         /** @var \Illuminate\Database\DatabaseManager $instance */
@@ -4013,9 +4013,9 @@
                     /**
          * Get a schema builder instance for the connection.
          *
-         * @return \Illuminate\Database\Schema\MySqlBuilder 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Schema\MySqlBuilder
+         * @static
+         */
         public static function getSchemaBuilder()
         {
                         /** @var \Illuminate\Database\MySqlConnection $instance */
@@ -4024,33 +4024,33 @@
                     /**
          * Set the query grammar to the default implementation.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function useDefaultQueryGrammar()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->useDefaultQueryGrammar();
         }
                     /**
          * Set the schema grammar to the default implementation.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function useDefaultSchemaGrammar()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->useDefaultSchemaGrammar();
         }
                     /**
          * Set the query post processor to the default implementation.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function useDefaultPostProcessor()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->useDefaultPostProcessor();
         }
@@ -4059,22 +4059,22 @@
          *
          * @param \Closure|\Illuminate\Database\Query\Builder|string $table
          * @param string|null $as
-         * @return \Illuminate\Database\Query\Builder 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Query\Builder
+         * @static
+         */
         public static function table($table, $as = null)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->table($table, $as);
         }
                     /**
          * Get a new query builder instance.
          *
-         * @return \Illuminate\Database\Query\Builder 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Query\Builder
+         * @static
+         */
         public static function query()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->query();
         }
@@ -4084,11 +4084,11 @@
          * @param string $query
          * @param array $bindings
          * @param bool $useReadPdo
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function selectOne($query, $bindings = [], $useReadPdo = true)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->selectOne($query, $bindings, $useReadPdo);
         }
@@ -4097,11 +4097,11 @@
          *
          * @param string $query
          * @param array $bindings
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function selectFromWriteConnection($query, $bindings = [])
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->selectFromWriteConnection($query, $bindings);
         }
@@ -4111,11 +4111,11 @@
          * @param string $query
          * @param array $bindings
          * @param bool $useReadPdo
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function select($query, $bindings = [], $useReadPdo = true)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->select($query, $bindings, $useReadPdo);
         }
@@ -4125,11 +4125,11 @@
          * @param string $query
          * @param array $bindings
          * @param bool $useReadPdo
-         * @return \Generator 
-         * @static 
-         */ 
+         * @return \Generator
+         * @static
+         */
         public static function cursor($query, $bindings = [], $useReadPdo = true)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->cursor($query, $bindings, $useReadPdo);
         }
@@ -4138,11 +4138,11 @@
          *
          * @param string $query
          * @param array $bindings
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function insert($query, $bindings = [])
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->insert($query, $bindings);
         }
@@ -4151,11 +4151,11 @@
          *
          * @param string $query
          * @param array $bindings
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function update($query, $bindings = [])
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->update($query, $bindings);
         }
@@ -4164,11 +4164,11 @@
          *
          * @param string $query
          * @param array $bindings
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function delete($query, $bindings = [])
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->delete($query, $bindings);
         }
@@ -4177,11 +4177,11 @@
          *
          * @param string $query
          * @param array $bindings
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function statement($query, $bindings = [])
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->statement($query, $bindings);
         }
@@ -4190,11 +4190,11 @@
          *
          * @param string $query
          * @param array $bindings
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function affectingStatement($query, $bindings = [])
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->affectingStatement($query, $bindings);
         }
@@ -4202,11 +4202,11 @@
          * Run a raw, unprepared query against the PDO connection.
          *
          * @param string $query
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function unprepared($query)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->unprepared($query);
         }
@@ -4214,11 +4214,11 @@
          * Execute the given callback in "dry run" mode.
          *
          * @param \Closure $callback
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function pretend($callback)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->pretend($callback);
         }
@@ -4227,11 +4227,11 @@
          *
          * @param \PDOStatement $statement
          * @param array $bindings
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bindValues($statement, $bindings)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->bindValues($statement, $bindings);
         }
@@ -4239,11 +4239,11 @@
          * Prepare the query bindings for execution.
          *
          * @param array $bindings
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function prepareBindings($bindings)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->prepareBindings($bindings);
         }
@@ -4253,11 +4253,11 @@
          * @param string $query
          * @param array $bindings
          * @param float|null $time
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function logQuery($query, $bindings, $time = null)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->logQuery($query, $bindings, $time);
         }
@@ -4265,11 +4265,11 @@
          * Register a database query listener with the connection.
          *
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function listen($callback)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->listen($callback);
         }
@@ -4277,11 +4277,11 @@
          * Get a new raw query expression.
          *
          * @param mixed $value
-         * @return \Illuminate\Database\Query\Expression 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Query\Expression
+         * @static
+         */
         public static function raw($value)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->raw($value);
         }
@@ -4289,22 +4289,22 @@
          * Indicate if any records have been modified.
          *
          * @param bool $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function recordsHaveBeenModified($value = true)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->recordsHaveBeenModified($value);
         }
                     /**
          * Is Doctrine available?
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isDoctrineAvailable()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->isDoctrineAvailable();
         }
@@ -4313,77 +4313,77 @@
          *
          * @param string $table
          * @param string $column
-         * @return \Doctrine\DBAL\Schema\Column 
-         * @static 
-         */ 
+         * @return \Doctrine\DBAL\Schema\Column
+         * @static
+         */
         public static function getDoctrineColumn($table, $column)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getDoctrineColumn($table, $column);
         }
                     /**
          * Get the Doctrine DBAL schema manager for the connection.
          *
-         * @return \Doctrine\DBAL\Schema\AbstractSchemaManager 
-         * @static 
-         */ 
+         * @return \Doctrine\DBAL\Schema\AbstractSchemaManager
+         * @static
+         */
         public static function getDoctrineSchemaManager()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getDoctrineSchemaManager();
         }
                     /**
          * Get the Doctrine DBAL database connection instance.
          *
-         * @return \Doctrine\DBAL\Connection 
-         * @static 
-         */ 
+         * @return \Doctrine\DBAL\Connection
+         * @static
+         */
         public static function getDoctrineConnection()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getDoctrineConnection();
         }
                     /**
          * Get the current PDO connection.
          *
-         * @return \PDO 
-         * @static 
-         */ 
+         * @return \PDO
+         * @static
+         */
         public static function getPdo()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getPdo();
         }
                     /**
          * Get the current PDO connection parameter without executing any reconnect logic.
          *
-         * @return \PDO|\Closure|null 
-         * @static 
-         */ 
+         * @return \PDO|\Closure|null
+         * @static
+         */
         public static function getRawPdo()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getRawPdo();
         }
                     /**
          * Get the current PDO connection used for reading.
          *
-         * @return \PDO 
-         * @static 
-         */ 
+         * @return \PDO
+         * @static
+         */
         public static function getReadPdo()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getReadPdo();
         }
                     /**
          * Get the current read PDO connection parameter without executing any reconnect logic.
          *
-         * @return \PDO|\Closure|null 
-         * @static 
-         */ 
+         * @return \PDO|\Closure|null
+         * @static
+         */
         public static function getRawReadPdo()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getRawReadPdo();
         }
@@ -4391,11 +4391,11 @@
          * Set the PDO connection.
          *
          * @param \PDO|\Closure|null $pdo
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setPdo($pdo)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setPdo($pdo);
         }
@@ -4403,22 +4403,22 @@
          * Set the PDO connection used for reading.
          *
          * @param \PDO|\Closure|null $pdo
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setReadPdo($pdo)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setReadPdo($pdo);
         }
                     /**
          * Get the database connection name.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function getName()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getName();
         }
@@ -4426,33 +4426,33 @@
          * Get an option from the configuration options.
          *
          * @param string|null $option
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getConfig($option = null)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getConfig($option);
         }
                     /**
          * Get the PDO driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDriverName()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getDriverName();
         }
                     /**
          * Get the query grammar used by the connection.
          *
-         * @return \Illuminate\Database\Query\Grammars\Grammar 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Query\Grammars\Grammar
+         * @static
+         */
         public static function getQueryGrammar()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getQueryGrammar();
         }
@@ -4460,22 +4460,22 @@
          * Set the query grammar used by the connection.
          *
          * @param \Illuminate\Database\Query\Grammars\Grammar $grammar
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setQueryGrammar($grammar)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setQueryGrammar($grammar);
         }
                     /**
          * Get the schema grammar used by the connection.
          *
-         * @return \Illuminate\Database\Schema\Grammars\Grammar 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Schema\Grammars\Grammar
+         * @static
+         */
         public static function getSchemaGrammar()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getSchemaGrammar();
         }
@@ -4483,22 +4483,22 @@
          * Set the schema grammar used by the connection.
          *
          * @param \Illuminate\Database\Schema\Grammars\Grammar $grammar
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setSchemaGrammar($grammar)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setSchemaGrammar($grammar);
         }
                     /**
          * Get the query post processor used by the connection.
          *
-         * @return \Illuminate\Database\Query\Processors\Processor 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Query\Processors\Processor
+         * @static
+         */
         public static function getPostProcessor()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getPostProcessor();
         }
@@ -4506,22 +4506,22 @@
          * Set the query post processor used by the connection.
          *
          * @param \Illuminate\Database\Query\Processors\Processor $processor
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setPostProcessor($processor)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setPostProcessor($processor);
         }
                     /**
          * Get the event dispatcher used by the connection.
          *
-         * @return \Illuminate\Contracts\Events\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Events\Dispatcher
+         * @static
+         */
         public static function getEventDispatcher()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getEventDispatcher();
         }
@@ -4529,99 +4529,99 @@
          * Set the event dispatcher instance on the connection.
          *
          * @param \Illuminate\Contracts\Events\Dispatcher $events
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setEventDispatcher($events)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setEventDispatcher($events);
         }
                     /**
          * Unset the event dispatcher for this connection.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function unsetEventDispatcher()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->unsetEventDispatcher();
         }
                     /**
          * Determine if the connection is in a "dry run".
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function pretending()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->pretending();
         }
                     /**
          * Get the connection query log.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getQueryLog()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getQueryLog();
         }
                     /**
          * Clear the query log.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushQueryLog()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->flushQueryLog();
         }
                     /**
          * Enable the query log on the connection.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function enableQueryLog()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->enableQueryLog();
         }
                     /**
          * Disable the query log on the connection.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function disableQueryLog()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->disableQueryLog();
         }
                     /**
          * Determine whether we're logging queries.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function logging()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->logging();
         }
                     /**
          * Get the name of the connected database.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDatabaseName()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getDatabaseName();
         }
@@ -4629,22 +4629,22 @@
          * Set the name of the connected database.
          *
          * @param string $database
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setDatabaseName($database)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setDatabaseName($database);
         }
                     /**
          * Get the table prefix for the connection.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getTablePrefix()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->getTablePrefix();
         }
@@ -4652,11 +4652,11 @@
          * Set the table prefix in use by the connection.
          *
          * @param string $prefix
-         * @return \Illuminate\Database\MySqlConnection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\MySqlConnection
+         * @static
+         */
         public static function setTablePrefix($prefix)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->setTablePrefix($prefix);
         }
@@ -4664,11 +4664,11 @@
          * Set the table prefix and return the grammar.
          *
          * @param \Illuminate\Database\Grammar $grammar
-         * @return \Illuminate\Database\Grammar 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Grammar
+         * @static
+         */
         public static function withTablePrefix($grammar)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->withTablePrefix($grammar);
         }
@@ -4677,22 +4677,22 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function resolverFor($driver, $callback)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         \Illuminate\Database\MySqlConnection::resolverFor($driver, $callback);
         }
                     /**
          * Get the connection resolver for the given driver.
          *
          * @param string $driver
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getResolver($driver)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         return \Illuminate\Database\MySqlConnection::getResolver($driver);
         }
                     /**
@@ -4700,36 +4700,36 @@
          *
          * @param \Closure $callback
          * @param int $attempts
-         * @return mixed 
+         * @return mixed
          * @throws \Throwable
-         * @static 
-         */ 
+         * @static
+         */
         public static function transaction($callback, $attempts = 1)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->transaction($callback, $attempts);
         }
                     /**
          * Start a new database transaction.
          *
-         * @return void 
+         * @return void
          * @throws \Throwable
-         * @static 
-         */ 
+         * @static
+         */
         public static function beginTransaction()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->beginTransaction();
         }
                     /**
          * Commit the active database transaction.
          *
-         * @return void 
+         * @return void
          * @throws \Throwable
-         * @static 
-         */ 
+         * @static
+         */
         public static function commit()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->commit();
         }
@@ -4737,42 +4737,42 @@
          * Rollback the active database transaction.
          *
          * @param int|null $toLevel
-         * @return void 
+         * @return void
          * @throws \Throwable
-         * @static 
-         */ 
+         * @static
+         */
         public static function rollBack($toLevel = null)
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         $instance->rollBack($toLevel);
         }
                     /**
          * Get the number of active transactions.
          *
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function transactionLevel()
-        {            //Method inherited from \Illuminate\Database\Connection         
+        {            //Method inherited from \Illuminate\Database\Connection
                         /** @var \Illuminate\Database\MySqlConnection $instance */
                         return $instance->transactionLevel();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Events\Dispatcher
-     */ 
+     */
         class Event {
                     /**
          * Register an event listener with the dispatcher.
          *
          * @param string|array $events
          * @param \Closure|string $listener
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function listen($events, $listener)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4782,9 +4782,9 @@
          * Determine if a given event has listeners.
          *
          * @param string $eventName
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasListeners($eventName)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4794,9 +4794,9 @@
          * Determine if the given event has any wildcard listeners.
          *
          * @param string $eventName
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasWildcardListeners($eventName)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4807,9 +4807,9 @@
          *
          * @param string $event
          * @param array $payload
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function push($event, $payload = [])
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4819,9 +4819,9 @@
          * Flush a set of pushed events.
          *
          * @param string $event
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flush($event)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4831,9 +4831,9 @@
          * Register an event subscriber with the dispatcher.
          *
          * @param object|string $subscriber
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function subscribe($subscriber)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4844,9 +4844,9 @@
          *
          * @param string|object $event
          * @param mixed $payload
-         * @return array|null 
-         * @static 
-         */ 
+         * @return array|null
+         * @static
+         */
         public static function until($event, $payload = [])
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4858,9 +4858,9 @@
          * @param string|object $event
          * @param mixed $payload
          * @param bool $halt
-         * @return array|null 
-         * @static 
-         */ 
+         * @return array|null
+         * @static
+         */
         public static function dispatch($event, $payload = [], $halt = false)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4870,9 +4870,9 @@
          * Get all of the listeners for a given event name.
          *
          * @param string $eventName
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getListeners($eventName)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4883,9 +4883,9 @@
          *
          * @param \Closure|string $listener
          * @param bool $wildcard
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function makeListener($listener, $wildcard = false)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4896,9 +4896,9 @@
          *
          * @param string $listener
          * @param bool $wildcard
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function createClassListener($listener, $wildcard = false)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4908,9 +4908,9 @@
          * Remove a set of listeners from the dispatcher.
          *
          * @param string $event
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forget($event)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4919,9 +4919,9 @@
                     /**
          * Forget all of the pushed listeners.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forgetPushed()
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4931,9 +4931,9 @@
          * Set the queue resolver implementation.
          *
          * @param callable $resolver
-         * @return \Illuminate\Events\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Events\Dispatcher
+         * @static
+         */
         public static function setQueueResolver($resolver)
         {
                         /** @var \Illuminate\Events\Dispatcher $instance */
@@ -4944,9 +4944,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Events\Dispatcher::macro($name, $macro);
@@ -4956,10 +4956,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Events\Dispatcher::mixin($mixin, $replace);
@@ -4968,9 +4968,9 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Events\Dispatcher::hasMacro($name);
@@ -4980,9 +4980,9 @@
          *
          * @param string|\Closure $event
          * @param callable|int|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertDispatched($event, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
@@ -4993,9 +4993,9 @@
          *
          * @param string $event
          * @param int $times
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertDispatchedTimes($event, $times = 1)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
@@ -5006,9 +5006,9 @@
          *
          * @param string|\Closure $event
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotDispatched($event, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
@@ -5019,9 +5019,9 @@
          *
          * @param string $event
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function dispatched($event, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
@@ -5031,29 +5031,29 @@
          * Determine if the given event has been dispatched.
          *
          * @param string $event
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasDispatched($event)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\EventFake $instance */
                         return $instance->hasDispatched($event);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Filesystem\Filesystem
-     */ 
+     */
         class File {
                     /**
          * Determine if a file or directory exists.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function exists($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5063,9 +5063,9 @@
          * Determine if a file or directory is missing.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function missing($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5076,10 +5076,10 @@
          *
          * @param string $path
          * @param bool $lock
-         * @return string 
+         * @return string
          * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function get($path, $lock = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5089,9 +5089,9 @@
          * Get contents of a file with shared access.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function sharedGet($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5101,10 +5101,10 @@
          * Get the returned value of a file.
          *
          * @param string $path
-         * @return mixed 
+         * @return mixed
          * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function getRequire($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5114,9 +5114,9 @@
          * Require the given file once.
          *
          * @param string $file
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function requireOnce($file)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5126,9 +5126,9 @@
          * Get the MD5 hash of the file at the given path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function hash($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5140,9 +5140,9 @@
          * @param string $path
          * @param string $contents
          * @param bool $lock
-         * @return int|bool 
-         * @static 
-         */ 
+         * @return int|bool
+         * @static
+         */
         public static function put($path, $contents, $lock = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5153,9 +5153,9 @@
          *
          * @param string $path
          * @param string $content
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function replace($path, $content)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5166,9 +5166,9 @@
          *
          * @param string $path
          * @param string $data
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function prepend($path, $data)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5179,9 +5179,9 @@
          *
          * @param string $path
          * @param string $data
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function append($path, $data)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5192,9 +5192,9 @@
          *
          * @param string $path
          * @param int|null $mode
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function chmod($path, $mode = null)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5204,9 +5204,9 @@
          * Delete the file at a given path.
          *
          * @param string|array $paths
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function delete($paths)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5217,9 +5217,9 @@
          *
          * @param string $path
          * @param string $target
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function move($path, $target)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5230,9 +5230,9 @@
          *
          * @param string $path
          * @param string $target
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function copy($path, $target)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5243,9 +5243,9 @@
          *
          * @param string $target
          * @param string $link
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function link($target, $link)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5255,9 +5255,9 @@
          * Extract the file name from a file path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function name($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5267,9 +5267,9 @@
          * Extract the trailing name component from a file path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function basename($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5279,9 +5279,9 @@
          * Extract the parent directory from a file path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function dirname($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5291,9 +5291,9 @@
          * Extract the file extension from a file path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function extension($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5303,9 +5303,9 @@
          * Guess the file extension from the mime-type of a given file.
          *
          * @param string $path
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function guessExtension($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5315,9 +5315,9 @@
          * Get the file type of a given file.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function type($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5327,9 +5327,9 @@
          * Get the mime-type of a given file.
          *
          * @param string $path
-         * @return string|false 
-         * @static 
-         */ 
+         * @return string|false
+         * @static
+         */
         public static function mimeType($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5339,9 +5339,9 @@
          * Get the file size of a given file.
          *
          * @param string $path
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function size($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5351,9 +5351,9 @@
          * Get the file's last modification time.
          *
          * @param string $path
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function lastModified($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5363,9 +5363,9 @@
          * Determine if the given path is a directory.
          *
          * @param string $directory
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isDirectory($directory)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5375,9 +5375,9 @@
          * Determine if the given path is readable.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isReadable($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5387,9 +5387,9 @@
          * Determine if the given path is writable.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isWritable($path)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5399,9 +5399,9 @@
          * Determine if the given path is a file.
          *
          * @param string $file
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isFile($file)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5412,9 +5412,9 @@
          *
          * @param string $pattern
          * @param int $flags
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function glob($pattern, $flags = 0)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5425,9 +5425,9 @@
          *
          * @param string $directory
          * @param bool $hidden
-         * @return \Symfony\Component\Finder\SplFileInfo[] 
-         * @static 
-         */ 
+         * @return \Symfony\Component\Finder\SplFileInfo[]
+         * @static
+         */
         public static function files($directory, $hidden = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5438,9 +5438,9 @@
          *
          * @param string $directory
          * @param bool $hidden
-         * @return \Symfony\Component\Finder\SplFileInfo[] 
-         * @static 
-         */ 
+         * @return \Symfony\Component\Finder\SplFileInfo[]
+         * @static
+         */
         public static function allFiles($directory, $hidden = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5450,9 +5450,9 @@
          * Get all of the directories within a given directory.
          *
          * @param string $directory
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function directories($directory)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5464,9 +5464,9 @@
          * @param string $path
          * @param int $mode
          * @param bool $recursive
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function ensureDirectoryExists($path, $mode = 493, $recursive = true)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5479,9 +5479,9 @@
          * @param int $mode
          * @param bool $recursive
          * @param bool $force
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5493,9 +5493,9 @@
          * @param string $from
          * @param string $to
          * @param bool $overwrite
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function moveDirectory($from, $to, $overwrite = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5507,9 +5507,9 @@
          * @param string $directory
          * @param string $destination
          * @param int|null $options
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function copyDirectory($directory, $destination, $options = null)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5517,14 +5517,14 @@
         }
                     /**
          * Recursively delete a directory.
-         * 
+         *
          * The directory itself may be optionally preserved.
          *
          * @param string $directory
          * @param bool $preserve
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function deleteDirectory($directory, $preserve = false)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5534,9 +5534,9 @@
          * Remove all of the directories within a given directory.
          *
          * @param string $directory
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function deleteDirectories($directory)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5546,9 +5546,9 @@
          * Empty the specified directory of all files and folders.
          *
          * @param string $directory
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function cleanDirectory($directory)
         {
                         /** @var \Illuminate\Filesystem\Filesystem $instance */
@@ -5559,9 +5559,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Filesystem\Filesystem::macro($name, $macro);
@@ -5571,10 +5571,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Filesystem\Filesystem::mixin($mixin, $replace);
@@ -5583,28 +5583,28 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Filesystem\Filesystem::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Contracts\Auth\Access\Gate
-     */ 
+     */
         class Gate {
                     /**
          * Determine if a given ability has been defined.
          *
          * @param string|array $ability
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($ability)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5615,10 +5615,10 @@
          *
          * @param string $ability
          * @param callable|string $callback
-         * @return \Illuminate\Auth\Access\Gate 
+         * @return \Illuminate\Auth\Access\Gate
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function define($ability, $callback)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5630,9 +5630,9 @@
          * @param string $name
          * @param string $class
          * @param array|null $abilities
-         * @return \Illuminate\Auth\Access\Gate 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\Access\Gate
+         * @static
+         */
         public static function resource($name, $class, $abilities = null)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5643,9 +5643,9 @@
          *
          * @param string $class
          * @param string $policy
-         * @return \Illuminate\Auth\Access\Gate 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\Access\Gate
+         * @static
+         */
         public static function policy($class, $policy)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5655,9 +5655,9 @@
          * Register a callback to run before all Gate checks.
          *
          * @param callable $callback
-         * @return \Illuminate\Auth\Access\Gate 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\Access\Gate
+         * @static
+         */
         public static function before($callback)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5667,9 +5667,9 @@
          * Register a callback to run after all Gate checks.
          *
          * @param callable $callback
-         * @return \Illuminate\Auth\Access\Gate 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\Access\Gate
+         * @static
+         */
         public static function after($callback)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5680,9 +5680,9 @@
          *
          * @param string $ability
          * @param array|mixed $arguments
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function allows($ability, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5693,9 +5693,9 @@
          *
          * @param string $ability
          * @param array|mixed $arguments
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function denies($ability, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5706,9 +5706,9 @@
          *
          * @param \Illuminate\Auth\Access\iterable|string $abilities
          * @param array|mixed $arguments
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function check($abilities, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5719,9 +5719,9 @@
          *
          * @param \Illuminate\Auth\Access\iterable|string $abilities
          * @param array|mixed $arguments
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function any($abilities, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5732,9 +5732,9 @@
          *
          * @param \Illuminate\Auth\Access\iterable|string $abilities
          * @param array|mixed $arguments
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function none($abilities, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5745,10 +5745,10 @@
          *
          * @param string $ability
          * @param array|mixed $arguments
-         * @return \Illuminate\Auth\Access\Response 
+         * @return \Illuminate\Auth\Access\Response
          * @throws \Illuminate\Auth\Access\AuthorizationException
-         * @static 
-         */ 
+         * @static
+         */
         public static function authorize($ability, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5759,9 +5759,9 @@
          *
          * @param string $ability
          * @param array|mixed $arguments
-         * @return \Illuminate\Auth\Access\Response 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\Access\Response
+         * @static
+         */
         public static function inspect($ability, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5772,10 +5772,10 @@
          *
          * @param string $ability
          * @param array|mixed $arguments
-         * @return mixed 
+         * @return mixed
          * @throws \Illuminate\Auth\Access\AuthorizationException
-         * @static 
-         */ 
+         * @static
+         */
         public static function raw($ability, $arguments = [])
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5785,9 +5785,9 @@
          * Get a policy instance for a given class.
          *
          * @param object|string $class
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getPolicyFor($class)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5797,9 +5797,9 @@
          * Specify a callback to be used to guess policy names.
          *
          * @param callable $callback
-         * @return \Illuminate\Auth\Access\Gate 
-         * @static 
-         */ 
+         * @return \Illuminate\Auth\Access\Gate
+         * @static
+         */
         public static function guessPolicyNamesUsing($callback)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5809,10 +5809,10 @@
          * Build a policy class instance of the given type.
          *
          * @param object|string $class
-         * @return mixed 
+         * @return mixed
          * @throws \Illuminate\Contracts\Container\BindingResolutionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function resolvePolicy($class)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5822,9 +5822,9 @@
          * Get a gate instance for the given user.
          *
          * @param \Illuminate\Contracts\Auth\Authenticatable|mixed $user
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function forUser($user)
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5833,9 +5833,9 @@
                     /**
          * Get all of the defined abilities.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function abilities()
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
@@ -5844,28 +5844,28 @@
                     /**
          * Get all of the defined policies.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function policies()
         {
                         /** @var \Illuminate\Auth\Access\Gate $instance */
                         return $instance->policies();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Hashing\HashManager
-     */ 
+     */
         class Hash {
                     /**
          * Create an instance of the Bcrypt hash Driver.
          *
-         * @return \Illuminate\Hashing\BcryptHasher 
-         * @static 
-         */ 
+         * @return \Illuminate\Hashing\BcryptHasher
+         * @static
+         */
         public static function createBcryptDriver()
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5874,9 +5874,9 @@
                     /**
          * Create an instance of the Argon2i hash Driver.
          *
-         * @return \Illuminate\Hashing\ArgonHasher 
-         * @static 
-         */ 
+         * @return \Illuminate\Hashing\ArgonHasher
+         * @static
+         */
         public static function createArgonDriver()
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5885,9 +5885,9 @@
                     /**
          * Create an instance of the Argon2id hash Driver.
          *
-         * @return \Illuminate\Hashing\Argon2IdHasher 
-         * @static 
-         */ 
+         * @return \Illuminate\Hashing\Argon2IdHasher
+         * @static
+         */
         public static function createArgon2idDriver()
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5897,9 +5897,9 @@
          * Get information about the given hashed value.
          *
          * @param string $hashedValue
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function info($hashedValue)
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5910,9 +5910,9 @@
          *
          * @param string $value
          * @param array $options
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function make($value, $options = [])
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5924,9 +5924,9 @@
          * @param string $value
          * @param string $hashedValue
          * @param array $options
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function check($value, $hashedValue, $options = [])
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5937,9 +5937,9 @@
          *
          * @param string $hashedValue
          * @param array $options
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function needsRehash($hashedValue, $options = [])
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5948,9 +5948,9 @@
                     /**
          * Get the default driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Hashing\HashManager $instance */
@@ -5960,12 +5960,12 @@
          * Get a driver instance.
          *
          * @param string|null $driver
-         * @return mixed 
+         * @return mixed
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function driver($driver = null)
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Hashing\HashManager $instance */
                         return $instance->driver($driver);
         }
@@ -5974,29 +5974,29 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Hashing\HashManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Hashing\HashManager
+         * @static
+         */
         public static function extend($driver, $callback)
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Hashing\HashManager $instance */
                         return $instance->extend($driver, $callback);
         }
                     /**
          * Get all of the created "drivers".
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getDrivers()
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Hashing\HashManager $instance */
                         return $instance->getDrivers();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @method static \Illuminate\Http\Client\PendingRequest accept(string $contentType)
      * @method static \Illuminate\Http\Client\PendingRequest acceptJson()
@@ -6028,7 +6028,7 @@
      * @method static \Illuminate\Http\Client\Response put(string $url, array $data = [])
      * @method static \Illuminate\Http\Client\Response send(string $method, string $url, array $options = [])
      * @see \Illuminate\Http\Client\Factory
-     */ 
+     */
         class Http {
                     /**
          * Create a new response instance for use during stubbing.
@@ -6036,9 +6036,9 @@
          * @param array|string $body
          * @param int $status
          * @param array $headers
-         * @return \GuzzleHttp\Promise\PromiseInterface 
-         * @static 
-         */ 
+         * @return \GuzzleHttp\Promise\PromiseInterface
+         * @static
+         */
         public static function response($body = null, $status = 200, $headers = [])
         {
                         return \Illuminate\Http\Client\Factory::response($body, $status, $headers);
@@ -6047,9 +6047,9 @@
          * Get an invokable object that returns a sequence of responses in order for use during stubbing.
          *
          * @param array $responses
-         * @return \Illuminate\Http\Client\ResponseSequence 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Client\ResponseSequence
+         * @static
+         */
         public static function sequence($responses = [])
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6059,9 +6059,9 @@
          * Register a stub callable that will intercept requests and be able to return stub responses.
          *
          * @param callable|array $callback
-         * @return \Illuminate\Http\Client\Factory 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Client\Factory
+         * @static
+         */
         public static function fake($callback = null)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6071,9 +6071,9 @@
          * Register a response sequence for the given URL pattern.
          *
          * @param string $url
-         * @return \Illuminate\Http\Client\ResponseSequence 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Client\ResponseSequence
+         * @static
+         */
         public static function fakeSequence($url = '*')
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6084,9 +6084,9 @@
          *
          * @param string $url
          * @param \Illuminate\Http\Client\Response|\GuzzleHttp\Promise\PromiseInterface|callable $callback
-         * @return \Illuminate\Http\Client\Factory 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Client\Factory
+         * @static
+         */
         public static function stubUrl($url, $callback)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6097,9 +6097,9 @@
          *
          * @param \Illuminate\Http\Client\Request $request
          * @param \Illuminate\Http\Client\Response $response
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function recordRequestResponsePair($request, $response)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6109,9 +6109,9 @@
          * Assert that a request / response pair was recorded matching a given truth test.
          *
          * @param callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertSent($callback)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6121,9 +6121,9 @@
          * Assert that a request / response pair was not recorded matching a given truth test.
          *
          * @param callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotSent($callback)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6132,9 +6132,9 @@
                     /**
          * Assert that no request / response pair was recorded.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNothingSent()
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6144,9 +6144,9 @@
          * Assert how many requests have been recorded.
          *
          * @param int $count
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertSentCount($count)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6155,9 +6155,9 @@
                     /**
          * Assert that every created response sequence is empty.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertSequencesAreEmpty()
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6167,9 +6167,9 @@
          * Get a collection of the request / response pairs matching the given truth test.
          *
          * @param callable $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function recorded($callback)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
@@ -6180,9 +6180,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Http\Client\Factory::macro($name, $macro);
@@ -6192,10 +6192,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Http\Client\Factory::mixin($mixin, $replace);
@@ -6204,9 +6204,9 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Http\Client\Factory::hasMacro($name);
@@ -6216,31 +6216,31 @@
          *
          * @param string $method
          * @param array $parameters
-         * @return mixed 
+         * @return mixed
          * @throws \BadMethodCallException
-         * @static 
-         */ 
+         * @static
+         */
         public static function macroCall($method, $parameters)
         {
                         /** @var \Illuminate\Http\Client\Factory $instance */
                         return $instance->macroCall($method, $parameters);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Translation\Translator
-     */ 
+     */
         class Lang {
                     /**
          * Determine if a translation exists for a given locale.
          *
          * @param string $key
          * @param string|null $locale
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasForLocale($key, $locale = null)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6252,9 +6252,9 @@
          * @param string $key
          * @param string|null $locale
          * @param bool $fallback
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($key, $locale = null, $fallback = true)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6267,9 +6267,9 @@
          * @param array $replace
          * @param string|null $locale
          * @param bool $fallback
-         * @return string|array 
-         * @static 
-         */ 
+         * @return string|array
+         * @static
+         */
         public static function get($key, $replace = [], $locale = null, $fallback = true)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6282,9 +6282,9 @@
          * @param \Countable|int|array $number
          * @param array $replace
          * @param string|null $locale
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function choice($key, $number, $replace = [], $locale = null)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6296,9 +6296,9 @@
          * @param array $lines
          * @param string $locale
          * @param string $namespace
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addLines($lines, $locale, $namespace = '*')
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6310,9 +6310,9 @@
          * @param string $namespace
          * @param string $group
          * @param string $locale
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function load($namespace, $group, $locale)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6323,9 +6323,9 @@
          *
          * @param string $namespace
          * @param string $hint
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addNamespace($namespace, $hint)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6335,9 +6335,9 @@
          * Add a new JSON path to the loader.
          *
          * @param string $path
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addJsonPath($path)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6347,9 +6347,9 @@
          * Parse a key into namespace, group, and item.
          *
          * @param string $key
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function parseKey($key)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6358,9 +6358,9 @@
                     /**
          * Get the message selector instance.
          *
-         * @return \Illuminate\Translation\MessageSelector 
-         * @static 
-         */ 
+         * @return \Illuminate\Translation\MessageSelector
+         * @static
+         */
         public static function getSelector()
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6370,9 +6370,9 @@
          * Set the message selector instance.
          *
          * @param \Illuminate\Translation\MessageSelector $selector
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setSelector($selector)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6381,9 +6381,9 @@
                     /**
          * Get the language line loader implementation.
          *
-         * @return \Illuminate\Contracts\Translation\Loader 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Translation\Loader
+         * @static
+         */
         public static function getLoader()
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6392,9 +6392,9 @@
                     /**
          * Get the default locale being used.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function locale()
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6403,9 +6403,9 @@
                     /**
          * Get the default locale being used.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getLocale()
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6415,9 +6415,9 @@
          * Set the default locale.
          *
          * @param string $locale
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setLocale($locale)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6426,9 +6426,9 @@
                     /**
          * Get the fallback locale being used.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getFallback()
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6438,9 +6438,9 @@
          * Set the fallback locale being used.
          *
          * @param string $fallback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setFallback($fallback)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6450,9 +6450,9 @@
          * Set the loaded translation groups.
          *
          * @param array $loaded
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setLoaded($loaded)
         {
                         /** @var \Illuminate\Translation\Translator $instance */
@@ -6463,11 +6463,11 @@
          *
          * @param string $key
          * @param array $parsed
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setParsedKey($key, $parsed)
-        {            //Method inherited from \Illuminate\Support\NamespacedItemResolver         
+        {            //Method inherited from \Illuminate\Support\NamespacedItemResolver
                         /** @var \Illuminate\Translation\Translator $instance */
                         $instance->setParsedKey($key, $parsed);
         }
@@ -6476,9 +6476,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Translation\Translator::macro($name, $macro);
@@ -6488,10 +6488,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Translation\Translator::mixin($mixin, $replace);
@@ -6500,29 +6500,29 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Translation\Translator::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Log\Logger
-     */ 
+     */
         class Log {
                     /**
          * Create a new, on-demand aggregate logger instance.
          *
          * @param array $channels
          * @param string|null $channel
-         * @return \Psr\Log\LoggerInterface 
-         * @static 
-         */ 
+         * @return \Psr\Log\LoggerInterface
+         * @static
+         */
         public static function stack($channels, $channel = null)
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6532,9 +6532,9 @@
          * Get a log channel instance.
          *
          * @param string|null $channel
-         * @return \Psr\Log\LoggerInterface 
-         * @static 
-         */ 
+         * @return \Psr\Log\LoggerInterface
+         * @static
+         */
         public static function channel($channel = null)
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6544,20 +6544,20 @@
          * Get a log driver instance.
          *
          * @param string|null $driver
-         * @return \Psr\Log\LoggerInterface 
-         * @static 
-         */ 
+         * @return \Psr\Log\LoggerInterface
+         * @static
+         */
         public static function driver($driver = null)
         {
                         /** @var \Illuminate\Log\LogManager $instance */
                         return $instance->driver($driver);
         }
                     /**
-         * 
+         *
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getChannels()
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6566,9 +6566,9 @@
                     /**
          * Get the default log driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6578,9 +6578,9 @@
          * Set the default log driver name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6591,9 +6591,9 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Log\LogManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Log\LogManager
+         * @static
+         */
         public static function extend($driver, $callback)
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6603,9 +6603,9 @@
          * Unset the given channel instance.
          *
          * @param string|null $driver
-         * @return \Illuminate\Log\LogManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Log\LogManager
+         * @static
+         */
         public static function forgetChannel($driver = null)
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6616,9 +6616,9 @@
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function emergency($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6626,15 +6626,15 @@
         }
                     /**
          * Action must be taken immediately.
-         * 
+         *
          * Example: Entire website down, database unavailable, etc. This should
          * trigger the SMS alerts and wake you up.
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function alert($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6642,14 +6642,14 @@
         }
                     /**
          * Critical conditions.
-         * 
+         *
          * Example: Application component unavailable, unexpected exception.
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function critical($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6661,9 +6661,9 @@
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function error($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6671,15 +6671,15 @@
         }
                     /**
          * Exceptional occurrences that are not errors.
-         * 
+         *
          * Example: Use of deprecated APIs, poor use of an API, undesirable things
          * that are not necessarily wrong.
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function warning($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6690,9 +6690,9 @@
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function notice($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6700,14 +6700,14 @@
         }
                     /**
          * Interesting events.
-         * 
+         *
          * Example: User logs in, SQL logs.
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function info($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6718,9 +6718,9 @@
          *
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function debug($message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
@@ -6732,30 +6732,30 @@
          * @param mixed $level
          * @param string $message
          * @param array $context
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function log($level, $message, $context = [])
         {
                         /** @var \Illuminate\Log\LogManager $instance */
                         $instance->log($level, $message, $context);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Mail\Mailer
      * @see \Illuminate\Support\Testing\Fakes\MailFake
-     */ 
+     */
         class Mail {
                     /**
          * Get a mailer instance by name.
          *
          * @param string|null $name
-         * @return \Illuminate\Mail\Mailer 
-         * @static 
-         */ 
+         * @return \Illuminate\Mail\Mailer
+         * @static
+         */
         public static function mailer($name = null)
         {
                         /** @var \Illuminate\Mail\MailManager $instance */
@@ -6765,9 +6765,9 @@
          * Get a mailer driver instance.
          *
          * @param string|null $driver
-         * @return \Illuminate\Mail\Mailer 
-         * @static 
-         */ 
+         * @return \Illuminate\Mail\Mailer
+         * @static
+         */
         public static function driver($driver = null)
         {
                         /** @var \Illuminate\Mail\MailManager $instance */
@@ -6777,9 +6777,9 @@
          * Create a new transport instance.
          *
          * @param array $config
-         * @return \Swift_Transport 
-         * @static 
-         */ 
+         * @return \Swift_Transport
+         * @static
+         */
         public static function createTransport($config)
         {
                         /** @var \Illuminate\Mail\MailManager $instance */
@@ -6788,9 +6788,9 @@
                     /**
          * Get the default mail driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Mail\MailManager $instance */
@@ -6800,9 +6800,9 @@
          * Set the default mail driver name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Mail\MailManager $instance */
@@ -6813,9 +6813,9 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Mail\MailManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Mail\MailManager
+         * @static
+         */
         public static function extend($driver, $callback)
         {
                         /** @var \Illuminate\Mail\MailManager $instance */
@@ -6826,9 +6826,9 @@
          *
          * @param string|\Closure $mailable
          * @param callable|int|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertSent($mailable, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6839,9 +6839,9 @@
          *
          * @param string $mailable
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotSent($mailable, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6850,9 +6850,9 @@
                     /**
          * Assert that no mailables were sent.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNothingSent()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6863,9 +6863,9 @@
          *
          * @param string|\Closure $mailable
          * @param callable|int|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertQueued($mailable, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6876,9 +6876,9 @@
          *
          * @param string $mailable
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotQueued($mailable, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6887,9 +6887,9 @@
                     /**
          * Assert that no mailables were queued.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNothingQueued()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6900,9 +6900,9 @@
          *
          * @param string $mailable
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function sent($mailable, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6912,9 +6912,9 @@
          * Determine if the given mailable has been sent.
          *
          * @param string $mailable
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasSent($mailable)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6925,9 +6925,9 @@
          *
          * @param string $mailable
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function queued($mailable, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6937,9 +6937,9 @@
          * Determine if the given mailable has been queued.
          *
          * @param string $mailable
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasQueued($mailable)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6949,9 +6949,9 @@
          * Begin the process of mailing a mailable class instance.
          *
          * @param mixed $users
-         * @return \Illuminate\Mail\PendingMail 
-         * @static 
-         */ 
+         * @return \Illuminate\Mail\PendingMail
+         * @static
+         */
         public static function to($users)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6961,9 +6961,9 @@
          * Begin the process of mailing a mailable class instance.
          *
          * @param mixed $users
-         * @return \Illuminate\Mail\PendingMail 
-         * @static 
-         */ 
+         * @return \Illuminate\Mail\PendingMail
+         * @static
+         */
         public static function bcc($users)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6974,9 +6974,9 @@
          *
          * @param string $text
          * @param \Closure|string $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function raw($text, $callback)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -6988,9 +6988,9 @@
          * @param string|array $view
          * @param array $data
          * @param \Closure|string|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function send($view, $data = [], $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -7001,9 +7001,9 @@
          *
          * @param \Illuminate\Contracts\Mail\Mailable|string|array $view
          * @param string|null $queue
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function queue($view, $queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -7015,9 +7015,9 @@
          * @param \DateTimeInterface|\DateInterval|int $delay
          * @param \Illuminate\Contracts\Mail\Mailable|string|array $view
          * @param string|null $queue
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function later($delay, $view, $queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
@@ -7026,30 +7026,30 @@
                     /**
          * Get the array of failed recipients.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function failures()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\MailFake $instance */
                         return $instance->failures();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Notifications\ChannelManager
-     */ 
+     */
         class Notification {
                     /**
          * Send the given notification to the given notifiable entities.
          *
          * @param \Illuminate\Support\Collection|array|mixed $notifiables
          * @param mixed $notification
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function send($notifiables, $notification)
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7061,9 +7061,9 @@
          * @param \Illuminate\Support\Collection|array|mixed $notifiables
          * @param mixed $notification
          * @param array|null $channels
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function sendNow($notifiables, $notification, $channels = null)
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7073,9 +7073,9 @@
          * Get a channel instance.
          *
          * @param string|null $name
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function channel($name = null)
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7084,9 +7084,9 @@
                     /**
          * Get the default channel driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7095,9 +7095,9 @@
                     /**
          * Get the default channel driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function deliversVia()
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7107,9 +7107,9 @@
          * Set the default channel driver name.
          *
          * @param string $channel
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function deliverVia($channel)
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7119,9 +7119,9 @@
          * Set the locale of notifications.
          *
          * @param string $locale
-         * @return \Illuminate\Notifications\ChannelManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Notifications\ChannelManager
+         * @static
+         */
         public static function locale($locale)
         {
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
@@ -7131,12 +7131,12 @@
          * Get a driver instance.
          *
          * @param string|null $driver
-         * @return mixed 
+         * @return mixed
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function driver($driver = null)
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
                         return $instance->driver($driver);
         }
@@ -7145,22 +7145,22 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Notifications\ChannelManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Notifications\ChannelManager
+         * @static
+         */
         public static function extend($driver, $callback)
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
                         return $instance->extend($driver, $callback);
         }
                     /**
          * Get all of the created "drivers".
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getDrivers()
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Notifications\ChannelManager $instance */
                         return $instance->getDrivers();
         }
@@ -7170,10 +7170,10 @@
          * @param mixed $notifiable
          * @param string|\Closure $notification
          * @param callable|null $callback
-         * @return void 
+         * @return void
          * @throws \Exception
-         * @static 
-         */ 
+         * @static
+         */
         public static function assertSentTo($notifiable, $notification, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7185,9 +7185,9 @@
          * @param mixed $notifiable
          * @param string $notification
          * @param int $times
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertSentToTimes($notifiable, $notification, $times = 1)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7199,10 +7199,10 @@
          * @param mixed $notifiable
          * @param string|\Closure $notification
          * @param callable|null $callback
-         * @return void 
+         * @return void
          * @throws \Exception
-         * @static 
-         */ 
+         * @static
+         */
         public static function assertNotSentTo($notifiable, $notification, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7211,9 +7211,9 @@
                     /**
          * Assert that no notifications were sent.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNothingSent()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7224,9 +7224,9 @@
          *
          * @param int $expectedCount
          * @param string $notification
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertTimesSent($expectedCount, $notification)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7238,9 +7238,9 @@
          * @param mixed $notifiable
          * @param string $notification
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function sent($notifiable, $notification, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7251,9 +7251,9 @@
          *
          * @param mixed $notifiable
          * @param string $notification
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasSent($notifiable, $notification)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\NotificationFake $instance */
@@ -7264,9 +7264,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Support\Testing\Fakes\NotificationFake::macro($name, $macro);
@@ -7276,10 +7276,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Support\Testing\Fakes\NotificationFake::mixin($mixin, $replace);
@@ -7288,17 +7288,17 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Support\Testing\Fakes\NotificationFake::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @method static mixed reset(array $credentials, \Closure $callback)
      * @method static string sendResetLink(array $credentials)
@@ -7308,15 +7308,15 @@
      * @method static bool tokenExists(\Illuminate\Contracts\Auth\CanResetPassword $user, string $token)
      * @method static \Illuminate\Auth\Passwords\TokenRepositoryInterface getRepository()
      * @see \Illuminate\Auth\Passwords\PasswordBroker
-     */ 
+     */
         class Password {
                     /**
          * Attempt to get the broker from the local cache.
          *
          * @param string|null $name
-         * @return \Illuminate\Contracts\Auth\PasswordBroker 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Auth\PasswordBroker
+         * @static
+         */
         public static function broker($name = null)
         {
                         /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
@@ -7325,9 +7325,9 @@
                     /**
          * Get the default password broker name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
@@ -7337,30 +7337,30 @@
          * Set the default password broker name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Auth\Passwords\PasswordBrokerManager $instance */
                         $instance->setDefaultDriver($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Queue\QueueManager
      * @see \Illuminate\Queue\Queue
-     */ 
+     */
         class Queue {
                     /**
          * Register an event listener for the before job event.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function before($callback)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7370,9 +7370,9 @@
          * Register an event listener for the after job event.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function after($callback)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7382,9 +7382,9 @@
          * Register an event listener for the exception occurred job event.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function exceptionOccurred($callback)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7394,9 +7394,9 @@
          * Register an event listener for the daemon queue loop.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function looping($callback)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7406,9 +7406,9 @@
          * Register an event listener for the failed job event.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function failing($callback)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7418,9 +7418,9 @@
          * Register an event listener for the daemon queue stopping.
          *
          * @param mixed $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function stopping($callback)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7430,9 +7430,9 @@
          * Determine if the driver is connected.
          *
          * @param string|null $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function connected($name = null)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7442,9 +7442,9 @@
          * Resolve a queue connection instance.
          *
          * @param string|null $name
-         * @return \Illuminate\Contracts\Queue\Queue 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Queue\Queue
+         * @static
+         */
         public static function connection($name = null)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7455,9 +7455,9 @@
          *
          * @param string $driver
          * @param \Closure $resolver
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function extend($driver, $resolver)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7468,9 +7468,9 @@
          *
          * @param string $driver
          * @param \Closure $resolver
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addConnector($driver, $resolver)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7479,9 +7479,9 @@
                     /**
          * Get the name of the default queue connection.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7491,9 +7491,9 @@
          * Set the name of the default queue connection.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7503,9 +7503,9 @@
          * Get the full name for the given connection.
          *
          * @param string|null $connection
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getName($connection = null)
         {
                         /** @var \Illuminate\Queue\QueueManager $instance */
@@ -7516,9 +7516,9 @@
          *
          * @param string|\Closure $job
          * @param callable|int|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertPushed($job, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7530,9 +7530,9 @@
          * @param string $queue
          * @param string|\Closure $job
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertPushedOn($queue, $job, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7544,9 +7544,9 @@
          * @param string $job
          * @param array $expectedChain
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertPushedWithChain($job, $expectedChain = [], $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7557,9 +7557,9 @@
          *
          * @param string $job
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertPushedWithoutChain($job, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7570,9 +7570,9 @@
          *
          * @param string|\Closure $job
          * @param callable|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNotPushed($job, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7581,9 +7581,9 @@
                     /**
          * Assert that no jobs were pushed.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function assertNothingPushed()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7594,9 +7594,9 @@
          *
          * @param string $job
          * @param callable|null $callback
-         * @return \Illuminate\Support\Collection 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Collection
+         * @static
+         */
         public static function pushed($job, $callback = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7606,9 +7606,9 @@
          * Determine if there are any stored jobs for a given class.
          *
          * @param string $job
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasPushed($job)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7618,9 +7618,9 @@
          * Get the size of the queue.
          *
          * @param string|null $queue
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function size($queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7632,9 +7632,9 @@
          * @param string $job
          * @param mixed $data
          * @param string|null $queue
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function push($job, $data = '', $queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7646,9 +7646,9 @@
          * @param string $payload
          * @param string|null $queue
          * @param array $options
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function pushRaw($payload, $queue = null, $options = [])
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7661,9 +7661,9 @@
          * @param string $job
          * @param mixed $data
          * @param string|null $queue
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function later($delay, $job, $data = '', $queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7675,9 +7675,9 @@
          * @param string $queue
          * @param string $job
          * @param mixed $data
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function pushOn($queue, $job, $data = '')
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7690,9 +7690,9 @@
          * @param \DateTimeInterface|\DateInterval|int $delay
          * @param string $job
          * @param mixed $data
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function laterOn($queue, $delay, $job, $data = '')
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7702,9 +7702,9 @@
          * Pop the next job off of the queue.
          *
          * @param string|null $queue
-         * @return \Illuminate\Contracts\Queue\Job|null 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Queue\Job|null
+         * @static
+         */
         public static function pop($queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7716,9 +7716,9 @@
          * @param array $jobs
          * @param mixed $data
          * @param string|null $queue
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function bulk($jobs, $data = '', $queue = null)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7727,9 +7727,9 @@
                     /**
          * Get the jobs that have been pushed.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function pushedJobs()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7738,9 +7738,9 @@
                     /**
          * Get the connection name for the queue.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getConnectionName()
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7750,9 +7750,9 @@
          * Set the connection name for the queue.
          *
          * @param string $name
-         * @return \Illuminate\Support\Testing\Fakes\QueueFake 
-         * @static 
-         */ 
+         * @return \Illuminate\Support\Testing\Fakes\QueueFake
+         * @static
+         */
         public static function setConnectionName($name)
         {
                         /** @var \Illuminate\Support\Testing\Fakes\QueueFake $instance */
@@ -7762,11 +7762,11 @@
          * Get the retry delay for an object-based queue handler.
          *
          * @param mixed $job
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getJobRetryDelay($job)
-        {            //Method inherited from \Illuminate\Queue\Queue         
+        {            //Method inherited from \Illuminate\Queue\Queue
                         /** @var \Illuminate\Queue\SyncQueue $instance */
                         return $instance->getJobRetryDelay($job);
         }
@@ -7774,11 +7774,11 @@
          * Get the expiration timestamp for an object-based queue handler.
          *
          * @param mixed $job
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getJobExpiration($job)
-        {            //Method inherited from \Illuminate\Queue\Queue         
+        {            //Method inherited from \Illuminate\Queue\Queue
                         /** @var \Illuminate\Queue\SyncQueue $instance */
                         return $instance->getJobExpiration($job);
         }
@@ -7786,40 +7786,40 @@
          * Register a callback to be executed when creating job payloads.
          *
          * @param callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function createPayloadUsing($callback)
-        {            //Method inherited from \Illuminate\Queue\Queue         
+        {            //Method inherited from \Illuminate\Queue\Queue
                         \Illuminate\Queue\SyncQueue::createPayloadUsing($callback);
         }
                     /**
          * Set the IoC container instance.
          *
          * @param \Illuminate\Container\Container $container
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setContainer($container)
-        {            //Method inherited from \Illuminate\Queue\Queue         
+        {            //Method inherited from \Illuminate\Queue\Queue
                         /** @var \Illuminate\Queue\SyncQueue $instance */
                         $instance->setContainer($container);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Routing\Redirector
-     */ 
+     */
         class Redirect {
                     /**
          * Create a new redirect response to the "home" route.
          *
          * @param int $status
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function home($status = 302)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7831,9 +7831,9 @@
          * @param int $status
          * @param array $headers
          * @param mixed $fallback
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function back($status = 302, $headers = [], $fallback = false)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7844,9 +7844,9 @@
          *
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function refresh($status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7859,9 +7859,9 @@
          * @param int $status
          * @param array $headers
          * @param bool|null $secure
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function guest($path, $status = 302, $headers = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7874,9 +7874,9 @@
          * @param int $status
          * @param array $headers
          * @param bool|null $secure
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function intended($default = '/', $status = 302, $headers = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7886,9 +7886,9 @@
          * Set the intended url.
          *
          * @param string $url
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setIntendedUrl($url)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7901,9 +7901,9 @@
          * @param int $status
          * @param array $headers
          * @param bool|null $secure
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function to($path, $status = 302, $headers = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7915,9 +7915,9 @@
          * @param string $path
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function away($path, $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7929,9 +7929,9 @@
          * @param string $path
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function secure($path, $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7944,9 +7944,9 @@
          * @param mixed $parameters
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function route($route, $parameters = [], $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7960,9 +7960,9 @@
          * @param \DateTimeInterface|\DateInterval|int|null $expiration
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function signedRoute($route, $parameters = [], $expiration = null, $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7976,9 +7976,9 @@
          * @param mixed $parameters
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function temporarySignedRoute($route, $expiration, $parameters = [], $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -7991,9 +7991,9 @@
          * @param mixed $parameters
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function action($action, $parameters = [], $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -8002,9 +8002,9 @@
                     /**
          * Get the URL generator instance.
          *
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function getUrlGenerator()
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -8014,9 +8014,9 @@
          * Set the active session store.
          *
          * @param \Illuminate\Session\Store $session
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setSession($session)
         {
                         /** @var \Illuminate\Routing\Redirector $instance */
@@ -8027,9 +8027,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Routing\Redirector::macro($name, $macro);
@@ -8039,10 +8039,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Routing\Redirector::mixin($mixin, $replace);
@@ -8051,28 +8051,28 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Routing\Redirector::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @method static mixed filterFiles(mixed $files)
      * @see \Illuminate\Http\Request
-     */ 
+     */
         class Request {
                     /**
          * Create a new Illuminate HTTP request from server variables.
          *
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function capture()
         {
                         return \Illuminate\Http\Request::capture();
@@ -8080,9 +8080,9 @@
                     /**
          * Return the Request instance.
          *
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function instance()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8091,9 +8091,9 @@
                     /**
          * Get the request method.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function method()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8102,9 +8102,9 @@
                     /**
          * Get the root URL for the application.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function root()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8113,9 +8113,9 @@
                     /**
          * Get the URL (no query string) for the request.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function url()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8124,9 +8124,9 @@
                     /**
          * Get the full URL for the request.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function fullUrl()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8136,9 +8136,9 @@
          * Get the full URL for the request with the added query string parameters.
          *
          * @param array $query
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function fullUrlWithQuery($query)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8147,9 +8147,9 @@
                     /**
          * Get the current path info for the request.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function path()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8158,9 +8158,9 @@
                     /**
          * Get the current decoded path info for the request.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function decodedPath()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8171,9 +8171,9 @@
          *
          * @param int $index
          * @param string|null $default
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function segment($index, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8182,9 +8182,9 @@
                     /**
          * Get all of the segments for the request path.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function segments()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8194,9 +8194,9 @@
          * Determine if the current request URI matches a pattern.
          *
          * @param mixed $patterns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function is(...$patterns)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8206,9 +8206,9 @@
          * Determine if the route name matches a given pattern.
          *
          * @param mixed $patterns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function routeIs(...$patterns)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8218,9 +8218,9 @@
          * Determine if the current request URL and query string matches a pattern.
          *
          * @param mixed $patterns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function fullUrlIs(...$patterns)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8229,9 +8229,9 @@
                     /**
          * Determine if the request is the result of an AJAX call.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function ajax()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8240,9 +8240,9 @@
                     /**
          * Determine if the request is the result of an PJAX call.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function pjax()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8251,9 +8251,9 @@
                     /**
          * Determine if the request is the result of an prefetch call.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function prefetch()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8262,9 +8262,9 @@
                     /**
          * Determine if the request is over HTTPS.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function secure()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8273,9 +8273,9 @@
                     /**
          * Get the client IP address.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function ip()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8284,9 +8284,9 @@
                     /**
          * Get the client IP addresses.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function ips()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8295,9 +8295,9 @@
                     /**
          * Get the client user agent.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function userAgent()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8307,9 +8307,9 @@
          * Merge new input into the current request's input array.
          *
          * @param array $input
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function merge($input)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8319,9 +8319,9 @@
          * Replace the input for the current request.
          *
          * @param array $input
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function replace($input)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8329,14 +8329,14 @@
         }
                     /**
          * This method belongs to Symfony HttpFoundation and is not usually needed when using Laravel.
-         * 
+         *
          * Instead, you may use the "input" method.
          *
          * @param string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function get($key, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8347,9 +8347,9 @@
          *
          * @param string|null $key
          * @param mixed $default
-         * @return \Symfony\Component\HttpFoundation\ParameterBag|mixed 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\ParameterBag|mixed
+         * @static
+         */
         public static function json($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8360,9 +8360,9 @@
          *
          * @param \Illuminate\Http\Request $from
          * @param \Illuminate\Http\Request|null $to
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function createFrom($from, $to = null)
         {
                         return \Illuminate\Http\Request::createFrom($from, $to);
@@ -8371,9 +8371,9 @@
          * Create an Illuminate request from a Symfony instance.
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function createFromBase($request)
         {
                         return \Illuminate\Http\Request::createFromBase($request);
@@ -8387,9 +8387,9 @@
          * @param array $cookies The COOKIE parameters
          * @param array $files The FILES parameters
          * @param array $server The SERVER parameters
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8398,10 +8398,10 @@
                     /**
          * Get the session associated with the request.
          *
-         * @return \Illuminate\Session\Store 
+         * @return \Illuminate\Session\Store
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function session()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8410,9 +8410,9 @@
                     /**
          * Get the session associated with the request.
          *
-         * @return \Illuminate\Session\Store|null 
-         * @static 
-         */ 
+         * @return \Illuminate\Session\Store|null
+         * @static
+         */
         public static function getSession()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8422,9 +8422,9 @@
          * Set the session instance on the request.
          *
          * @param \Illuminate\Contracts\Session\Session $session
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setLaravelSession($session)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8434,9 +8434,9 @@
          * Get the user making the request.
          *
          * @param string|null $guard
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function user($guard = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8447,9 +8447,9 @@
          *
          * @param string|null $param
          * @param mixed $default
-         * @return \Illuminate\Routing\Route|object|string|null 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route|object|string|null
+         * @static
+         */
         public static function route($param = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8458,10 +8458,10 @@
                     /**
          * Get a unique fingerprint for the request / route / IP address.
          *
-         * @return string 
+         * @return string
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function fingerprint()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8471,9 +8471,9 @@
          * Set the JSON payload for the request.
          *
          * @param \Symfony\Component\HttpFoundation\ParameterBag $json
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function setJson($json)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8482,9 +8482,9 @@
                     /**
          * Get the user resolver callback.
          *
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function getUserResolver()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8494,9 +8494,9 @@
          * Set the user resolver callback.
          *
          * @param \Closure $callback
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function setUserResolver($callback)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8505,9 +8505,9 @@
                     /**
          * Get the route resolver callback.
          *
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function getRouteResolver()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8517,9 +8517,9 @@
          * Set the route resolver callback.
          *
          * @param \Closure $callback
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function setRouteResolver($callback)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8528,9 +8528,9 @@
                     /**
          * Get all of the input and files for the request.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function toArray()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8540,9 +8540,9 @@
          * Determine if the given offset exists.
          *
          * @param string $offset
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function offsetExists($offset)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8552,9 +8552,9 @@
          * Get the value at the given offset.
          *
          * @param string $offset
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function offsetGet($offset)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8565,9 +8565,9 @@
          *
          * @param string $offset
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetSet($offset, $value)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8577,9 +8577,9 @@
          * Remove the value at the given offset.
          *
          * @param string $offset
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function offsetUnset($offset)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -8587,7 +8587,7 @@
         }
                     /**
          * Sets the parameters for this request.
-         * 
+         *
          * This method also re-initializes all properties.
          *
          * @param array $query The GET parameters
@@ -8597,26 +8597,26 @@
          * @param array $files The FILES parameters
          * @param array $server The SERVER parameters
          * @param string|resource|null $content The raw body data
-         * @static 
-         */ 
+         * @static
+         */
         public static function initialize($query = [], $request = [], $attributes = [], $cookies = [], $files = [], $server = [], $content = null)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);
         }
                     /**
          * Creates a new request with values from PHP's super globals.
          *
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function createFromGlobals()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::createFromGlobals();
         }
                     /**
          * Creates a Request based on a given URI and configuration.
-         * 
+         *
          * The information contained in the URI always take precedence
          * over the other information (server and parameters).
          *
@@ -8627,209 +8627,209 @@
          * @param array $files The request files ($_FILES)
          * @param array $server The server parameters ($_SERVER)
          * @param string|resource|null $content The raw body data
-         * @return static 
-         * @static 
-         */ 
+         * @return static
+         * @static
+         */
         public static function create($uri, $method = 'GET', $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);
         }
                     /**
          * Sets a callable able to create a Request instance.
-         * 
+         *
          * This is mainly useful when you need to override the Request class
          * to keep BC with an existing system. It should not be used for any
          * other purpose.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function setFactory($callable)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::setFactory($callable);
         }
                     /**
          * Overrides the PHP global variables according to this request instance.
-         * 
+         *
          * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.
          * $_FILES is never overridden, see rfc1867
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function overrideGlobals()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->overrideGlobals();
         }
                     /**
          * Sets a list of trusted proxies.
-         * 
+         *
          * You should only list the reverse proxies that you manage directly.
          *
          * @param array $proxies A list of trusted proxies, the string 'REMOTE_ADDR' will be replaced with $_SERVER['REMOTE_ADDR']
          * @param int $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies
-         * @static 
-         */ 
+         * @static
+         */
         public static function setTrustedProxies($proxies, $trustedHeaderSet)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::setTrustedProxies($proxies, $trustedHeaderSet);
         }
                     /**
          * Gets the list of trusted proxies.
          *
          * @return array An array of trusted proxies
-         * @static 
-         */ 
+         * @static
+         */
         public static function getTrustedProxies()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::getTrustedProxies();
         }
                     /**
          * Gets the set of trusted headers from trusted proxies.
          *
          * @return int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies
-         * @static 
-         */ 
+         * @static
+         */
         public static function getTrustedHeaderSet()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::getTrustedHeaderSet();
         }
                     /**
          * Sets a list of trusted host patterns.
-         * 
+         *
          * You should only list the hosts you manage using regexs.
          *
          * @param array $hostPatterns A list of trusted host patterns
-         * @static 
-         */ 
+         * @static
+         */
         public static function setTrustedHosts($hostPatterns)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::setTrustedHosts($hostPatterns);
         }
                     /**
          * Gets the list of trusted host patterns.
          *
          * @return array An array of trusted host patterns
-         * @static 
-         */ 
+         * @static
+         */
         public static function getTrustedHosts()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::getTrustedHosts();
         }
                     /**
          * Normalizes a query string.
-         * 
+         *
          * It builds a normalized query string, where keys/value pairs are alphabetized,
          * have consistent escaping and unneeded delimiters are removed.
          *
          * @return string A normalized query string for the Request
-         * @static 
-         */ 
+         * @static
+         */
         public static function normalizeQueryString($qs)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::normalizeQueryString($qs);
         }
                     /**
          * Enables support for the _method request parameter to determine the intended HTTP method.
-         * 
+         *
          * Be warned that enabling this feature might lead to CSRF issues in your code.
          * Check that you are using CSRF tokens when required.
          * If the HTTP method parameter override is enabled, an html-form with method "POST" can be altered
          * and used to send a "PUT" or "DELETE" request via the _method request parameter.
          * If these methods are not protected against CSRF, this presents a possible vulnerability.
-         * 
+         *
          * The HTTP method can only be overridden when the real HTTP method is POST.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function enableHttpMethodParameterOverride()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::enableHttpMethodParameterOverride();
         }
                     /**
          * Checks whether support for the _method request parameter is enabled.
          *
          * @return bool True when the _method request parameter is enabled, false otherwise
-         * @static 
-         */ 
+         * @static
+         */
         public static function getHttpMethodParameterOverride()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::getHttpMethodParameterOverride();
         }
                     /**
          * Whether the request contains a Session which was started in one of the
          * previous requests.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasPreviousSession()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->hasPreviousSession();
         }
                     /**
          * Whether the request contains a Session object.
-         * 
+         *
          * This method does not give any information about the state of the session object,
          * like whether the session is started or not. It is just a way to check if this Request
          * is associated with a Session instance.
          *
          * @return bool true when the Request contains a Session object, false otherwise
-         * @static 
-         */ 
+         * @static
+         */
         public static function hasSession()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->hasSession();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function setSession($session)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setSession($session);
         }
                     /**
-         * 
+         *
          *
-         * @internal 
-         * @static 
-         */ 
+         * @internal
+         * @static
+         */
         public static function setSessionFactory($factory)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setSessionFactory($factory);
         }
                     /**
          * Returns the client IP addresses.
-         * 
+         *
          * In the returned array the most trusted IP address is first, and the
          * least trusted one last. The "real" client IP address is the last one,
          * but this is also the least trusted one. Trusted proxies are stripped.
-         * 
+         *
          * Use this method carefully; you should use getClientIp() instead.
          *
          * @return array The client IP addresses
          * @see getClientIp()
-         * @static 
-         */ 
+         * @static
+         */
         public static function getClientIps()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getClientIps();
         }
                     /**
          * Returns the client IP address.
-         * 
+         *
          * This method can read the client IP address from the "X-Forwarded-For" header
          * when trusted proxies were set via "setTrustedProxies()". The "X-Forwarded-For"
          * header value is a comma+space separated list of IP addresses, the left-most
          * being the original client, and each successive proxy that passed the request
          * adding the IP address where it received the request from.
-         * 
+         *
          * If your reverse proxy uses a different header name than "X-Forwarded-For",
          * ("Client-Ip" for instance), configure it via the $trustedHeaderSet
          * argument of the Request::setTrustedProxies() method instead.
@@ -8837,124 +8837,124 @@
          * @return string|null The client IP address
          * @see getClientIps()
          * @see https://wikipedia.org/wiki/X-Forwarded-For
-         * @static 
-         */ 
+         * @static
+         */
         public static function getClientIp()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getClientIp();
         }
                     /**
          * Returns current script name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getScriptName()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getScriptName();
         }
                     /**
          * Returns the path being requested relative to the executed script.
-         * 
+         *
          * The path info always starts with a /.
-         * 
+         *
          * Suppose this request is instantiated from /mysite on localhost:
-         * 
+         *
          *  * http://localhost/mysite              returns an empty string
          *  * http://localhost/mysite/about        returns '/about'
          *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'
          *  * http://localhost/mysite/about?var=1  returns '/about'
          *
          * @return string The raw path (i.e. not urldecoded)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getPathInfo()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getPathInfo();
         }
                     /**
          * Returns the root path from which this request is executed.
-         * 
-         * Suppose that an index.php file instantiates this request object:
-         * 
+         *
+         * Suppose that an index.blade.php file instantiates this request object:
+         *
          *  * http://localhost/index.php         returns an empty string
          *  * http://localhost/index.php/page    returns an empty string
          *  * http://localhost/web/index.php     returns '/web'
          *  * http://localhost/we%20b/index.php  returns '/we%20b'
          *
          * @return string The raw path (i.e. not urldecoded)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getBasePath()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getBasePath();
         }
                     /**
          * Returns the root URL from which this request is executed.
-         * 
+         *
          * The base URL never ends with a /.
-         * 
+         *
          * This is similar to getBasePath(), except that it also includes the
-         * script filename (e.g. index.php) if one exists.
+         * script filename (e.g. index.blade.php) if one exists.
          *
          * @return string The raw URL (i.e. not urldecoded)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getBaseUrl()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getBaseUrl();
         }
                     /**
          * Gets the request's scheme.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getScheme()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getScheme();
         }
                     /**
          * Returns the port on which the request is made.
-         * 
+         *
          * This method can read the client port from the "X-Forwarded-Port" header
          * when trusted proxies were set via "setTrustedProxies()".
-         * 
+         *
          * The "X-Forwarded-Port" header must contain the client port.
          *
          * @return int|string can be a string if fetched from the server bag
-         * @static 
-         */ 
+         * @static
+         */
         public static function getPort()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getPort();
         }
                     /**
          * Returns the user.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function getUser()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getUser();
         }
                     /**
          * Returns the password.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function getPassword()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getPassword();
         }
@@ -8962,23 +8962,23 @@
          * Gets the user info.
          *
          * @return string A user name and, optionally, scheme-specific information about how to gain authorization to access the server
-         * @static 
-         */ 
+         * @static
+         */
         public static function getUserInfo()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getUserInfo();
         }
                     /**
          * Returns the HTTP host being requested.
-         * 
+         *
          * The port name will be appended to the host if it's non-standard.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getHttpHost()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getHttpHost();
         }
@@ -8986,24 +8986,24 @@
          * Returns the requested URI (path and query string).
          *
          * @return string The raw URI (i.e. not URI decoded)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getRequestUri()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getRequestUri();
         }
                     /**
          * Gets the scheme and HTTP host.
-         * 
+         *
          * If the URL was called with basic authentication, the user
          * and the password are not added to the generated string.
          *
          * @return string The scheme and HTTP host
-         * @static 
-         */ 
+         * @static
+         */
         public static function getSchemeAndHttpHost()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getSchemeAndHttpHost();
         }
@@ -9012,10 +9012,10 @@
          *
          * @return string A normalized URI (URL) for the Request
          * @see getQueryString()
-         * @static 
-         */ 
+         * @static
+         */
         public static function getUri()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getUri();
         }
@@ -9024,21 +9024,21 @@
          *
          * @param string $path A path to use instead of the current one
          * @return string The normalized URI for the path
-         * @static 
-         */ 
+         * @static
+         */
         public static function getUriForPath($path)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getUriForPath($path);
         }
                     /**
          * Returns the path as relative reference from the current Request path.
-         * 
+         *
          * Only the URIs path component (no schema, host etc.) is relevant and must be given.
          * Both paths must be absolute and not contain relative parts.
          * Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.
          * Furthermore, they can be used to reduce the link size in documents.
-         * 
+         *
          * Example target paths, given a base path of "/a/b/c/d":
          * - "/a/b/c/d"     -> ""
          * - "/a/b/c/"      -> "./"
@@ -9047,87 +9047,87 @@
          * - "/a/x/y"       -> "../../x/y"
          *
          * @return string The relative target path
-         * @static 
-         */ 
+         * @static
+         */
         public static function getRelativeUriForPath($path)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getRelativeUriForPath($path);
         }
                     /**
          * Generates the normalized query string for the Request.
-         * 
+         *
          * It builds a normalized query string, where keys/value pairs are alphabetized
          * and have consistent escaping.
          *
          * @return string|null A normalized query string for the Request
-         * @static 
-         */ 
+         * @static
+         */
         public static function getQueryString()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getQueryString();
         }
                     /**
          * Checks whether the request is secure or not.
-         * 
+         *
          * This method can read the client protocol from the "X-Forwarded-Proto" header
          * when trusted proxies were set via "setTrustedProxies()".
-         * 
+         *
          * The "X-Forwarded-Proto" header must contain the protocol: "https" or "http".
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isSecure()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isSecure();
         }
                     /**
          * Returns the host name.
-         * 
+         *
          * This method can read the client host name from the "X-Forwarded-Host" header
          * when trusted proxies were set via "setTrustedProxies()".
-         * 
+         *
          * The "X-Forwarded-Host" header must contain the client host name.
          *
-         * @return string 
+         * @return string
          * @throws SuspiciousOperationException when the host name is invalid or not trusted
-         * @static 
-         */ 
+         * @static
+         */
         public static function getHost()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getHost();
         }
                     /**
          * Sets the request method.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function setMethod($method)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setMethod($method);
         }
                     /**
          * Gets the request "intended" method.
-         * 
+         *
          * If the X-HTTP-Method-Override header is set, and if the method is a POST,
          * then it is used to determine the "real" intended HTTP method.
-         * 
+         *
          * The _method request parameter can also be used to determine the HTTP method,
          * but only if enableHttpMethodParameterOverride() has been called.
-         * 
+         *
          * The method is always an uppercased string.
          *
          * @return string The request method
          * @see getRealMethod()
-         * @static 
-         */ 
+         * @static
+         */
         public static function getMethod()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getMethod();
         }
@@ -9136,10 +9136,10 @@
          *
          * @return string The request method
          * @see getMethod()
-         * @static 
-         */ 
+         * @static
+         */
         public static function getRealMethod()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getRealMethod();
         }
@@ -9147,10 +9147,10 @@
          * Gets the mime type associated with the format.
          *
          * @return string|null The associated mime type (null if not found)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getMimeType($format)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getMimeType($format);
         }
@@ -9158,20 +9158,20 @@
          * Gets the mime types associated with the format.
          *
          * @return array The associated mime types
-         * @static 
-         */ 
+         * @static
+         */
         public static function getMimeTypes($format)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         return \Illuminate\Http\Request::getMimeTypes($format);
         }
                     /**
          * Gets the format associated with the mime type.
          *
          * @return string|null The format (null if not found)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getFormat($mimeType)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getFormat($mimeType);
         }
@@ -9179,38 +9179,38 @@
          * Associates a format with mime types.
          *
          * @param string|array $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)
-         * @static 
-         */ 
+         * @static
+         */
         public static function setFormat($format, $mimeTypes)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setFormat($format, $mimeTypes);
         }
                     /**
          * Gets the request format.
-         * 
+         *
          * Here is the process to determine the format:
-         * 
+         *
          *  * format defined by the user (with setRequestFormat())
          *  * _format request attribute
          *  * $default
          *
          * @see getPreferredFormat
          * @return string|null The request format
-         * @static 
-         */ 
+         * @static
+         */
         public static function getRequestFormat($default = 'html')
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getRequestFormat($default);
         }
                     /**
          * Sets the request format.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function setRequestFormat($format)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setRequestFormat($format);
         }
@@ -9218,52 +9218,52 @@
          * Gets the format associated with the request.
          *
          * @return string|null The format (null if no content type is present)
-         * @static 
-         */ 
+         * @static
+         */
         public static function getContentType()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getContentType();
         }
                     /**
          * Sets the default locale.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function setDefaultLocale($locale)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setDefaultLocale($locale);
         }
                     /**
          * Get the default locale.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultLocale()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getDefaultLocale();
         }
                     /**
          * Sets the locale.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function setLocale($locale)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->setLocale($locale);
         }
                     /**
          * Get the locale.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getLocale()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getLocale();
         }
@@ -9271,11 +9271,11 @@
          * Checks if the request method is of specified type.
          *
          * @param string $method Uppercase request method (GET, POST etc)
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isMethod($method)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isMethod($method);
         }
@@ -9283,22 +9283,22 @@
          * Checks whether or not the method is safe.
          *
          * @see https://tools.ietf.org/html/rfc7231#section-4.2.1
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isMethodSafe()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isMethodSafe();
         }
                     /**
          * Checks whether or not the method is idempotent.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isMethodIdempotent()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isMethodIdempotent();
         }
@@ -9307,27 +9307,27 @@
          *
          * @see https://tools.ietf.org/html/rfc7231#section-4.2.3
          * @return bool True for GET and HEAD, false otherwise
-         * @static 
-         */ 
+         * @static
+         */
         public static function isMethodCacheable()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isMethodCacheable();
         }
                     /**
          * Returns the protocol version.
-         * 
+         *
          * If the application is behind a proxy, the protocol version used in the
          * requests between the client and the proxy and between the proxy and the
          * server might be different. This returns the former (from the "Via" header)
          * if the proxy is trusted (see "setTrustedProxies()"), otherwise it returns
          * the latter (from the "SERVER_PROTOCOL" server parameter).
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getProtocolVersion()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getProtocolVersion();
         }
@@ -9336,10 +9336,10 @@
          *
          * @param bool $asResource If true, a resource will be returned
          * @return string|resource The request body content or a resource to read the body stream
-         * @static 
-         */ 
+         * @static
+         */
         public static function getContent($asResource = false)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getContent($asResource);
         }
@@ -9347,21 +9347,21 @@
          * Gets the Etags.
          *
          * @return array The entity tags
-         * @static 
-         */ 
+         * @static
+         */
         public static function getETags()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getETags();
         }
                     /**
-         * 
+         *
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isNoCache()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isNoCache();
         }
@@ -9369,14 +9369,14 @@
          * Gets the preferred format for the response by inspecting, in the following order:
          *   * the request format set using setRequestFormat;
          *   * the values of the Accept HTTP header.
-         * 
+         *
          * Note that if you use this method, you should send the "Vary: Accept" header
          * in the response to prevent any issues with intermediary HTTP caches.
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function getPreferredFormat($default = 'html')
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getPreferredFormat($default);
         }
@@ -9385,10 +9385,10 @@
          *
          * @param string[] $locales An array of ordered available locales
          * @return string|null The preferred locale
-         * @static 
-         */ 
+         * @static
+         */
         public static function getPreferredLanguage($locales = null)
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getPreferredLanguage($locales);
         }
@@ -9396,10 +9396,10 @@
          * Gets a list of languages acceptable by the client browser.
          *
          * @return array Languages ordered in the user browser preferences
-         * @static 
-         */ 
+         * @static
+         */
         public static function getLanguages()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getLanguages();
         }
@@ -9407,10 +9407,10 @@
          * Gets a list of charsets acceptable by the client browser.
          *
          * @return array List of charsets in preferable order
-         * @static 
-         */ 
+         * @static
+         */
         public static function getCharsets()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getCharsets();
         }
@@ -9418,10 +9418,10 @@
          * Gets a list of encodings acceptable by the client browser.
          *
          * @return array List of encodings in preferable order
-         * @static 
-         */ 
+         * @static
+         */
         public static function getEncodings()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getEncodings();
         }
@@ -9429,25 +9429,25 @@
          * Gets a list of content types acceptable by the client browser.
          *
          * @return array List of content types in preferable order
-         * @static 
-         */ 
+         * @static
+         */
         public static function getAcceptableContentTypes()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->getAcceptableContentTypes();
         }
                     /**
          * Returns true if the request is a XMLHttpRequest.
-         * 
+         *
          * It works if your JavaScript library sets an X-Requested-With HTTP header.
          * It is known to work with common JavaScript frameworks:
          *
          * @see https://wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript
          * @return bool true if the request is an XMLHttpRequest, false otherwise
-         * @static 
-         */ 
+         * @static
+         */
         public static function isXmlHttpRequest()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isXmlHttpRequest();
         }
@@ -9455,24 +9455,24 @@
          * Checks whether the client browser prefers safe content or not according to RFC8674.
          *
          * @see https://tools.ietf.org/html/rfc8674
-         * @static 
-         */ 
+         * @static
+         */
         public static function preferSafeContent()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->preferSafeContent();
         }
                     /**
          * Indicates whether this request originated from a trusted proxy.
-         * 
+         *
          * This can be useful to determine whether or not to trust the
          * contents of a proxy-specific header.
          *
          * @return bool true if the request came from a trusted proxy, false otherwise
-         * @static 
-         */ 
+         * @static
+         */
         public static function isFromTrustedProxy()
-        {            //Method inherited from \Symfony\Component\HttpFoundation\Request         
+        {            //Method inherited from \Symfony\Component\HttpFoundation\Request
                         /** @var \Illuminate\Http\Request $instance */
                         return $instance->isFromTrustedProxy();
         }
@@ -9481,9 +9481,9 @@
          *
          * @param string $actual
          * @param string $type
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function matchesType($actual, $type)
         {
                         return \Illuminate\Http\Request::matchesType($actual, $type);
@@ -9491,9 +9491,9 @@
                     /**
          * Determine if the request is sending JSON.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isJson()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9502,9 +9502,9 @@
                     /**
          * Determine if the current request probably expects a JSON response.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function expectsJson()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9513,9 +9513,9 @@
                     /**
          * Determine if the current request is asking for JSON.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function wantsJson()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9525,9 +9525,9 @@
          * Determines whether the current requests accepts a given content type.
          *
          * @param string|array $contentTypes
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function accepts($contentTypes)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9537,9 +9537,9 @@
          * Return the most suitable content type from the given array based on content negotiation.
          *
          * @param string|array $contentTypes
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function prefers($contentTypes)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9548,9 +9548,9 @@
                     /**
          * Determine if the current request accepts any content type.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function acceptsAnyContentType()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9559,9 +9559,9 @@
                     /**
          * Determines whether a request accepts JSON.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function acceptsJson()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9570,9 +9570,9 @@
                     /**
          * Determines whether a request accepts HTML.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function acceptsHtml()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9582,9 +9582,9 @@
          * Get the data format expected in the response.
          *
          * @param string $default
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function format($default = 'html')
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9595,9 +9595,9 @@
          *
          * @param string|null $key
          * @param string|array|null $default
-         * @return string|array 
-         * @static 
-         */ 
+         * @return string|array
+         * @static
+         */
         public static function old($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9606,9 +9606,9 @@
                     /**
          * Flash the input for the current request to the session.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flash()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9618,9 +9618,9 @@
          * Flash only some of the input to the session.
          *
          * @param array|mixed $keys
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flashOnly($keys)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9630,9 +9630,9 @@
          * Flash only some of the input to the session.
          *
          * @param array|mixed $keys
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flashExcept($keys)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9641,9 +9641,9 @@
                     /**
          * Flush all of the old input from the session.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flush()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9654,9 +9654,9 @@
          *
          * @param string|null $key
          * @param string|array|null $default
-         * @return string|array|null 
-         * @static 
-         */ 
+         * @return string|array|null
+         * @static
+         */
         public static function server($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9666,9 +9666,9 @@
          * Determine if a header is set on the request.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasHeader($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9679,9 +9679,9 @@
          *
          * @param string|null $key
          * @param string|array|null $default
-         * @return string|array|null 
-         * @static 
-         */ 
+         * @return string|array|null
+         * @static
+         */
         public static function header($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9690,9 +9690,9 @@
                     /**
          * Get the bearer token from the request headers.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function bearerToken()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9702,9 +9702,9 @@
          * Determine if the request contains a given input item key.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function exists($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9714,9 +9714,9 @@
          * Determine if the request contains a given input item key.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9726,9 +9726,9 @@
          * Determine if the request contains any of the given inputs.
          *
          * @param string|array $keys
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasAny($keys)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9739,9 +9739,9 @@
          *
          * @param string $key
          * @param callable $callback
-         * @return $this|mixed 
-         * @static 
-         */ 
+         * @return $this|mixed
+         * @static
+         */
         public static function whenHas($key, $callback)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9751,9 +9751,9 @@
          * Determine if the request contains a non-empty value for an input item.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function filled($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9763,9 +9763,9 @@
          * Determine if the request contains an empty value for an input item.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isNotFilled($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9775,9 +9775,9 @@
          * Determine if the request contains a non-empty value for any of the given inputs.
          *
          * @param string|array $keys
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function anyFilled($keys)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9788,9 +9788,9 @@
          *
          * @param string $key
          * @param callable $callback
-         * @return $this|mixed 
-         * @static 
-         */ 
+         * @return $this|mixed
+         * @static
+         */
         public static function whenFilled($key, $callback)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9800,9 +9800,9 @@
          * Determine if the request is missing a given input item key.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function missing($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9811,9 +9811,9 @@
                     /**
          * Get the keys for all of the input and files.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function keys()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9823,9 +9823,9 @@
          * Get all of the input and files for the request.
          *
          * @param array|mixed|null $keys
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function all($keys = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9836,9 +9836,9 @@
          *
          * @param string|null $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function input($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9846,14 +9846,14 @@
         }
                     /**
          * Retrieve input as a boolean value.
-         * 
+         *
          * Returns true when value is "1", "true", "on", and "yes". Otherwise, returns false.
          *
          * @param string|null $key
          * @param bool $default
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function boolean($key = null, $default = false)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9863,9 +9863,9 @@
          * Get a subset containing the provided keys with values from the input data.
          *
          * @param array|mixed $keys
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function only($keys)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9875,9 +9875,9 @@
          * Get all of the input except for a specified array of items.
          *
          * @param array|mixed $keys
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function except($keys)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9888,9 +9888,9 @@
          *
          * @param string|null $key
          * @param string|array|null $default
-         * @return string|array|null 
-         * @static 
-         */ 
+         * @return string|array|null
+         * @static
+         */
         public static function query($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9901,9 +9901,9 @@
          *
          * @param string|null $key
          * @param string|array|null $default
-         * @return string|array|null 
-         * @static 
-         */ 
+         * @return string|array|null
+         * @static
+         */
         public static function post($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9913,9 +9913,9 @@
          * Determine if a cookie is set on the request.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasCookie($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9926,9 +9926,9 @@
          *
          * @param string|null $key
          * @param string|array|null $default
-         * @return string|array|null 
-         * @static 
-         */ 
+         * @return string|array|null
+         * @static
+         */
         public static function cookie($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9937,9 +9937,9 @@
                     /**
          * Get an array of all of the files on the request.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function allFiles()
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9949,9 +9949,9 @@
          * Determine if the uploaded data contains a file.
          *
          * @param string $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasFile($key)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9962,9 +9962,9 @@
          *
          * @param string|null $key
          * @param mixed $default
-         * @return \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\UploadedFile|\Illuminate\Http\UploadedFile[]|array|null
+         * @static
+         */
         public static function file($key = null, $default = null)
         {
                         /** @var \Illuminate\Http\Request $instance */
@@ -9975,9 +9975,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Http\Request::macro($name, $macro);
@@ -9987,10 +9987,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Http\Request::mixin($mixin, $replace);
@@ -9999,56 +9999,56 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Http\Request::hasMacro($name);
         }
                     /**
-         * 
+         *
          *
          * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
          * @param array $rules
          * @param mixed $params
-         * @static 
-         */ 
+         * @static
+         */
         public static function validate($rules, ...$params)
         {
                         return \Illuminate\Http\Request::validate($rules, ...$params);
         }
                     /**
-         * 
+         *
          *
          * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
          * @param string $errorBag
          * @param array $rules
          * @param mixed $params
-         * @static 
-         */ 
+         * @static
+         */
         public static function validateWithBag($errorBag, $rules, ...$params)
         {
                         return \Illuminate\Http\Request::validateWithBag($errorBag, $rules, ...$params);
         }
                     /**
-         * 
+         *
          *
          * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
          * @param mixed $absolute
-         * @static 
-         */ 
+         * @static
+         */
         public static function hasValidSignature($absolute = true)
         {
                         return \Illuminate\Http\Request::hasValidSignature($absolute);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Contracts\Routing\ResponseFactory
-     */ 
+     */
         class Response {
                     /**
          * Create a new response instance.
@@ -10056,9 +10056,9 @@
          * @param string $content
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\Response 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Response
+         * @static
+         */
         public static function make($content = '', $status = 200, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10069,9 +10069,9 @@
          *
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\Response 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Response
+         * @static
+         */
         public static function noContent($status = 204, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10084,9 +10084,9 @@
          * @param array $data
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\Response 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Response
+         * @static
+         */
         public static function view($view, $data = [], $status = 200, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10099,9 +10099,9 @@
          * @param int $status
          * @param array $headers
          * @param int $options
-         * @return \Illuminate\Http\JsonResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\JsonResponse
+         * @static
+         */
         public static function json($data = [], $status = 200, $headers = [], $options = 0)
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10115,9 +10115,9 @@
          * @param int $status
          * @param array $headers
          * @param int $options
-         * @return \Illuminate\Http\JsonResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\JsonResponse
+         * @static
+         */
         public static function jsonp($callback, $data = [], $status = 200, $headers = [], $options = 0)
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10129,9 +10129,9 @@
          * @param \Closure $callback
          * @param int $status
          * @param array $headers
-         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse
+         * @static
+         */
         public static function stream($callback, $status = 200, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10144,9 +10144,9 @@
          * @param string|null $name
          * @param array $headers
          * @param string|null $disposition
-         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse
+         * @static
+         */
         public static function streamDownload($callback, $name = null, $headers = [], $disposition = 'attachment')
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10159,9 +10159,9 @@
          * @param string|null $name
          * @param array $headers
          * @param string|null $disposition
-         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+         * @static
+         */
         public static function download($file, $name = null, $headers = [], $disposition = 'attachment')
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10172,9 +10172,9 @@
          *
          * @param \SplFileInfo|string $file
          * @param array $headers
-         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
+         * @static
+         */
         public static function file($file, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10187,9 +10187,9 @@
          * @param int $status
          * @param array $headers
          * @param bool|null $secure
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function redirectTo($path, $status = 302, $headers = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10202,9 +10202,9 @@
          * @param mixed $parameters
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function redirectToRoute($route, $parameters = [], $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10217,9 +10217,9 @@
          * @param mixed $parameters
          * @param int $status
          * @param array $headers
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function redirectToAction($action, $parameters = [], $status = 302, $headers = [])
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10232,9 +10232,9 @@
          * @param int $status
          * @param array $headers
          * @param bool|null $secure
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function redirectGuest($path, $status = 302, $headers = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10247,9 +10247,9 @@
          * @param int $status
          * @param array $headers
          * @param bool|null $secure
-         * @return \Illuminate\Http\RedirectResponse 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\RedirectResponse
+         * @static
+         */
         public static function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\ResponseFactory $instance */
@@ -10260,9 +10260,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Routing\ResponseFactory::macro($name, $macro);
@@ -10272,10 +10272,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Routing\ResponseFactory::mixin($mixin, $replace);
@@ -10284,17 +10284,17 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Routing\ResponseFactory::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @method static \Illuminate\Routing\RouteRegistrar as(string $value)
      * @method static \Illuminate\Routing\RouteRegistrar domain(string $value)
@@ -10304,16 +10304,16 @@
      * @method static \Illuminate\Routing\RouteRegistrar prefix(string  $prefix)
      * @method static \Illuminate\Routing\RouteRegistrar where(array  $where)
      * @see \Illuminate\Routing\Router
-     */ 
+     */
         class Route {
                     /**
          * Register a new GET route with the router.
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function get($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10324,9 +10324,9 @@
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function post($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10337,9 +10337,9 @@
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function put($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10350,9 +10350,9 @@
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function patch($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10363,9 +10363,9 @@
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function delete($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10376,9 +10376,9 @@
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function options($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10389,9 +10389,9 @@
          *
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function any($uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10401,9 +10401,9 @@
          * Register a new Fallback route with the router.
          *
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function fallback($action)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10415,9 +10415,9 @@
          * @param string $uri
          * @param string $destination
          * @param int $status
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function redirect($uri, $destination, $status = 302)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10428,9 +10428,9 @@
          *
          * @param string $uri
          * @param string $destination
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function permanentRedirect($uri, $destination)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10442,9 +10442,9 @@
          * @param string $uri
          * @param string $view
          * @param array $data
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function view($uri, $view, $data = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10456,9 +10456,9 @@
          * @param array|string $methods
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function match($methods, $uri, $action = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10469,9 +10469,9 @@
          *
          * @param array $resources
          * @param array $options
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function resources($resources, $options = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10483,9 +10483,9 @@
          * @param string $name
          * @param string $controller
          * @param array $options
-         * @return \Illuminate\Routing\PendingResourceRegistration 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\PendingResourceRegistration
+         * @static
+         */
         public static function resource($name, $controller, $options = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10496,9 +10496,9 @@
          *
          * @param array $resources
          * @param array $options
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function apiResources($resources, $options = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10510,9 +10510,9 @@
          * @param string $name
          * @param string $controller
          * @param array $options
-         * @return \Illuminate\Routing\PendingResourceRegistration 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\PendingResourceRegistration
+         * @static
+         */
         public static function apiResource($name, $controller, $options = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10523,9 +10523,9 @@
          *
          * @param array $attributes
          * @param \Closure|string $routes
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function group($attributes, $routes)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10536,9 +10536,9 @@
          *
          * @param array $new
          * @param bool $prependExistingPrefix
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function mergeWithLastGroup($new, $prependExistingPrefix = true)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10547,9 +10547,9 @@
                     /**
          * Get the prefix from the last group on the stack.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getLastGroupPrefix()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10561,9 +10561,9 @@
          * @param array|string $methods
          * @param string $uri
          * @param array|string|callable|null $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function addRoute($methods, $uri, $action)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10575,9 +10575,9 @@
          * @param array|string $methods
          * @param string $uri
          * @param mixed $action
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function newRoute($methods, $uri, $action)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10587,9 +10587,9 @@
          * Return the response returned by the given route.
          *
          * @param string $name
-         * @return \Symfony\Component\HttpFoundation\Response 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response
+         * @static
+         */
         public static function respondWithRoute($name)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10599,9 +10599,9 @@
          * Dispatch the request to the application.
          *
          * @param \Illuminate\Http\Request $request
-         * @return \Symfony\Component\HttpFoundation\Response 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response
+         * @static
+         */
         public static function dispatch($request)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10611,9 +10611,9 @@
          * Dispatch the request to a route and return the response.
          *
          * @param \Illuminate\Http\Request $request
-         * @return \Symfony\Component\HttpFoundation\Response 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response
+         * @static
+         */
         public static function dispatchToRoute($request)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10623,9 +10623,9 @@
          * Gather the middleware for the given route with resolved class names.
          *
          * @param \Illuminate\Routing\Route $route
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function gatherRouteMiddleware($route)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10636,9 +10636,9 @@
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
          * @param mixed $response
-         * @return \Symfony\Component\HttpFoundation\Response 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response
+         * @static
+         */
         public static function prepareResponse($request, $response)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10649,9 +10649,9 @@
          *
          * @param \Symfony\Component\HttpFoundation\Request $request
          * @param mixed $response
-         * @return \Symfony\Component\HttpFoundation\Response 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\Response
+         * @static
+         */
         public static function toResponse($request, $response)
         {
                         return \Illuminate\Routing\Router::toResponse($request, $response);
@@ -10660,10 +10660,10 @@
          * Substitute the route bindings onto the route.
          *
          * @param \Illuminate\Routing\Route $route
-         * @return \Illuminate\Routing\Route 
+         * @return \Illuminate\Routing\Route
          * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function substituteBindings($route)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10673,10 +10673,10 @@
          * Substitute the implicit Eloquent model bindings for the route.
          *
          * @param \Illuminate\Routing\Route $route
-         * @return void 
+         * @return void
          * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function substituteImplicitBindings($route)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10686,9 +10686,9 @@
          * Register a route matched event listener.
          *
          * @param string|callable $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function matched($callback)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10697,9 +10697,9 @@
                     /**
          * Get all of the defined middleware short-hand names.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getMiddleware()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10710,9 +10710,9 @@
          *
          * @param string $name
          * @param string $class
-         * @return \Illuminate\Routing\Router 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Router
+         * @static
+         */
         public static function aliasMiddleware($name, $class)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10722,9 +10722,9 @@
          * Check if a middlewareGroup with the given name exists.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMiddlewareGroup($name)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10733,9 +10733,9 @@
                     /**
          * Get all of the defined middleware groups.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getMiddlewareGroups()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10746,9 +10746,9 @@
          *
          * @param string $name
          * @param array $middleware
-         * @return \Illuminate\Routing\Router 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Router
+         * @static
+         */
         public static function middlewareGroup($name, $middleware)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10756,14 +10756,14 @@
         }
                     /**
          * Add a middleware to the beginning of a middleware group.
-         * 
+         *
          * If the middleware is already in the group, it will not be added again.
          *
          * @param string $group
          * @param string $middleware
-         * @return \Illuminate\Routing\Router 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Router
+         * @static
+         */
         public static function prependMiddlewareToGroup($group, $middleware)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10771,14 +10771,14 @@
         }
                     /**
          * Add a middleware to the end of a middleware group.
-         * 
+         *
          * If the middleware is already in the group, it will not be added again.
          *
          * @param string $group
          * @param string $middleware
-         * @return \Illuminate\Routing\Router 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Router
+         * @static
+         */
         public static function pushMiddlewareToGroup($group, $middleware)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10789,9 +10789,9 @@
          *
          * @param string $key
          * @param string|callable $binder
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function bind($key, $binder)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10803,9 +10803,9 @@
          * @param string $key
          * @param string $class
          * @param \Closure|null $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function model($key, $class, $callback = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10815,9 +10815,9 @@
          * Get the binding callback for a given binding.
          *
          * @param string $key
-         * @return \Closure|null 
-         * @static 
-         */ 
+         * @return \Closure|null
+         * @static
+         */
         public static function getBindingCallback($key)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10826,9 +10826,9 @@
                     /**
          * Get the global "where" patterns.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getPatterns()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10839,9 +10839,9 @@
          *
          * @param string $key
          * @param string $pattern
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function pattern($key, $pattern)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10851,9 +10851,9 @@
          * Set a group of global where patterns on all routes.
          *
          * @param array $patterns
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function patterns($patterns)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10862,9 +10862,9 @@
                     /**
          * Determine if the router currently has a group stack.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasGroupStack()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10873,9 +10873,9 @@
                     /**
          * Get the current group stack for the router.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getGroupStack()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10886,9 +10886,9 @@
          *
          * @param string $key
          * @param string|null $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function input($key, $default = null)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10897,9 +10897,9 @@
                     /**
          * Get the request currently being dispatched.
          *
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function getCurrentRequest()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10908,9 +10908,9 @@
                     /**
          * Get the currently dispatched route instance.
          *
-         * @return \Illuminate\Routing\Route 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route
+         * @static
+         */
         public static function getCurrentRoute()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10919,9 +10919,9 @@
                     /**
          * Get the currently dispatched route instance.
          *
-         * @return \Illuminate\Routing\Route|null 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\Route|null
+         * @static
+         */
         public static function current()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10931,9 +10931,9 @@
          * Check if a route with the given name exists.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($name)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10942,9 +10942,9 @@
                     /**
          * Get the current route name.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function currentRouteName()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10954,9 +10954,9 @@
          * Alias for the "currentRouteNamed" method.
          *
          * @param mixed $patterns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function is(...$patterns)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10966,9 +10966,9 @@
          * Determine if the current route matches a pattern.
          *
          * @param mixed $patterns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function currentRouteNamed(...$patterns)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10977,9 +10977,9 @@
                     /**
          * Get the current route action.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function currentRouteAction()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -10989,9 +10989,9 @@
          * Alias for the "currentRouteUses" method.
          *
          * @param array $patterns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function uses(...$patterns)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11001,9 +11001,9 @@
          * Determine if the current route action matches a given action.
          *
          * @param string $action
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function currentRouteUses($action)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11013,9 +11013,9 @@
          * Set the unmapped global resource parameters to singular.
          *
          * @param bool $singular
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function singularResourceParameters($singular = true)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11025,9 +11025,9 @@
          * Set the global resource parameter mapping.
          *
          * @param array $parameters
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function resourceParameters($parameters = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11037,9 +11037,9 @@
          * Get or set the verbs used in the resource URIs.
          *
          * @param array $verbs
-         * @return array|null 
-         * @static 
-         */ 
+         * @return array|null
+         * @static
+         */
         public static function resourceVerbs($verbs = [])
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11048,9 +11048,9 @@
                     /**
          * Get the underlying route collection.
          *
-         * @return \Illuminate\Routing\RouteCollectionInterface 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\RouteCollectionInterface
+         * @static
+         */
         public static function getRoutes()
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11060,9 +11060,9 @@
          * Set the route collection instance.
          *
          * @param \Illuminate\Routing\RouteCollection $routes
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setRoutes($routes)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11072,9 +11072,9 @@
          * Set the compiled route collection instance.
          *
          * @param array $routes
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setCompiledRoutes($routes)
         {
                         /** @var \Illuminate\Routing\Router $instance */
@@ -11084,9 +11084,9 @@
          * Remove any duplicate middleware from the given array.
          *
          * @param array $middleware
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function uniqueMiddleware($middleware)
         {
                         return \Illuminate\Routing\Router::uniqueMiddleware($middleware);
@@ -11096,9 +11096,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Routing\Router::macro($name, $macro);
@@ -11108,10 +11108,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Routing\Router::mixin($mixin, $replace);
@@ -11120,9 +11120,9 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Routing\Router::hasMacro($name);
@@ -11132,71 +11132,71 @@
          *
          * @param string $method
          * @param array $parameters
-         * @return mixed 
+         * @return mixed
          * @throws \BadMethodCallException
-         * @static 
-         */ 
+         * @static
+         */
         public static function macroCall($method, $parameters)
         {
                         /** @var \Illuminate\Routing\Router $instance */
                         return $instance->macroCall($method, $parameters);
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::auth()
          * @param mixed $options
-         * @static 
-         */ 
+         * @static
+         */
         public static function auth($options = [])
         {
                         return \Illuminate\Routing\Router::auth($options);
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::resetPassword()
-         * @static 
-         */ 
+         * @static
+         */
         public static function resetPassword()
         {
                         return \Illuminate\Routing\Router::resetPassword();
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::confirmPassword()
-         * @static 
-         */ 
+         * @static
+         */
         public static function confirmPassword()
         {
                         return \Illuminate\Routing\Router::confirmPassword();
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::emailVerification()
-         * @static 
-         */ 
+         * @static
+         */
         public static function emailVerification()
         {
                         return \Illuminate\Routing\Router::emailVerification();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Database\Schema\Builder
-     */ 
+     */
         class Schema {
                     /**
          * Determine if the given table exists.
          *
          * @param string $table
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasTable($table)
         {
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
@@ -11206,9 +11206,9 @@
          * Get the column listing for a given table.
          *
          * @param string $table
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getColumnListing($table)
         {
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
@@ -11217,9 +11217,9 @@
                     /**
          * Drop all tables from the database.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function dropAllTables()
         {
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
@@ -11228,9 +11228,9 @@
                     /**
          * Drop all views from the database.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function dropAllViews()
         {
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
@@ -11239,9 +11239,9 @@
                     /**
          * Get all of the table names for the database.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getAllTables()
         {
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
@@ -11250,9 +11250,9 @@
                     /**
          * Get all of the view names for the database.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getAllViews()
         {
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
@@ -11262,11 +11262,11 @@
          * Set the default string length for migrations.
          *
          * @param int $length
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function defaultStringLength($length)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         \Illuminate\Database\Schema\MySqlBuilder::defaultStringLength($length);
         }
                     /**
@@ -11274,11 +11274,11 @@
          *
          * @param string $table
          * @param string $column
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasColumn($table, $column)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->hasColumn($table, $column);
         }
@@ -11287,11 +11287,11 @@
          *
          * @param string $table
          * @param array $columns
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasColumns($table, $columns)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->hasColumns($table, $columns);
         }
@@ -11300,11 +11300,11 @@
          *
          * @param string $table
          * @param string $column
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getColumnType($table, $column)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->getColumnType($table, $column);
         }
@@ -11313,11 +11313,11 @@
          *
          * @param string $table
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function table($table, $callback)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->table($table, $callback);
         }
@@ -11326,11 +11326,11 @@
          *
          * @param string $table
          * @param \Closure $callback
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function create($table, $callback)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->create($table, $callback);
         }
@@ -11338,11 +11338,11 @@
          * Drop a table from the schema.
          *
          * @param string $table
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function drop($table)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->drop($table);
         }
@@ -11350,23 +11350,23 @@
          * Drop a table from the schema if it exists.
          *
          * @param string $table
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function dropIfExists($table)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->dropIfExists($table);
         }
                     /**
          * Drop all types from the database.
          *
-         * @return void 
+         * @return void
          * @throws \LogicException
-         * @static 
-         */ 
+         * @static
+         */
         public static function dropAllTypes()
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->dropAllTypes();
         }
@@ -11375,33 +11375,33 @@
          *
          * @param string $from
          * @param string $to
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function rename($from, $to)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->rename($from, $to);
         }
                     /**
          * Enable foreign key constraints.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function enableForeignKeyConstraints()
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->enableForeignKeyConstraints();
         }
                     /**
          * Disable foreign key constraints.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function disableForeignKeyConstraints()
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->disableForeignKeyConstraints();
         }
@@ -11411,24 +11411,24 @@
          * @param string $class
          * @param string $name
          * @param string $type
-         * @return void 
+         * @return void
          * @throws \Doctrine\DBAL\DBALException
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function registerCustomDoctrineType($class, $name, $type)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->registerCustomDoctrineType($class, $name, $type);
         }
                     /**
          * Get the database connection instance.
          *
-         * @return \Illuminate\Database\Connection 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Connection
+         * @static
+         */
         public static function getConnection()
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->getConnection();
         }
@@ -11436,11 +11436,11 @@
          * Set the database connection instance.
          *
          * @param \Illuminate\Database\Connection $connection
-         * @return \Illuminate\Database\Schema\MySqlBuilder 
-         * @static 
-         */ 
+         * @return \Illuminate\Database\Schema\MySqlBuilder
+         * @static
+         */
         public static function setConnection($connection)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         return $instance->setConnection($connection);
         }
@@ -11448,29 +11448,29 @@
          * Set the Schema Blueprint resolver callback.
          *
          * @param \Closure $resolver
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function blueprintResolver($resolver)
-        {            //Method inherited from \Illuminate\Database\Schema\Builder         
+        {            //Method inherited from \Illuminate\Database\Schema\Builder
                         /** @var \Illuminate\Database\Schema\MySqlBuilder $instance */
                         $instance->blueprintResolver($resolver);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Session\SessionManager
      * @see \Illuminate\Session\Store
-     */ 
+     */
         class Session {
                     /**
          * Determine if requests for the same session should wait for each to finish before executing.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function shouldBlock()
         {
                         /** @var \Illuminate\Session\SessionManager $instance */
@@ -11479,9 +11479,9 @@
                     /**
          * Get the name of the cache store / driver that should be used to acquire session locks.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function blockDriver()
         {
                         /** @var \Illuminate\Session\SessionManager $instance */
@@ -11490,9 +11490,9 @@
                     /**
          * Get the session configuration.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getSessionConfig()
         {
                         /** @var \Illuminate\Session\SessionManager $instance */
@@ -11501,9 +11501,9 @@
                     /**
          * Get the default session driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Session\SessionManager $instance */
@@ -11513,9 +11513,9 @@
          * Set the default session driver name.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDefaultDriver($name)
         {
                         /** @var \Illuminate\Session\SessionManager $instance */
@@ -11525,12 +11525,12 @@
          * Get a driver instance.
          *
          * @param string|null $driver
-         * @return mixed 
+         * @return mixed
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function driver($driver = null)
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Session\SessionManager $instance */
                         return $instance->driver($driver);
         }
@@ -11539,31 +11539,31 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Session\SessionManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Session\SessionManager
+         * @static
+         */
         public static function extend($driver, $callback)
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Session\SessionManager $instance */
                         return $instance->extend($driver, $callback);
         }
                     /**
          * Get all of the created "drivers".
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getDrivers()
-        {            //Method inherited from \Illuminate\Support\Manager         
+        {            //Method inherited from \Illuminate\Support\Manager
                         /** @var \Illuminate\Session\SessionManager $instance */
                         return $instance->getDrivers();
         }
                     /**
          * Start the session, reading the data from a handler.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function start()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11572,9 +11572,9 @@
                     /**
          * Save the session data to storage.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function save()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11583,9 +11583,9 @@
                     /**
          * Age the flash data for the session.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function ageFlashData()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11594,9 +11594,9 @@
                     /**
          * Get all of the session data.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function all()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11606,9 +11606,9 @@
          * Get a subset of the session data.
          *
          * @param array $keys
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function only($keys)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11618,9 +11618,9 @@
          * Checks if a key exists.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function exists($key)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11630,9 +11630,9 @@
          * Checks if a key is present and not null.
          *
          * @param string|array $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function has($key)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11643,9 +11643,9 @@
          *
          * @param string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function get($key, $default = null)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11656,9 +11656,9 @@
          *
          * @param string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function pull($key, $default = null)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11668,9 +11668,9 @@
          * Determine if the session contains old input.
          *
          * @param string|null $key
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasOldInput($key = null)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11681,9 +11681,9 @@
          *
          * @param string|null $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getOldInput($key = null, $default = null)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11693,9 +11693,9 @@
          * Replace the given session attributes entirely.
          *
          * @param array $attributes
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function replace($attributes)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11706,9 +11706,9 @@
          *
          * @param string|array $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function put($key, $value = null)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11719,9 +11719,9 @@
          *
          * @param string $key
          * @param \Closure $callback
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function remember($key, $callback)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11732,9 +11732,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function push($key, $value)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11745,9 +11745,9 @@
          *
          * @param string $key
          * @param int $amount
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function increment($key, $amount = 1)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11758,9 +11758,9 @@
          *
          * @param string $key
          * @param int $amount
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function decrement($key, $amount = 1)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11771,9 +11771,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flash($key, $value = true)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11784,9 +11784,9 @@
          *
          * @param string $key
          * @param mixed $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function now($key, $value)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11795,9 +11795,9 @@
                     /**
          * Reflash all of the session flash data.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function reflash()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11807,9 +11807,9 @@
          * Reflash a subset of the current flash data.
          *
          * @param array|mixed $keys
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function keep($keys = null)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11819,9 +11819,9 @@
          * Flash an input array to the session.
          *
          * @param array $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flashInput($value)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11831,9 +11831,9 @@
          * Remove an item from the session, returning its value.
          *
          * @param string $key
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function remove($key)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11843,9 +11843,9 @@
          * Remove one or many items from the session.
          *
          * @param string|array $keys
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forget($keys)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11854,9 +11854,9 @@
                     /**
          * Remove all of the items from the session.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flush()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11865,9 +11865,9 @@
                     /**
          * Flush the session data and regenerate the ID.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function invalidate()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11877,9 +11877,9 @@
          * Generate a new session identifier.
          *
          * @param bool $destroy
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function regenerate($destroy = false)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11889,9 +11889,9 @@
          * Generate a new session ID for the session.
          *
          * @param bool $destroy
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function migrate($destroy = false)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11900,9 +11900,9 @@
                     /**
          * Determine if the session has been started.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isStarted()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11911,9 +11911,9 @@
                     /**
          * Get the name of the session.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getName()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11923,9 +11923,9 @@
          * Set the name of the session.
          *
          * @param string $name
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setName($name)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11934,9 +11934,9 @@
                     /**
          * Get the current session ID.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getId()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11946,9 +11946,9 @@
          * Set the session ID.
          *
          * @param string $id
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setId($id)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11958,9 +11958,9 @@
          * Determine if this is a valid session ID.
          *
          * @param string $id
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isValidId($id)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11970,9 +11970,9 @@
          * Set the existence of the session on the handler if applicable.
          *
          * @param bool $value
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setExists($value)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11981,9 +11981,9 @@
                     /**
          * Get the CSRF token value.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function token()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -11992,9 +11992,9 @@
                     /**
          * Regenerate the CSRF token value.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function regenerateToken()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -12003,9 +12003,9 @@
                     /**
          * Get the previous URL from the session.
          *
-         * @return string|null 
-         * @static 
-         */ 
+         * @return string|null
+         * @static
+         */
         public static function previousUrl()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -12015,9 +12015,9 @@
          * Set the "previous" URL in the session.
          *
          * @param string $url
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setPreviousUrl($url)
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -12026,9 +12026,9 @@
                     /**
          * Get the underlying session handler implementation.
          *
-         * @return \SessionHandlerInterface 
-         * @static 
-         */ 
+         * @return \SessionHandlerInterface
+         * @static
+         */
         public static function getHandler()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -12037,9 +12037,9 @@
                     /**
          * Determine if the session handler needs a request.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function handlerNeedsRequest()
         {
                         /** @var \Illuminate\Session\Store $instance */
@@ -12049,29 +12049,29 @@
          * Set the request on the handler instance.
          *
          * @param \Illuminate\Http\Request $request
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setRequestOnHandler($request)
         {
                         /** @var \Illuminate\Session\Store $instance */
                         $instance->setRequestOnHandler($request);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Filesystem\FilesystemManager
-     */ 
+     */
         class Storage {
                     /**
          * Get a filesystem instance.
          *
          * @param string|null $name
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function drive($name = null)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12081,9 +12081,9 @@
          * Get a filesystem instance.
          *
          * @param string|null $name
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function disk($name = null)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12092,9 +12092,9 @@
                     /**
          * Get a default cloud filesystem instance.
          *
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function cloud()
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12104,9 +12104,9 @@
          * Create an instance of the local driver.
          *
          * @param array $config
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function createLocalDriver($config)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12116,9 +12116,9 @@
          * Create an instance of the ftp driver.
          *
          * @param array $config
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function createFtpDriver($config)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12128,9 +12128,9 @@
          * Create an instance of the sftp driver.
          *
          * @param array $config
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function createSftpDriver($config)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12140,9 +12140,9 @@
          * Create an instance of the Amazon S3 driver.
          *
          * @param array $config
-         * @return \Illuminate\Contracts\Filesystem\Cloud 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Filesystem\Cloud
+         * @static
+         */
         public static function createS3Driver($config)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12153,9 +12153,9 @@
          *
          * @param string $name
          * @param mixed $disk
-         * @return \Illuminate\Filesystem\FilesystemManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemManager
+         * @static
+         */
         public static function set($name, $disk)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12164,9 +12164,9 @@
                     /**
          * Get the default driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultDriver()
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12175,9 +12175,9 @@
                     /**
          * Get the default cloud driver name.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getDefaultCloudDriver()
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12187,9 +12187,9 @@
          * Unset the given disk instances.
          *
          * @param array|string $disk
-         * @return \Illuminate\Filesystem\FilesystemManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemManager
+         * @static
+         */
         public static function forgetDisk($disk)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12200,9 +12200,9 @@
          *
          * @param string $driver
          * @param \Closure $callback
-         * @return \Illuminate\Filesystem\FilesystemManager 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemManager
+         * @static
+         */
         public static function extend($driver, $callback)
         {
                         /** @var \Illuminate\Filesystem\FilesystemManager $instance */
@@ -12212,9 +12212,9 @@
          * Assert that the given file exists.
          *
          * @param string|array $path
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function assertExists($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12224,9 +12224,9 @@
          * Assert that the given file does not exist.
          *
          * @param string|array $path
-         * @return \Illuminate\Filesystem\FilesystemAdapter 
-         * @static 
-         */ 
+         * @return \Illuminate\Filesystem\FilesystemAdapter
+         * @static
+         */
         public static function assertMissing($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12236,9 +12236,9 @@
          * Determine if a file exists.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function exists($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12248,9 +12248,9 @@
          * Determine if a file or directory is missing.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function missing($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12260,9 +12260,9 @@
          * Get the full path for the file at the given "short" path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function path($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12272,10 +12272,10 @@
          * Get the contents of a file.
          *
          * @param string $path
-         * @return string 
+         * @return string
          * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function get($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12288,9 +12288,9 @@
          * @param string|null $name
          * @param array|null $headers
          * @param string|null $disposition
-         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse
+         * @static
+         */
         public static function response($path, $name = null, $headers = [], $disposition = 'inline')
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12302,9 +12302,9 @@
          * @param string $path
          * @param string|null $name
          * @param array|null $headers
-         * @return \Symfony\Component\HttpFoundation\StreamedResponse 
-         * @static 
-         */ 
+         * @return \Symfony\Component\HttpFoundation\StreamedResponse
+         * @static
+         */
         public static function download($path, $name = null, $headers = [])
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12316,9 +12316,9 @@
          * @param string $path
          * @param string|resource $contents
          * @param mixed $options
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function put($path, $contents, $options = [])
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12330,9 +12330,9 @@
          * @param string $path
          * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
          * @param mixed $options
-         * @return string|false 
-         * @static 
-         */ 
+         * @return string|false
+         * @static
+         */
         public static function putFile($path, $file, $options = [])
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12345,9 +12345,9 @@
          * @param \Illuminate\Http\File|\Illuminate\Http\UploadedFile|string $file
          * @param string $name
          * @param mixed $options
-         * @return string|false 
-         * @static 
-         */ 
+         * @return string|false
+         * @static
+         */
         public static function putFileAs($path, $file, $name, $options = [])
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12357,9 +12357,9 @@
          * Get the visibility for the given path.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getVisibility($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12370,9 +12370,9 @@
          *
          * @param string $path
          * @param string $visibility
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function setVisibility($path, $visibility)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12384,9 +12384,9 @@
          * @param string $path
          * @param string $data
          * @param string $separator
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function prepend($path, $data, $separator = '
 ')
         {
@@ -12399,9 +12399,9 @@
          * @param string $path
          * @param string $data
          * @param string $separator
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function append($path, $data, $separator = '
 ')
         {
@@ -12412,9 +12412,9 @@
          * Delete the file at a given path.
          *
          * @param string|array $paths
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function delete($paths)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12425,9 +12425,9 @@
          *
          * @param string $from
          * @param string $to
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function copy($from, $to)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12438,9 +12438,9 @@
          *
          * @param string $from
          * @param string $to
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function move($from, $to)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12450,9 +12450,9 @@
          * Get the file size of a given file.
          *
          * @param string $path
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function size($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12462,9 +12462,9 @@
          * Get the mime-type of a given file.
          *
          * @param string $path
-         * @return string|false 
-         * @static 
-         */ 
+         * @return string|false
+         * @static
+         */
         public static function mimeType($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12474,9 +12474,9 @@
          * Get the file's last modification time.
          *
          * @param string $path
-         * @return int 
-         * @static 
-         */ 
+         * @return int
+         * @static
+         */
         public static function lastModified($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12486,10 +12486,10 @@
          * Get the URL for the file at the given path.
          *
          * @param string $path
-         * @return string 
+         * @return string
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function url($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12501,8 +12501,8 @@
          * @param string $path
          * @return resource|null The path resource or null on failure.
          * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function readStream($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12514,11 +12514,11 @@
          * @param string $path
          * @param resource $resource
          * @param array $options
-         * @return bool 
+         * @return bool
          * @throws \InvalidArgumentException If $resource is not a file handle.
          * @throws \Illuminate\Contracts\Filesystem\FileExistsException
-         * @static 
-         */ 
+         * @static
+         */
         public static function writeStream($path, $resource, $options = [])
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12530,10 +12530,10 @@
          * @param string $path
          * @param \DateTimeInterface $expiration
          * @param array $options
-         * @return string 
+         * @return string
          * @throws \RuntimeException
-         * @static 
-         */ 
+         * @static
+         */
         public static function temporaryUrl($path, $expiration, $options = [])
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12546,9 +12546,9 @@
          * @param string $path
          * @param \DateTimeInterface $expiration
          * @param array $options
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function getAwsTemporaryUrl($adapter, $path, $expiration, $options)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12559,9 +12559,9 @@
          *
          * @param string|null $directory
          * @param bool $recursive
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function files($directory = null, $recursive = false)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12571,9 +12571,9 @@
          * Get all of the files from the given directory (recursive).
          *
          * @param string|null $directory
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function allFiles($directory = null)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12584,9 +12584,9 @@
          *
          * @param string|null $directory
          * @param bool $recursive
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function directories($directory = null, $recursive = false)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12596,9 +12596,9 @@
          * Get all (recursive) of the directories within a given directory.
          *
          * @param string|null $directory
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function allDirectories($directory = null)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12608,9 +12608,9 @@
          * Create a directory.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function makeDirectory($path)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12620,9 +12620,9 @@
          * Recursively delete a directory.
          *
          * @param string $directory
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function deleteDirectory($directory)
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12631,9 +12631,9 @@
                     /**
          * Flush the Flysystem cache.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushCache()
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
@@ -12642,28 +12642,28 @@
                     /**
          * Get the Flysystem driver.
          *
-         * @return \League\Flysystem\FilesystemInterface 
-         * @static 
-         */ 
+         * @return \League\Flysystem\FilesystemInterface
+         * @static
+         */
         public static function getDriver()
         {
                         /** @var \Illuminate\Filesystem\FilesystemAdapter $instance */
                         return $instance->getDriver();
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Routing\UrlGenerator
-     */ 
+     */
         class URL {
                     /**
          * Get the full URL for the current request.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function full()
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12672,9 +12672,9 @@
                     /**
          * Get the current URL for the request.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function current()
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12684,9 +12684,9 @@
          * Get the URL for the previous request.
          *
          * @param mixed $fallback
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function previous($fallback = false)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12698,9 +12698,9 @@
          * @param string $path
          * @param mixed $extra
          * @param bool|null $secure
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function to($path, $extra = [], $secure = null)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12711,9 +12711,9 @@
          *
          * @param string $path
          * @param array $parameters
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function secure($path, $parameters = [])
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12724,9 +12724,9 @@
          *
          * @param string $path
          * @param bool|null $secure
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function asset($path, $secure = null)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12736,9 +12736,9 @@
          * Generate the URL to a secure asset.
          *
          * @param string $path
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function secureAsset($path)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12750,9 +12750,9 @@
          * @param string $root
          * @param string $path
          * @param bool|null $secure
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function assetFrom($root, $path, $secure = null)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12762,9 +12762,9 @@
          * Get the default scheme for a raw URL.
          *
          * @param bool|null $secure
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function formatScheme($secure = null)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12777,10 +12777,10 @@
          * @param mixed $parameters
          * @param \DateTimeInterface|\DateInterval|int|null $expiration
          * @param bool $absolute
-         * @return string 
+         * @return string
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function signedRoute($name, $parameters = [], $expiration = null, $absolute = true)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12793,9 +12793,9 @@
          * @param \DateTimeInterface|\DateInterval|int $expiration
          * @param array $parameters
          * @param bool $absolute
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function temporarySignedRoute($name, $expiration, $parameters = [], $absolute = true)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12806,9 +12806,9 @@
          *
          * @param \Illuminate\Http\Request $request
          * @param bool $absolute
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasValidSignature($request, $absolute = true)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12819,9 +12819,9 @@
          *
          * @param \Illuminate\Http\Request $request
          * @param bool $absolute
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasCorrectSignature($request, $absolute = true)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12831,9 +12831,9 @@
          * Determine if the expires timestamp from the given request is not from the past.
          *
          * @param \Illuminate\Http\Request $request
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function signatureHasNotExpired($request)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12845,10 +12845,10 @@
          * @param string $name
          * @param mixed $parameters
          * @param bool $absolute
-         * @return string 
+         * @return string
          * @throws \Symfony\Component\Routing\Exception\RouteNotFoundException
-         * @static 
-         */ 
+         * @static
+         */
         public static function route($name, $parameters = [], $absolute = true)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12860,10 +12860,10 @@
          * @param \Illuminate\Routing\Route $route
          * @param mixed $parameters
          * @param bool $absolute
-         * @return string 
+         * @return string
          * @throws \Illuminate\Routing\Exceptions\UrlGenerationException
-         * @static 
-         */ 
+         * @static
+         */
         public static function toRoute($route, $parameters, $absolute)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12875,10 +12875,10 @@
          * @param string|array $action
          * @param mixed $parameters
          * @param bool $absolute
-         * @return string 
+         * @return string
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function action($action, $parameters = [], $absolute = true)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12888,9 +12888,9 @@
          * Format the array of URL parameters.
          *
          * @param mixed|array $parameters
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function formatParameters($parameters)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12901,9 +12901,9 @@
          *
          * @param string $scheme
          * @param string|null $root
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function formatRoot($scheme, $root = null)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12915,9 +12915,9 @@
          * @param string $root
          * @param string $path
          * @param \Illuminate\Routing\Route|null $route
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function format($root, $path, $route = null)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12927,9 +12927,9 @@
          * Determine if the given path is a valid URL.
          *
          * @param string $path
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function isValidUrl($path)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12939,9 +12939,9 @@
          * Set the default named parameters used by the URL generator.
          *
          * @param array $defaults
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function defaults($defaults)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12950,9 +12950,9 @@
                     /**
          * Get the default named parameters used by the URL generator.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getDefaultParameters()
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12962,9 +12962,9 @@
          * Force the scheme for URLs.
          *
          * @param string|null $scheme
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forceScheme($scheme)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12974,9 +12974,9 @@
          * Set the forced root URL.
          *
          * @param string|null $root
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function forceRootUrl($root)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12986,9 +12986,9 @@
          * Set a callback to be used to format the host of generated URLs.
          *
          * @param \Closure $callback
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function formatHostUsing($callback)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -12998,9 +12998,9 @@
          * Set a callback to be used to format the path of generated URLs.
          *
          * @param \Closure $callback
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function formatPathUsing($callback)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13009,9 +13009,9 @@
                     /**
          * Get the path formatter being used by the URL generator.
          *
-         * @return \Closure 
-         * @static 
-         */ 
+         * @return \Closure
+         * @static
+         */
         public static function pathFormatter()
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13020,9 +13020,9 @@
                     /**
          * Get the request instance.
          *
-         * @return \Illuminate\Http\Request 
-         * @static 
-         */ 
+         * @return \Illuminate\Http\Request
+         * @static
+         */
         public static function getRequest()
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13032,9 +13032,9 @@
          * Set the current request instance.
          *
          * @param \Illuminate\Http\Request $request
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setRequest($request)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13044,9 +13044,9 @@
          * Set the route collection.
          *
          * @param \Illuminate\Routing\RouteCollectionInterface $routes
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function setRoutes($routes)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13056,9 +13056,9 @@
          * Set the session resolver for the generator.
          *
          * @param callable $sessionResolver
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function setSessionResolver($sessionResolver)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13068,9 +13068,9 @@
          * Set the encryption key resolver.
          *
          * @param callable $keyResolver
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function setKeyResolver($keyResolver)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13080,9 +13080,9 @@
          * Set the root controller namespace.
          *
          * @param string $rootNamespace
-         * @return \Illuminate\Routing\UrlGenerator 
-         * @static 
-         */ 
+         * @return \Illuminate\Routing\UrlGenerator
+         * @static
+         */
         public static function setRootControllerNamespace($rootNamespace)
         {
                         /** @var \Illuminate\Routing\UrlGenerator $instance */
@@ -13093,9 +13093,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\Routing\UrlGenerator::macro($name, $macro);
@@ -13105,10 +13105,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\Routing\UrlGenerator::mixin($mixin, $replace);
@@ -13117,20 +13117,20 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\Routing\UrlGenerator::hasMacro($name);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\Validation\Factory
-     */ 
+     */
         class Validator {
                     /**
          * Create a new Validator instance.
@@ -13139,9 +13139,9 @@
          * @param array $rules
          * @param array $messages
          * @param array $customAttributes
-         * @return \Illuminate\Validation\Validator 
-         * @static 
-         */ 
+         * @return \Illuminate\Validation\Validator
+         * @static
+         */
         public static function make($data, $rules, $messages = [], $customAttributes = [])
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13154,10 +13154,10 @@
          * @param array $rules
          * @param array $messages
          * @param array $customAttributes
-         * @return array 
+         * @return array
          * @throws \Illuminate\Validation\ValidationException
-         * @static 
-         */ 
+         * @static
+         */
         public static function validate($data, $rules, $messages = [], $customAttributes = [])
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13169,9 +13169,9 @@
          * @param string $rule
          * @param \Closure|string $extension
          * @param string|null $message
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function extend($rule, $extension, $message = null)
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13183,9 +13183,9 @@
          * @param string $rule
          * @param \Closure|string $extension
          * @param string|null $message
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function extendImplicit($rule, $extension, $message = null)
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13197,9 +13197,9 @@
          * @param string $rule
          * @param \Closure|string $extension
          * @param string|null $message
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function extendDependent($rule, $extension, $message = null)
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13210,9 +13210,9 @@
          *
          * @param string $rule
          * @param \Closure|string $replacer
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function replacer($rule, $replacer)
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13222,9 +13222,9 @@
          * Set the Validator instance resolver.
          *
          * @param \Closure $resolver
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function resolver($resolver)
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13233,9 +13233,9 @@
                     /**
          * Get the Translator implementation.
          *
-         * @return \Illuminate\Contracts\Translation\Translator 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Translation\Translator
+         * @static
+         */
         public static function getTranslator()
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13244,9 +13244,9 @@
                     /**
          * Get the Presence Verifier implementation.
          *
-         * @return \Illuminate\Validation\PresenceVerifierInterface 
-         * @static 
-         */ 
+         * @return \Illuminate\Validation\PresenceVerifierInterface
+         * @static
+         */
         public static function getPresenceVerifier()
         {
                         /** @var \Illuminate\Validation\Factory $instance */
@@ -13256,21 +13256,21 @@
          * Set the Presence Verifier implementation.
          *
          * @param \Illuminate\Validation\PresenceVerifierInterface $presenceVerifier
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setPresenceVerifier($presenceVerifier)
         {
                         /** @var \Illuminate\Validation\Factory $instance */
                         $instance->setPresenceVerifier($presenceVerifier);
         }
-         
+
     }
             /**
-     * 
+     *
      *
      * @see \Illuminate\View\Factory
-     */ 
+     */
         class View {
                     /**
          * Get the evaluated view contents for the given view.
@@ -13278,9 +13278,9 @@
          * @param string $path
          * @param \Illuminate\Contracts\Support\Arrayable|array $data
          * @param array $mergeData
-         * @return \Illuminate\Contracts\View\View 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\View\View
+         * @static
+         */
         public static function file($path, $data = [], $mergeData = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13292,9 +13292,9 @@
          * @param string $view
          * @param \Illuminate\Contracts\Support\Arrayable|array $data
          * @param array $mergeData
-         * @return \Illuminate\Contracts\View\View 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\View\View
+         * @static
+         */
         public static function make($view, $data = [], $mergeData = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13306,10 +13306,10 @@
          * @param array $views
          * @param \Illuminate\Contracts\Support\Arrayable|array $data
          * @param array $mergeData
-         * @return \Illuminate\Contracts\View\View 
+         * @return \Illuminate\Contracts\View\View
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function first($views, $data = [], $mergeData = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13322,9 +13322,9 @@
          * @param string $view
          * @param \Illuminate\Contracts\Support\Arrayable|array $data
          * @param array $mergeData
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function renderWhen($condition, $view, $data = [], $mergeData = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13337,9 +13337,9 @@
          * @param array $data
          * @param string $iterator
          * @param string $empty
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function renderEach($view, $data, $iterator, $empty = 'raw|')
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13349,9 +13349,9 @@
          * Determine if a given view exists.
          *
          * @param string $view
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function exists($view)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13361,10 +13361,10 @@
          * Get the appropriate view engine for the given path.
          *
          * @param string $path
-         * @return \Illuminate\Contracts\View\Engine 
+         * @return \Illuminate\Contracts\View\Engine
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function getEngineFromPath($path)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13375,9 +13375,9 @@
          *
          * @param array|string $key
          * @param mixed|null $value
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function share($key, $value = null)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13386,9 +13386,9 @@
                     /**
          * Increment the rendering counter.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function incrementRender()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13397,9 +13397,9 @@
                     /**
          * Decrement the rendering counter.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function decrementRender()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13408,9 +13408,9 @@
                     /**
          * Check if there are no active render operations.
          *
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function doneRendering()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13420,9 +13420,9 @@
          * Determine if the given once token has been rendered.
          *
          * @param string $id
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasRenderedOnce($id)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13432,9 +13432,9 @@
          * Mark the given once token as having been rendered.
          *
          * @param string $id
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function markAsRenderedOnce($id)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13444,9 +13444,9 @@
          * Add a location to the array of view locations.
          *
          * @param string $location
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addLocation($location)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13457,9 +13457,9 @@
          *
          * @param string $namespace
          * @param string|array $hints
-         * @return \Illuminate\View\Factory 
-         * @static 
-         */ 
+         * @return \Illuminate\View\Factory
+         * @static
+         */
         public static function addNamespace($namespace, $hints)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13470,9 +13470,9 @@
          *
          * @param string $namespace
          * @param string|array $hints
-         * @return \Illuminate\View\Factory 
-         * @static 
-         */ 
+         * @return \Illuminate\View\Factory
+         * @static
+         */
         public static function prependNamespace($namespace, $hints)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13483,9 +13483,9 @@
          *
          * @param string $namespace
          * @param string|array $hints
-         * @return \Illuminate\View\Factory 
-         * @static 
-         */ 
+         * @return \Illuminate\View\Factory
+         * @static
+         */
         public static function replaceNamespace($namespace, $hints)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13497,9 +13497,9 @@
          * @param string $extension
          * @param string $engine
          * @param \Closure|null $resolver
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addExtension($extension, $engine, $resolver = null)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13508,9 +13508,9 @@
                     /**
          * Flush all of the factory state like sections and stacks.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushState()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13519,9 +13519,9 @@
                     /**
          * Flush all of the section contents if done rendering.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushStateIfDoneRendering()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13530,9 +13530,9 @@
                     /**
          * Get the extension to engine bindings.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getExtensions()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13541,9 +13541,9 @@
                     /**
          * Get the engine resolver instance.
          *
-         * @return \Illuminate\View\Engines\EngineResolver 
-         * @static 
-         */ 
+         * @return \Illuminate\View\Engines\EngineResolver
+         * @static
+         */
         public static function getEngineResolver()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13552,9 +13552,9 @@
                     /**
          * Get the view finder instance.
          *
-         * @return \Illuminate\View\ViewFinderInterface 
-         * @static 
-         */ 
+         * @return \Illuminate\View\ViewFinderInterface
+         * @static
+         */
         public static function getFinder()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13564,9 +13564,9 @@
          * Set the view finder instance.
          *
          * @param \Illuminate\View\ViewFinderInterface $finder
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setFinder($finder)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13575,9 +13575,9 @@
                     /**
          * Flush the cache of views located by the finder.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushFinderCache()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13586,9 +13586,9 @@
                     /**
          * Get the event dispatcher instance.
          *
-         * @return \Illuminate\Contracts\Events\Dispatcher 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Events\Dispatcher
+         * @static
+         */
         public static function getDispatcher()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13598,9 +13598,9 @@
          * Set the event dispatcher instance.
          *
          * @param \Illuminate\Contracts\Events\Dispatcher $events
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setDispatcher($events)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13609,9 +13609,9 @@
                     /**
          * Get the IoC container instance.
          *
-         * @return \Illuminate\Contracts\Container\Container 
-         * @static 
-         */ 
+         * @return \Illuminate\Contracts\Container\Container
+         * @static
+         */
         public static function getContainer()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13621,9 +13621,9 @@
          * Set the IoC container instance.
          *
          * @param \Illuminate\Contracts\Container\Container $container
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function setContainer($container)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13634,9 +13634,9 @@
          *
          * @param string $key
          * @param mixed $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function shared($key, $default = null)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13645,9 +13645,9 @@
                     /**
          * Get all of the shared data for the environment.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getShared()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13658,9 +13658,9 @@
          *
          * @param string $name
          * @param object|callable $macro
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function macro($name, $macro)
         {
                         \Illuminate\View\Factory::macro($name, $macro);
@@ -13670,10 +13670,10 @@
          *
          * @param object $mixin
          * @param bool $replace
-         * @return void 
+         * @return void
          * @throws \ReflectionException
-         * @static 
-         */ 
+         * @static
+         */
         public static function mixin($mixin, $replace = true)
         {
                         \Illuminate\View\Factory::mixin($mixin, $replace);
@@ -13682,9 +13682,9 @@
          * Checks if macro is registered.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasMacro($name)
         {
                         return \Illuminate\View\Factory::hasMacro($name);
@@ -13694,9 +13694,9 @@
          *
          * @param \Illuminate\View\View|\Closure|string $view
          * @param array $data
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function startComponent($view, $data = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13707,9 +13707,9 @@
          *
          * @param array $names
          * @param array $data
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function startComponentFirst($names, $data = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13718,9 +13718,9 @@
                     /**
          * Render the current component.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function renderComponent()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13731,9 +13731,9 @@
          *
          * @param string $name
          * @param string|null $content
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function slot($name, $content = null)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13742,9 +13742,9 @@
                     /**
          * Save the slot content for rendering.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function endSlot()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13755,9 +13755,9 @@
          *
          * @param array|string $views
          * @param \Closure|string $callback
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function creator($views, $callback)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13767,9 +13767,9 @@
          * Register multiple view composers via an array.
          *
          * @param array $composers
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function composers($composers)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13780,9 +13780,9 @@
          *
          * @param array|string $views
          * @param \Closure|string $callback
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function composer($views, $callback)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13792,9 +13792,9 @@
          * Call the composer for a given view.
          *
          * @param \Illuminate\Contracts\View\View $view
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function callComposer($view)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13804,9 +13804,9 @@
          * Call the creator for a given view.
          *
          * @param \Illuminate\Contracts\View\View $view
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function callCreator($view)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13817,9 +13817,9 @@
          *
          * @param string $section
          * @param string|null $content
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function startSection($section, $content = null)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13830,9 +13830,9 @@
          *
          * @param string $section
          * @param string $content
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function inject($section, $content)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13841,9 +13841,9 @@
                     /**
          * Stop injecting content into a section and return its contents.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function yieldSection()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13853,10 +13853,10 @@
          * Stop injecting content into a section.
          *
          * @param bool $overwrite
-         * @return string 
+         * @return string
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function stopSection($overwrite = false)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13865,10 +13865,10 @@
                     /**
          * Stop injecting content into a section and append it.
          *
-         * @return string 
+         * @return string
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function appendSection()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13879,9 +13879,9 @@
          *
          * @param string $section
          * @param string $default
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function yieldContent($section, $default = '')
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13891,9 +13891,9 @@
          * Get the parent placeholder for the current request.
          *
          * @param string $section
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function parentPlaceholder($section = '')
         {
                         return \Illuminate\View\Factory::parentPlaceholder($section);
@@ -13902,9 +13902,9 @@
          * Check if section exists.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function hasSection($name)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13914,9 +13914,9 @@
          * Check if section does not exist.
          *
          * @param string $name
-         * @return bool 
-         * @static 
-         */ 
+         * @return bool
+         * @static
+         */
         public static function sectionMissing($name)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13927,9 +13927,9 @@
          *
          * @param string $name
          * @param string|null $default
-         * @return mixed 
-         * @static 
-         */ 
+         * @return mixed
+         * @static
+         */
         public static function getSection($name, $default = null)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13938,9 +13938,9 @@
                     /**
          * Get the entire array of sections.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getSections()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13949,9 +13949,9 @@
                     /**
          * Flush all of the sections.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushSections()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13961,9 +13961,9 @@
          * Add new loop to the stack.
          *
          * @param \Countable|array $data
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function addLoop($data)
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13972,9 +13972,9 @@
                     /**
          * Increment the top loop's indices.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function incrementLoopIndices()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13983,9 +13983,9 @@
                     /**
          * Pop a loop from the top of the loop stack.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function popLoop()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -13994,9 +13994,9 @@
                     /**
          * Get an instance of the last loop in the stack.
          *
-         * @return \stdClass|null 
-         * @static 
-         */ 
+         * @return \stdClass|null
+         * @static
+         */
         public static function getLastLoop()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14005,9 +14005,9 @@
                     /**
          * Get the entire loop stack.
          *
-         * @return array 
-         * @static 
-         */ 
+         * @return array
+         * @static
+         */
         public static function getLoopStack()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14018,9 +14018,9 @@
          *
          * @param string $section
          * @param string $content
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function startPush($section, $content = '')
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14029,10 +14029,10 @@
                     /**
          * Stop injecting content into a push section.
          *
-         * @return string 
+         * @return string
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function stopPush()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14043,9 +14043,9 @@
          *
          * @param string $section
          * @param string $content
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function startPrepend($section, $content = '')
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14054,10 +14054,10 @@
                     /**
          * Stop prepending content into a push section.
          *
-         * @return string 
+         * @return string
          * @throws \InvalidArgumentException
-         * @static 
-         */ 
+         * @static
+         */
         public static function stopPrepend()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14068,9 +14068,9 @@
          *
          * @param string $section
          * @param string $default
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function yieldPushContent($section, $default = '')
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14079,9 +14079,9 @@
                     /**
          * Flush all of the stacks.
          *
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function flushStacks()
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14091,9 +14091,9 @@
          * Start a translation block.
          *
          * @param array $replacements
-         * @return void 
-         * @static 
-         */ 
+         * @return void
+         * @static
+         */
         public static function startTranslation($replacements = [])
         {
                         /** @var \Illuminate\View\Factory $instance */
@@ -14102,43 +14102,43 @@
                     /**
          * Render the current translation.
          *
-         * @return string 
-         * @static 
-         */ 
+         * @return string
+         * @static
+         */
         public static function renderTranslation()
         {
                         /** @var \Illuminate\View\Factory $instance */
                         return $instance->renderTranslation();
         }
-         
+
     }
-     
+
 }
 
-    namespace Illuminate\Support { 
+    namespace Illuminate\Support {
             /**
-     * 
+     *
      *
-     */ 
+     */
         class Arr {
-         
+
     }
             /**
-     * 
+     *
      *
-     */ 
+     */
         class Str {
-         
+
     }
-     
+
 }
 
-        namespace Facades\App\Helpers { 
+        namespace Facades\App\Helpers {
             /**
-     * 
+     *
      *
      * @see \App\Helpers\Json
-     */ 
+     */
         class Json {
                     /**
          * Dump data as json (add ?json to URL)
@@ -14146,361 +14146,361 @@
          * @param mixed $data string, array, associative array object
          * @param bool $onlyInDebugMode runs only in debug mode: default = true
          * @version 1.0
-         * @static 
-         */ 
+         * @static
+         */
         public static function dump($data = null, $onlyInDebugMode = true)
         {
                         /** @var \App\Helpers\Json $instance */
                         return $instance->dump($data, $onlyInDebugMode);
         }
-         
+
     }
-     
+
 }
 
-    namespace Facade\Ignition\Facades { 
+    namespace Facade\Ignition\Facades {
             /**
      * Class Flare.
      *
      * @see \Facade\FlareClient\Flare
-     */ 
+     */
         class Flare {
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function register($apiKey, $apiSecret = null, $contextDetector = null, $container = null)
         {
                         return \Facade\FlareClient\Flare::register($apiKey, $apiSecret, $contextDetector, $container);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function getMiddleware()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->getMiddleware();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function registerFlareHandlers()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->registerFlareHandlers();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function registerExceptionHandler()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->registerExceptionHandler();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function registerErrorHandler()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->registerErrorHandler();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function registerMiddleware($callable)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->registerMiddleware($callable);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function getMiddlewares()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->getMiddlewares();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function glow($name, $messageLevel = 'info', $metaData = [])
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->glow($name, $messageLevel, $metaData);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function handleException($throwable)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->handleException($throwable);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function handleError($code, $message, $file = '', $line = 0)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->handleError($code, $message, $file, $line);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function applicationPath($applicationPath)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->applicationPath($applicationPath);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function report($throwable, $callback = null)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->report($throwable, $callback);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function reportMessage($message, $logLevel, $callback = null)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->reportMessage($message, $logLevel, $callback);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function sendTestReport($throwable)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->sendTestReport($throwable);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function reset()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->reset();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function anonymizeIp()
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->anonymizeIp();
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function createReport($throwable)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->createReport($throwable);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function createReportFromMessage($message, $logLevel)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->createReportFromMessage($message, $logLevel);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function stage($stage)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->stage($stage);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function messageLevel($messageLevel)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->messageLevel($messageLevel);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function getGroup($groupName = 'context', $default = [])
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->getGroup($groupName, $default);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function context($key, $value)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->context($key, $value);
         }
                     /**
-         * 
+         *
          *
-         * @static 
-         */ 
+         * @static
+         */
         public static function group($groupName, $properties)
         {
                         /** @var \Facade\FlareClient\Flare $instance */
                         return $instance->group($groupName, $properties);
         }
-         
+
     }
-     
+
 }
 
-    namespace Illuminate\Http { 
+    namespace Illuminate\Http {
             /**
-     * 
+     *
      *
-     */ 
+     */
         class Request {
                     /**
-         * 
+         *
          *
          * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
          * @param array $rules
          * @param mixed $params
-         * @static 
-         */ 
+         * @static
+         */
         public static function validate($rules, ...$params)
         {
                         return \Illuminate\Http\Request::validate($rules, ...$params);
         }
                     /**
-         * 
+         *
          *
          * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestValidation()
          * @param string $errorBag
          * @param array $rules
          * @param mixed $params
-         * @static 
-         */ 
+         * @static
+         */
         public static function validateWithBag($errorBag, $rules, ...$params)
         {
                         return \Illuminate\Http\Request::validateWithBag($errorBag, $rules, ...$params);
         }
                     /**
-         * 
+         *
          *
          * @see \Illuminate\Foundation\Providers\FoundationServiceProvider::registerRequestSignatureValidation()
          * @param mixed $absolute
-         * @static 
-         */ 
+         * @static
+         */
         public static function hasValidSignature($absolute = true)
         {
                         return \Illuminate\Http\Request::hasValidSignature($absolute);
         }
-         
+
     }
-     
+
 }
 
-    namespace Illuminate\Routing { 
+    namespace Illuminate\Routing {
             /**
-     * 
+     *
      *
      * @mixin \Illuminate\Routing\RouteRegistrar
-     */ 
+     */
         class Router {
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::auth()
          * @param mixed $options
-         * @static 
-         */ 
+         * @static
+         */
         public static function auth($options = [])
         {
                         return \Illuminate\Routing\Router::auth($options);
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::resetPassword()
-         * @static 
-         */ 
+         * @static
+         */
         public static function resetPassword()
         {
                         return \Illuminate\Routing\Router::resetPassword();
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::confirmPassword()
-         * @static 
-         */ 
+         * @static
+         */
         public static function confirmPassword()
         {
                         return \Illuminate\Routing\Router::confirmPassword();
         }
                     /**
-         * 
+         *
          *
          * @see \Laravel\Ui\AuthRouteMethods::emailVerification()
-         * @static 
-         */ 
+         * @static
+         */
         public static function emailVerification()
         {
                         return \Illuminate\Routing\Router::emailVerification();
         }
-         
+
     }
-     
+
 }
 
 
-namespace  { 
+namespace  {
             class App extends \Illuminate\Support\Facades\App {}
             class Arr extends \Illuminate\Support\Arr {}
             class Artisan extends \Illuminate\Support\Facades\Artisan {}
@@ -14513,98 +14513,98 @@
             class Cookie extends \Illuminate\Support\Facades\Cookie {}
             class Crypt extends \Illuminate\Support\Facades\Crypt {}
             class DB extends \Illuminate\Support\Facades\DB {}
-            class Eloquent extends \Illuminate\Database\Eloquent\Model {             
+            class Eloquent extends \Illuminate\Database\Eloquent\Model {
                 /**
              * Create and return an un-saved model instance.
              *
              * @param array $attributes
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function make($attributes = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->make($attributes);
             }
-             
+
                 /**
              * Register a new global scope.
              *
              * @param string $identifier
              * @param \Illuminate\Database\Eloquent\Scope|\Closure $scope
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function withGlobalScope($identifier, $scope)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->withGlobalScope($identifier, $scope);
             }
-             
+
                 /**
              * Remove a registered global scope.
              *
              * @param \Illuminate\Database\Eloquent\Scope|string $scope
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function withoutGlobalScope($scope)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->withoutGlobalScope($scope);
             }
-             
+
                 /**
              * Remove all or passed registered global scopes.
              *
              * @param array|null $scopes
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function withoutGlobalScopes($scopes = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->withoutGlobalScopes($scopes);
             }
-             
+
                 /**
              * Get an array of global scopes that were removed from the query.
              *
-             * @return array 
-             * @static 
-             */ 
+             * @return array
+             * @static
+             */
             public static function removedScopes()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->removedScopes();
             }
-             
+
                 /**
              * Add a where clause on the primary key to the query.
              *
              * @param mixed $id
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function whereKey($id)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->whereKey($id);
             }
-             
+
                 /**
              * Add a where clause on the primary key to the query.
              *
              * @param mixed $id
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function whereKeyNot($id)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->whereKeyNot($id);
             }
-             
+
                 /**
              * Add a basic where clause to the query.
              *
@@ -14612,15 +14612,15 @@
              * @param mixed $operator
              * @param mixed $value
              * @param string $boolean
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function where($column, $operator = null, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->where($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add a basic where clause to the query, and return the first result.
              *
@@ -14628,288 +14628,288 @@
              * @param mixed $operator
              * @param mixed $value
              * @param string $boolean
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function firstWhere($column, $operator = null, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->firstWhere($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where" clause to the query.
              *
              * @param \Closure|array|string|\Illuminate\Database\Query\Expression $column
              * @param mixed $operator
              * @param mixed $value
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orWhere($column, $operator = null, $value = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orWhere($column, $operator, $value);
             }
-             
+
                 /**
              * Add an "order by" clause for a timestamp to the query.
              *
              * @param string|\Illuminate\Database\Query\Expression $column
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function latest($column = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->latest($column);
             }
-             
+
                 /**
              * Add an "order by" clause for a timestamp to the query.
              *
              * @param string|\Illuminate\Database\Query\Expression $column
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function oldest($column = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->oldest($column);
             }
-             
+
                 /**
              * Create a collection of models from plain arrays.
              *
              * @param array $items
-             * @return \Illuminate\Database\Eloquent\Collection 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Collection
+             * @static
+             */
             public static function hydrate($items)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->hydrate($items);
             }
-             
+
                 /**
              * Create a collection of models from a raw query.
              *
              * @param string $query
              * @param array $bindings
-             * @return \Illuminate\Database\Eloquent\Collection 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Collection
+             * @static
+             */
             public static function fromQuery($query, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->fromQuery($query, $bindings);
             }
-             
+
                 /**
              * Find a model by its primary key.
              *
              * @param mixed $id
              * @param array $columns
-             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null
+             * @static
+             */
             public static function find($id, $columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->find($id, $columns);
             }
-             
+
                 /**
              * Find multiple models by their primary keys.
              *
              * @param \Illuminate\Contracts\Support\Arrayable|array $ids
              * @param array $columns
-             * @return \Illuminate\Database\Eloquent\Collection 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Collection
+             * @static
+             */
             public static function findMany($ids, $columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->findMany($ids, $columns);
             }
-             
+
                 /**
              * Find a model by its primary key or throw an exception.
              *
              * @param mixed $id
              * @param array $columns
-             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static|static[] 
+             * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static|static[]
              * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
-             * @static 
-             */ 
+             * @static
+             */
             public static function findOrFail($id, $columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->findOrFail($id, $columns);
             }
-             
+
                 /**
              * Find a model by its primary key or return fresh model instance.
              *
              * @param mixed $id
              * @param array $columns
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function findOrNew($id, $columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->findOrNew($id, $columns);
             }
-             
+
                 /**
              * Get the first record matching the attributes or instantiate it.
              *
              * @param array $attributes
              * @param array $values
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function firstOrNew($attributes = [], $values = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->firstOrNew($attributes, $values);
             }
-             
+
                 /**
              * Get the first record matching the attributes or create it.
              *
              * @param array $attributes
              * @param array $values
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function firstOrCreate($attributes, $values = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->firstOrCreate($attributes, $values);
             }
-             
+
                 /**
              * Create or update a record matching the attributes, and fill it with values.
              *
              * @param array $attributes
              * @param array $values
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function updateOrCreate($attributes, $values = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->updateOrCreate($attributes, $values);
             }
-             
+
                 /**
              * Execute the query and get the first result or throw an exception.
              *
              * @param array $columns
-             * @return \Illuminate\Database\Eloquent\Model|static 
+             * @return \Illuminate\Database\Eloquent\Model|static
              * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
-             * @static 
-             */ 
+             * @static
+             */
             public static function firstOrFail($columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->firstOrFail($columns);
             }
-             
+
                 /**
              * Execute the query and get the first result or call a callback.
              *
              * @param \Closure|array $columns
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Model|static|mixed 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static|mixed
+             * @static
+             */
             public static function firstOr($columns = [], $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->firstOr($columns, $callback);
             }
-             
+
                 /**
              * Get a single column's value from the first result of a query.
              *
              * @param string|\Illuminate\Database\Query\Expression $column
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function value($column)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->value($column);
             }
-             
+
                 /**
              * Execute the query as a "select" statement.
              *
              * @param array|string $columns
-             * @return \Illuminate\Database\Eloquent\Collection|static[] 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Collection|static[]
+             * @static
+             */
             public static function get($columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->get($columns);
             }
-             
+
                 /**
              * Get the hydrated models without eager loading.
              *
              * @param array|string $columns
-             * @return \Illuminate\Database\Eloquent\Model[]|static[] 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model[]|static[]
+             * @static
+             */
             public static function getModels($columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->getModels($columns);
             }
-             
+
                 /**
              * Eager load the relationships for the models.
              *
              * @param array $models
-             * @return array 
-             * @static 
-             */ 
+             * @return array
+             * @static
+             */
             public static function eagerLoadRelations($models)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->eagerLoadRelations($models);
             }
-             
+
                 /**
              * Get a lazy collection for the given query.
              *
-             * @return \Illuminate\Support\LazyCollection 
-             * @static 
-             */ 
+             * @return \Illuminate\Support\LazyCollection
+             * @static
+             */
             public static function cursor()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->cursor();
             }
-             
+
                 /**
              * Get an array with the values of a given column.
              *
              * @param string|\Illuminate\Database\Query\Expression $column
              * @param string|null $key
-             * @return \Illuminate\Support\Collection 
-             * @static 
-             */ 
+             * @return \Illuminate\Support\Collection
+             * @static
+             */
             public static function pluck($column, $key = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->pluck($column, $key);
             }
-             
+
                 /**
              * Paginate the given query.
              *
@@ -14917,16 +14917,16 @@
              * @param array $columns
              * @param string $pageName
              * @param int|null $page
-             * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator 
+             * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function paginate($perPage = null, $columns = [], $pageName = 'page', $page = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->paginate($perPage, $columns, $pageName, $page);
             }
-             
+
                 /**
              * Paginate the given query into a simple paginator.
              *
@@ -14934,283 +14934,283 @@
              * @param array $columns
              * @param string $pageName
              * @param int|null $page
-             * @return \Illuminate\Contracts\Pagination\Paginator 
-             * @static 
-             */ 
+             * @return \Illuminate\Contracts\Pagination\Paginator
+             * @static
+             */
             public static function simplePaginate($perPage = null, $columns = [], $pageName = 'page', $page = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->simplePaginate($perPage, $columns, $pageName, $page);
             }
-             
+
                 /**
              * Save a new model and return the instance.
              *
              * @param array $attributes
-             * @return \Illuminate\Database\Eloquent\Model|$this 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|$this
+             * @static
+             */
             public static function create($attributes = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->create($attributes);
             }
-             
+
                 /**
              * Save a new model and return the instance. Allow mass-assignment.
              *
              * @param array $attributes
-             * @return \Illuminate\Database\Eloquent\Model|$this 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|$this
+             * @static
+             */
             public static function forceCreate($attributes)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->forceCreate($attributes);
             }
-             
+
                 /**
              * Register a replacement for the default delete function.
              *
              * @param \Closure $callback
-             * @return void 
-             * @static 
-             */ 
+             * @return void
+             * @static
+             */
             public static function onDelete($callback)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 $instance->onDelete($callback);
             }
-             
+
                 /**
              * Call the given local model scopes.
              *
              * @param array|string $scopes
-             * @return static|mixed 
-             * @static 
-             */ 
+             * @return static|mixed
+             * @static
+             */
             public static function scopes($scopes)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->scopes($scopes);
             }
-             
+
                 /**
              * Apply the scopes to the Eloquent builder instance and return it.
              *
-             * @return static 
-             * @static 
-             */ 
+             * @return static
+             * @static
+             */
             public static function applyScopes()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->applyScopes();
             }
-             
+
                 /**
              * Prevent the specified relations from being eager loaded.
              *
              * @param mixed $relations
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function without($relations)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->without($relations);
             }
-             
+
                 /**
              * Create a new instance of the model being queried.
              *
              * @param array $attributes
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function newModelInstance($attributes = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->newModelInstance($attributes);
             }
-             
+
                 /**
              * Apply query-time casts to the model instance.
              *
              * @param array $casts
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function withCasts($casts)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->withCasts($casts);
             }
-             
+
                 /**
              * Get the underlying query builder instance.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function getQuery()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->getQuery();
             }
-             
+
                 /**
              * Set the underlying query builder instance.
              *
              * @param \Illuminate\Database\Query\Builder $query
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function setQuery($query)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->setQuery($query);
             }
-             
+
                 /**
              * Get a base query builder instance.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function toBase()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->toBase();
             }
-             
+
                 /**
              * Get the relationships being eagerly loaded.
              *
-             * @return array 
-             * @static 
-             */ 
+             * @return array
+             * @static
+             */
             public static function getEagerLoads()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->getEagerLoads();
             }
-             
+
                 /**
              * Set the relationships being eagerly loaded.
              *
              * @param array $eagerLoad
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function setEagerLoads($eagerLoad)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->setEagerLoads($eagerLoad);
             }
-             
+
                 /**
              * Get the model instance being queried.
              *
-             * @return \Illuminate\Database\Eloquent\Model|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|static
+             * @static
+             */
             public static function getModel()
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->getModel();
             }
-             
+
                 /**
              * Set a model instance for the model being queried.
              *
              * @param \Illuminate\Database\Eloquent\Model $model
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function setModel($model)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->setModel($model);
             }
-             
+
                 /**
              * Get the given macro by name.
              *
              * @param string $name
-             * @return \Closure 
-             * @static 
-             */ 
+             * @return \Closure
+             * @static
+             */
             public static function getMacro($name)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->getMacro($name);
             }
-             
+
                 /**
              * Checks if a macro is registered.
              *
              * @param string $name
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function hasMacro($name)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->hasMacro($name);
             }
-             
+
                 /**
              * Get the given global macro by name.
              *
              * @param string $name
-             * @return \Closure 
-             * @static 
-             */ 
+             * @return \Closure
+             * @static
+             */
             public static function getGlobalMacro($name)
             {
                                 return \Illuminate\Database\Eloquent\Builder::getGlobalMacro($name);
             }
-             
+
                 /**
              * Checks if a global macro is registered.
              *
              * @param string $name
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function hasGlobalMacro($name)
             {
                                 return \Illuminate\Database\Eloquent\Builder::hasGlobalMacro($name);
             }
-             
+
                 /**
              * Chunk the results of the query.
              *
              * @param int $count
              * @param callable $callback
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function chunk($count, $callback)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->chunk($count, $callback);
             }
-             
+
                 /**
              * Execute a callback over each item while chunking.
              *
              * @param callable $callback
              * @param int $count
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function each($callback, $count = 1000)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->each($callback, $count);
             }
-             
+
                 /**
              * Chunk the results of a query by comparing IDs.
              *
@@ -15218,15 +15218,15 @@
              * @param callable $callback
              * @param string|null $column
              * @param string|null $alias
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function chunkById($count, $callback, $column = null, $alias = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->chunkById($count, $callback, $column, $alias);
             }
-             
+
                 /**
              * Execute a callback over each item while chunking by ID.
              *
@@ -15234,71 +15234,71 @@
              * @param int $count
              * @param string|null $column
              * @param string|null $alias
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function eachById($callback, $count = 1000, $column = null, $alias = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->eachById($callback, $count, $column, $alias);
             }
-             
+
                 /**
              * Execute the query and get the first result.
              *
              * @param array|string $columns
-             * @return \Illuminate\Database\Eloquent\Model|object|static|null 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Model|object|static|null
+             * @static
+             */
             public static function first($columns = [])
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->first($columns);
             }
-             
+
                 /**
              * Apply the callback's query changes if the given "value" is true.
              *
              * @param mixed $value
              * @param callable $callback
              * @param callable|null $default
-             * @return mixed|$this 
-             * @static 
-             */ 
+             * @return mixed|$this
+             * @static
+             */
             public static function when($value, $callback, $default = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->when($value, $callback, $default);
             }
-             
+
                 /**
              * Pass the query to a given callback.
              *
              * @param callable $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function tap($callback)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->tap($callback);
             }
-             
+
                 /**
              * Apply the callback's query changes if the given "value" is false.
              *
              * @param mixed $value
              * @param callable $callback
              * @param callable|null $default
-             * @return mixed|$this 
-             * @static 
-             */ 
+             * @return mixed|$this
+             * @static
+             */
             public static function unless($value, $callback, $default = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->unless($value, $callback, $default);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query.
              *
@@ -15307,59 +15307,59 @@
              * @param int $count
              * @param string $boolean
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
+             * @return \Illuminate\Database\Eloquent\Builder|static
              * @throws \RuntimeException
-             * @static 
-             */ 
+             * @static
+             */
             public static function has($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->has($relation, $operator, $count, $boolean, $callback);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query with an "or".
              *
              * @param string $relation
              * @param string $operator
              * @param int $count
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orHas($relation, $operator = '>=', $count = 1)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orHas($relation, $operator, $count);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query.
              *
              * @param string $relation
              * @param string $boolean
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function doesntHave($relation, $boolean = 'and', $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->doesntHave($relation, $boolean, $callback);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query with an "or".
              *
              * @param string $relation
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orDoesntHave($relation)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orDoesntHave($relation);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query with where clauses.
              *
@@ -15367,15 +15367,15 @@
              * @param \Closure|null $callback
              * @param string $operator
              * @param int $count
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function whereHas($relation, $callback = null, $operator = '>=', $count = 1)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->whereHas($relation, $callback, $operator, $count);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query with where clauses and an "or".
              *
@@ -15383,43 +15383,43 @@
              * @param \Closure|null $callback
              * @param string $operator
              * @param int $count
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orWhereHas($relation, $callback = null, $operator = '>=', $count = 1)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orWhereHas($relation, $callback, $operator, $count);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query with where clauses.
              *
              * @param string $relation
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function whereDoesntHave($relation, $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->whereDoesntHave($relation, $callback);
             }
-             
+
                 /**
              * Add a relationship count / exists condition to the query with where clauses and an "or".
              *
              * @param string $relation
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orWhereDoesntHave($relation, $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orWhereDoesntHave($relation, $callback);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query.
              *
@@ -15429,15 +15429,15 @@
              * @param int $count
              * @param string $boolean
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function hasMorph($relation, $types, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->hasMorph($relation, $types, $operator, $count, $boolean, $callback);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query with an "or".
              *
@@ -15445,15 +15445,15 @@
              * @param string|array $types
              * @param string $operator
              * @param int $count
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orHasMorph($relation, $types, $operator = '>=', $count = 1)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orHasMorph($relation, $types, $operator, $count);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query.
              *
@@ -15461,29 +15461,29 @@
              * @param string|array $types
              * @param string $boolean
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function doesntHaveMorph($relation, $types, $boolean = 'and', $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->doesntHaveMorph($relation, $types, $boolean, $callback);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query with an "or".
              *
              * @param string $relation
              * @param string|array $types
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orDoesntHaveMorph($relation, $types)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orDoesntHaveMorph($relation, $types);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query with where clauses.
              *
@@ -15492,15 +15492,15 @@
              * @param \Closure|null $callback
              * @param string $operator
              * @param int $count
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function whereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->whereHasMorph($relation, $types, $callback, $operator, $count);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query with where clauses and an "or".
              *
@@ -15509,181 +15509,181 @@
              * @param \Closure|null $callback
              * @param string $operator
              * @param int $count
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orWhereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orWhereHasMorph($relation, $types, $callback, $operator, $count);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query with where clauses.
              *
              * @param string $relation
              * @param string|array $types
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function whereDoesntHaveMorph($relation, $types, $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->whereDoesntHaveMorph($relation, $types, $callback);
             }
-             
+
                 /**
              * Add a polymorphic relationship count / exists condition to the query with where clauses and an "or".
              *
              * @param string $relation
              * @param string|array $types
              * @param \Closure|null $callback
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function orWhereDoesntHaveMorph($relation, $types, $callback = null)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->orWhereDoesntHaveMorph($relation, $types, $callback);
             }
-             
+
                 /**
              * Add subselect queries to count the relations.
              *
              * @param mixed $relations
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function withCount($relations)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->withCount($relations);
             }
-             
+
                 /**
              * Merge the where constraints from another query to the current query.
              *
              * @param \Illuminate\Database\Eloquent\Builder $from
-             * @return \Illuminate\Database\Eloquent\Builder|static 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Eloquent\Builder|static
+             * @static
+             */
             public static function mergeConstraintsFrom($from)
             {
                                 /** @var \Illuminate\Database\Eloquent\Builder $instance */
                                 return $instance->mergeConstraintsFrom($from);
             }
-             
+
                 /**
              * Set the columns to be selected.
              *
              * @param array|mixed $columns
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function select($columns = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->select($columns);
             }
-             
+
                 /**
              * Add a subselect expression to the query.
              *
              * @param \Closure|$this|string $query
              * @param string $as
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function selectSub($query, $as)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->selectSub($query, $as);
             }
-             
+
                 /**
              * Add a new "raw" select expression to the query.
              *
              * @param string $expression
              * @param array $bindings
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function selectRaw($expression, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->selectRaw($expression, $bindings);
             }
-             
+
                 /**
              * Makes "from" fetch from a subquery.
              *
              * @param \Closure|\Illuminate\Database\Query\Builder|string $query
              * @param string $as
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function fromSub($query, $as)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->fromSub($query, $as);
             }
-             
+
                 /**
              * Add a raw from clause to the query.
              *
              * @param string $expression
              * @param mixed $bindings
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function fromRaw($expression, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->fromRaw($expression, $bindings);
             }
-             
+
                 /**
              * Add a new select column to the query.
              *
              * @param array|mixed $column
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function addSelect($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->addSelect($column);
             }
-             
+
                 /**
              * Force the query to only return distinct results.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function distinct()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->distinct();
             }
-             
+
                 /**
              * Set the table which the query is targeting.
              *
              * @param \Closure|\Illuminate\Database\Query\Builder|string $table
              * @param string|null $as
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function from($table, $as = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->from($table, $as);
             }
-             
+
                 /**
              * Add a join clause to the query.
              *
@@ -15693,15 +15693,15 @@
              * @param string|null $second
              * @param string $type
              * @param bool $where
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->join($table, $first, $operator, $second, $type, $where);
             }
-             
+
                 /**
              * Add a "join where" clause to the query.
              *
@@ -15710,15 +15710,15 @@
              * @param string $operator
              * @param string $second
              * @param string $type
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function joinWhere($table, $first, $operator, $second, $type = 'inner')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->joinWhere($table, $first, $operator, $second, $type);
             }
-             
+
                 /**
              * Add a subquery join clause to the query.
              *
@@ -15729,16 +15729,16 @@
              * @param string|null $second
              * @param string $type
              * @param bool $where
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->joinSub($query, $as, $first, $operator, $second, $type, $where);
             }
-             
+
                 /**
              * Add a left join to the query.
              *
@@ -15746,15 +15746,15 @@
              * @param \Closure|string $first
              * @param string|null $operator
              * @param string|null $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function leftJoin($table, $first, $operator = null, $second = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->leftJoin($table, $first, $operator, $second);
             }
-             
+
                 /**
              * Add a "join where" clause to the query.
              *
@@ -15762,15 +15762,15 @@
              * @param \Closure|string $first
              * @param string $operator
              * @param string $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function leftJoinWhere($table, $first, $operator, $second)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->leftJoinWhere($table, $first, $operator, $second);
             }
-             
+
                 /**
              * Add a subquery left join to the query.
              *
@@ -15779,15 +15779,15 @@
              * @param \Closure|string $first
              * @param string|null $operator
              * @param string|null $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function leftJoinSub($query, $as, $first, $operator = null, $second = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->leftJoinSub($query, $as, $first, $operator, $second);
             }
-             
+
                 /**
              * Add a right join to the query.
              *
@@ -15795,15 +15795,15 @@
              * @param \Closure|string $first
              * @param string|null $operator
              * @param string|null $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function rightJoin($table, $first, $operator = null, $second = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->rightJoin($table, $first, $operator, $second);
             }
-             
+
                 /**
              * Add a "right join where" clause to the query.
              *
@@ -15811,15 +15811,15 @@
              * @param \Closure|string $first
              * @param string $operator
              * @param string $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function rightJoinWhere($table, $first, $operator, $second)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->rightJoinWhere($table, $first, $operator, $second);
             }
-             
+
                 /**
              * Add a subquery right join to the query.
              *
@@ -15828,15 +15828,15 @@
              * @param \Closure|string $first
              * @param string|null $operator
              * @param string|null $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function rightJoinSub($query, $as, $first, $operator = null, $second = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->rightJoinSub($query, $as, $first, $operator, $second);
             }
-             
+
                 /**
              * Add a "cross join" clause to the query.
              *
@@ -15844,45 +15844,45 @@
              * @param \Closure|string|null $first
              * @param string|null $operator
              * @param string|null $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function crossJoin($table, $first = null, $operator = null, $second = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->crossJoin($table, $first, $operator, $second);
             }
-             
+
                 /**
              * Merge an array of where clauses and bindings.
              *
              * @param array $wheres
              * @param array $bindings
-             * @return void 
-             * @static 
-             */ 
+             * @return void
+             * @static
+             */
             public static function mergeWheres($wheres, $bindings)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 $instance->mergeWheres($wheres, $bindings);
             }
-             
+
                 /**
              * Prepare the value and operator for a where clause.
              *
              * @param string $value
              * @param string $operator
              * @param bool $useDefault
-             * @return array 
+             * @return array
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function prepareValueAndOperator($value, $operator, $useDefault = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->prepareValueAndOperator($value, $operator, $useDefault);
             }
-             
+
                 /**
              * Add a "where" clause comparing two columns to the query.
              *
@@ -15890,59 +15890,59 @@
              * @param string|null $operator
              * @param string|null $second
              * @param string|null $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereColumn($first, $operator = null, $second = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereColumn($first, $operator, $second, $boolean);
             }
-             
+
                 /**
              * Add an "or where" clause comparing two columns to the query.
              *
              * @param string|array $first
              * @param string|null $operator
              * @param string|null $second
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereColumn($first, $operator = null, $second = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereColumn($first, $operator, $second);
             }
-             
+
                 /**
              * Add a raw where clause to the query.
              *
              * @param string $sql
              * @param mixed $bindings
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereRaw($sql, $bindings = [], $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereRaw($sql, $bindings, $boolean);
             }
-             
+
                 /**
              * Add a raw or where clause to the query.
              *
              * @param string $sql
              * @param mixed $bindings
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereRaw($sql, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereRaw($sql, $bindings);
             }
-             
+
                 /**
              * Add a "where in" clause to the query.
              *
@@ -15950,58 +15950,58 @@
              * @param mixed $values
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereIn($column, $values, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereIn($column, $values, $boolean, $not);
             }
-             
+
                 /**
              * Add an "or where in" clause to the query.
              *
              * @param string $column
              * @param mixed $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereIn($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereIn($column, $values);
             }
-             
+
                 /**
              * Add a "where not in" clause to the query.
              *
              * @param string $column
              * @param mixed $values
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNotIn($column, $values, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNotIn($column, $values, $boolean);
             }
-             
+
                 /**
              * Add an "or where not in" clause to the query.
              *
              * @param string $column
              * @param mixed $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereNotIn($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereNotIn($column, $values);
             }
-             
+
                 /**
              * Add a "where in raw" clause for integer values to the query.
              *
@@ -16009,100 +16009,100 @@
              * @param \Illuminate\Contracts\Support\Arrayable|array $values
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereIntegerInRaw($column, $values, $boolean, $not);
             }
-             
+
                 /**
              * Add an "or where in raw" clause for integer values to the query.
              *
              * @param string $column
              * @param \Illuminate\Contracts\Support\Arrayable|array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereIntegerInRaw($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereIntegerInRaw($column, $values);
             }
-             
+
                 /**
              * Add a "where not in raw" clause for integer values to the query.
              *
              * @param string $column
              * @param \Illuminate\Contracts\Support\Arrayable|array $values
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereIntegerNotInRaw($column, $values, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereIntegerNotInRaw($column, $values, $boolean);
             }
-             
+
                 /**
              * Add an "or where not in raw" clause for integer values to the query.
              *
              * @param string $column
              * @param \Illuminate\Contracts\Support\Arrayable|array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereIntegerNotInRaw($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereIntegerNotInRaw($column, $values);
             }
-             
+
                 /**
              * Add a "where null" clause to the query.
              *
              * @param string|array $columns
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNull($columns, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNull($columns, $boolean, $not);
             }
-             
+
                 /**
              * Add an "or where null" clause to the query.
              *
              * @param string $column
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereNull($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereNull($column);
             }
-             
+
                 /**
              * Add a "where not null" clause to the query.
              *
              * @param string|array $columns
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNotNull($columns, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNotNull($columns, $boolean);
             }
-             
+
                 /**
              * Add a where between statement to the query.
              *
@@ -16110,15 +16110,15 @@
              * @param array $values
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereBetween($column, $values, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereBetween($column, $values, $boolean, $not);
             }
-             
+
                 /**
              * Add a where between statement using columns to the query.
              *
@@ -16126,114 +16126,114 @@
              * @param array $values
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereBetweenColumns($column, $values, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereBetweenColumns($column, $values, $boolean, $not);
             }
-             
+
                 /**
              * Add an or where between statement to the query.
              *
              * @param string $column
              * @param array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereBetween($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereBetween($column, $values);
             }
-             
+
                 /**
              * Add an or where between statement using columns to the query.
              *
              * @param string $column
              * @param array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereBetweenColumns($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereBetweenColumns($column, $values);
             }
-             
+
                 /**
              * Add a where not between statement to the query.
              *
              * @param string $column
              * @param array $values
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNotBetween($column, $values, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNotBetween($column, $values, $boolean);
             }
-             
+
                 /**
              * Add a where not between statement using columns to the query.
              *
              * @param string $column
              * @param array $values
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNotBetweenColumns($column, $values, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNotBetweenColumns($column, $values, $boolean);
             }
-             
+
                 /**
              * Add an or where not between statement to the query.
              *
              * @param string $column
              * @param array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereNotBetween($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereNotBetween($column, $values);
             }
-             
+
                 /**
              * Add an or where not between statement using columns to the query.
              *
              * @param string $column
              * @param array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereNotBetweenColumns($column, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereNotBetweenColumns($column, $values);
             }
-             
+
                 /**
              * Add an "or where not null" clause to the query.
              *
              * @param string $column
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereNotNull($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereNotNull($column);
             }
-             
+
                 /**
              * Add a "where date" statement to the query.
              *
@@ -16241,30 +16241,30 @@
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereDate($column, $operator, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereDate($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where date" statement to the query.
              *
              * @param string $column
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereDate($column, $operator, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereDate($column, $operator, $value);
             }
-             
+
                 /**
              * Add a "where time" statement to the query.
              *
@@ -16272,30 +16272,30 @@
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereTime($column, $operator, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereTime($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where time" statement to the query.
              *
              * @param string $column
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereTime($column, $operator, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereTime($column, $operator, $value);
             }
-             
+
                 /**
              * Add a "where day" statement to the query.
              *
@@ -16303,30 +16303,30 @@
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereDay($column, $operator, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereDay($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where day" statement to the query.
              *
              * @param string $column
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereDay($column, $operator, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereDay($column, $operator, $value);
             }
-             
+
                 /**
              * Add a "where month" statement to the query.
              *
@@ -16334,30 +16334,30 @@
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereMonth($column, $operator, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereMonth($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where month" statement to the query.
              *
              * @param string $column
              * @param string $operator
              * @param \DateTimeInterface|string|null $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereMonth($column, $operator, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereMonth($column, $operator, $value);
             }
-             
+
                 /**
              * Add a "where year" statement to the query.
              *
@@ -16365,141 +16365,141 @@
              * @param string $operator
              * @param \DateTimeInterface|string|int|null $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereYear($column, $operator, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereYear($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where year" statement to the query.
              *
              * @param string $column
              * @param string $operator
              * @param \DateTimeInterface|string|int|null $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereYear($column, $operator, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereYear($column, $operator, $value);
             }
-             
+
                 /**
              * Add a nested where statement to the query.
              *
              * @param \Closure $callback
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNested($callback, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNested($callback, $boolean);
             }
-             
+
                 /**
              * Create a new query instance for nested where condition.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function forNestedWhere()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->forNestedWhere();
             }
-             
+
                 /**
              * Add another query builder as a nested where to the query builder.
              *
              * @param \Illuminate\Database\Query\Builder $query
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function addNestedWhereQuery($query, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->addNestedWhereQuery($query, $boolean);
             }
-             
+
                 /**
              * Add an exists clause to the query.
              *
              * @param \Closure $callback
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereExists($callback, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereExists($callback, $boolean, $not);
             }
-             
+
                 /**
              * Add an or exists clause to the query.
              *
              * @param \Closure $callback
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereExists($callback, $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereExists($callback, $not);
             }
-             
+
                 /**
              * Add a where not exists clause to the query.
              *
              * @param \Closure $callback
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereNotExists($callback, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereNotExists($callback, $boolean);
             }
-             
+
                 /**
              * Add a where not exists clause to the query.
              *
              * @param \Closure $callback
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereNotExists($callback)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereNotExists($callback);
             }
-             
+
                 /**
              * Add an exists clause to the query.
              *
              * @param \Illuminate\Database\Query\Builder $query
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function addWhereExistsQuery($query, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->addWhereExistsQuery($query, $boolean, $not);
             }
-             
+
                 /**
              * Adds a where condition using row values.
              *
@@ -16507,31 +16507,31 @@
              * @param string $operator
              * @param array $values
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function whereRowValues($columns, $operator, $values, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereRowValues($columns, $operator, $values, $boolean);
             }
-             
+
                 /**
              * Adds an or where condition using row values.
              *
              * @param array $columns
              * @param string $operator
              * @param array $values
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereRowValues($columns, $operator, $values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereRowValues($columns, $operator, $values);
             }
-             
+
                 /**
              * Add a "where JSON contains" clause to the query.
              *
@@ -16539,58 +16539,58 @@
              * @param mixed $value
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereJsonContains($column, $value, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereJsonContains($column, $value, $boolean, $not);
             }
-             
+
                 /**
              * Add an "or where JSON contains" clause to the query.
              *
              * @param string $column
              * @param mixed $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereJsonContains($column, $value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereJsonContains($column, $value);
             }
-             
+
                 /**
              * Add a "where JSON not contains" clause to the query.
              *
              * @param string $column
              * @param mixed $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereJsonDoesntContain($column, $value, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereJsonDoesntContain($column, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where JSON not contains" clause to the query.
              *
              * @param string $column
              * @param mixed $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereJsonDoesntContain($column, $value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereJsonDoesntContain($column, $value);
             }
-             
+
                 /**
              * Add a "where JSON length" clause to the query.
              *
@@ -16598,71 +16598,71 @@
              * @param mixed $operator
              * @param mixed $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function whereJsonLength($column, $operator, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->whereJsonLength($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or where JSON length" clause to the query.
              *
              * @param string $column
              * @param mixed $operator
              * @param mixed $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orWhereJsonLength($column, $operator, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orWhereJsonLength($column, $operator, $value);
             }
-             
+
                 /**
              * Handles dynamic "where" clauses to the query.
              *
              * @param string $method
              * @param array $parameters
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function dynamicWhere($method, $parameters)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->dynamicWhere($method, $parameters);
             }
-             
+
                 /**
              * Add a "group by" clause to the query.
              *
              * @param array|string $groups
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function groupBy(...$groups)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->groupBy(...$groups);
             }
-             
+
                 /**
              * Add a raw groupBy clause to the query.
              *
              * @param string $sql
              * @param array $bindings
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function groupByRaw($sql, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->groupByRaw($sql, $bindings);
             }
-             
+
                 /**
              * Add a "having" clause to the query.
              *
@@ -16670,30 +16670,30 @@
              * @param string|null $operator
              * @param string|null $value
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function having($column, $operator = null, $value = null, $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->having($column, $operator, $value, $boolean);
             }
-             
+
                 /**
              * Add an "or having" clause to the query.
              *
              * @param string $column
              * @param string|null $operator
              * @param string|null $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orHaving($column, $operator = null, $value = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orHaving($column, $operator, $value);
             }
-             
+
                 /**
              * Add a "having between " clause to the query.
              *
@@ -16701,750 +16701,750 @@
              * @param array $values
              * @param string $boolean
              * @param bool $not
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function havingBetween($column, $values, $boolean = 'and', $not = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->havingBetween($column, $values, $boolean, $not);
             }
-             
+
                 /**
              * Add a raw having clause to the query.
              *
              * @param string $sql
              * @param array $bindings
              * @param string $boolean
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function havingRaw($sql, $bindings = [], $boolean = 'and')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->havingRaw($sql, $bindings, $boolean);
             }
-             
+
                 /**
              * Add a raw or having clause to the query.
              *
              * @param string $sql
              * @param array $bindings
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orHavingRaw($sql, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orHavingRaw($sql, $bindings);
             }
-             
+
                 /**
              * Add an "order by" clause to the query.
              *
              * @param \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Query\Expression|string $column
              * @param string $direction
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function orderBy($column, $direction = 'asc')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orderBy($column, $direction);
             }
-             
+
                 /**
              * Add a descending "order by" clause to the query.
              *
              * @param string $column
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orderByDesc($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orderByDesc($column);
             }
-             
+
                 /**
              * Put the query's results in random order.
              *
              * @param string $seed
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function inRandomOrder($seed = '')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->inRandomOrder($seed);
             }
-             
+
                 /**
              * Add a raw "order by" clause to the query.
              *
              * @param string $sql
              * @param array $bindings
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function orderByRaw($sql, $bindings = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->orderByRaw($sql, $bindings);
             }
-             
+
                 /**
              * Alias to set the "offset" value of the query.
              *
              * @param int $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function skip($value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->skip($value);
             }
-             
+
                 /**
              * Set the "offset" value of the query.
              *
              * @param int $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function offset($value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->offset($value);
             }
-             
+
                 /**
              * Alias to set the "limit" value of the query.
              *
              * @param int $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function take($value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->take($value);
             }
-             
+
                 /**
              * Set the "limit" value of the query.
              *
              * @param int $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function limit($value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->limit($value);
             }
-             
+
                 /**
              * Set the limit and offset for a given page.
              *
              * @param int $page
              * @param int $perPage
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function forPage($page, $perPage = 15)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->forPage($page, $perPage);
             }
-             
+
                 /**
              * Constrain the query to the previous "page" of results before a given ID.
              *
              * @param int $perPage
              * @param int|null $lastId
              * @param string $column
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->forPageBeforeId($perPage, $lastId, $column);
             }
-             
+
                 /**
              * Constrain the query to the next "page" of results after a given ID.
              *
              * @param int $perPage
              * @param int|null $lastId
              * @param string $column
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->forPageAfterId($perPage, $lastId, $column);
             }
-             
+
                 /**
              * Remove all existing orders and optionally add a new order.
              *
              * @param string|null $column
              * @param string $direction
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function reorder($column = null, $direction = 'asc')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->reorder($column, $direction);
             }
-             
+
                 /**
              * Add a union statement to the query.
              *
              * @param \Illuminate\Database\Query\Builder|\Closure $query
              * @param bool $all
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function union($query, $all = false)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->union($query, $all);
             }
-             
+
                 /**
              * Add a union all statement to the query.
              *
              * @param \Illuminate\Database\Query\Builder|\Closure $query
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function unionAll($query)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->unionAll($query);
             }
-             
+
                 /**
              * Lock the selected rows in the table.
              *
              * @param string|bool $value
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function lock($value = true)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->lock($value);
             }
-             
+
                 /**
              * Lock the selected rows in the table for updating.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function lockForUpdate()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->lockForUpdate();
             }
-             
+
                 /**
              * Share lock the selected rows in the table.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function sharedLock()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->sharedLock();
             }
-             
+
                 /**
              * Get the SQL representation of the query.
              *
-             * @return string 
-             * @static 
-             */ 
+             * @return string
+             * @static
+             */
             public static function toSql()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->toSql();
             }
-             
+
                 /**
              * Get the count of the total records for the paginator.
              *
              * @param array $columns
-             * @return int 
-             * @static 
-             */ 
+             * @return int
+             * @static
+             */
             public static function getCountForPagination($columns = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->getCountForPagination($columns);
             }
-             
+
                 /**
              * Concatenate values of a given column as a string.
              *
              * @param string $column
              * @param string $glue
-             * @return string 
-             * @static 
-             */ 
+             * @return string
+             * @static
+             */
             public static function implode($column, $glue = '')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->implode($column, $glue);
             }
-             
+
                 /**
              * Determine if any rows exist for the current query.
              *
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function exists()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->exists();
             }
-             
+
                 /**
              * Determine if no rows exist for the current query.
              *
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function doesntExist()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->doesntExist();
             }
-             
+
                 /**
              * Execute the given callback if no rows exist for the current query.
              *
              * @param \Closure $callback
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function existsOr($callback)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->existsOr($callback);
             }
-             
+
                 /**
              * Execute the given callback if rows exist for the current query.
              *
              * @param \Closure $callback
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function doesntExistOr($callback)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->doesntExistOr($callback);
             }
-             
+
                 /**
              * Retrieve the "count" result of the query.
              *
              * @param string $columns
-             * @return int 
-             * @static 
-             */ 
+             * @return int
+             * @static
+             */
             public static function count($columns = '*')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->count($columns);
             }
-             
+
                 /**
              * Retrieve the minimum value of a given column.
              *
              * @param string $column
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function min($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->min($column);
             }
-             
+
                 /**
              * Retrieve the maximum value of a given column.
              *
              * @param string $column
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function max($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->max($column);
             }
-             
+
                 /**
              * Retrieve the sum of the values of a given column.
              *
              * @param string $column
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function sum($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->sum($column);
             }
-             
+
                 /**
              * Retrieve the average of the values of a given column.
              *
              * @param string $column
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function avg($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->avg($column);
             }
-             
+
                 /**
              * Alias for the "avg" method.
              *
              * @param string $column
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function average($column)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->average($column);
             }
-             
+
                 /**
              * Execute an aggregate function on the database.
              *
              * @param string $function
              * @param array $columns
-             * @return mixed 
-             * @static 
-             */ 
+             * @return mixed
+             * @static
+             */
             public static function aggregate($function, $columns = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->aggregate($function, $columns);
             }
-             
+
                 /**
              * Execute a numeric aggregate function on the database.
              *
              * @param string $function
              * @param array $columns
-             * @return float|int 
-             * @static 
-             */ 
+             * @return float|int
+             * @static
+             */
             public static function numericAggregate($function, $columns = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->numericAggregate($function, $columns);
             }
-             
+
                 /**
              * Insert a new record into the database.
              *
              * @param array $values
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function insert($values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->insert($values);
             }
-             
+
                 /**
              * Insert a new record into the database while ignoring errors.
              *
              * @param array $values
-             * @return int 
-             * @static 
-             */ 
+             * @return int
+             * @static
+             */
             public static function insertOrIgnore($values)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->insertOrIgnore($values);
             }
-             
+
                 /**
              * Insert a new record and get the value of the primary key.
              *
              * @param array $values
              * @param string|null $sequence
-             * @return int 
-             * @static 
-             */ 
+             * @return int
+             * @static
+             */
             public static function insertGetId($values, $sequence = null)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->insertGetId($values, $sequence);
             }
-             
+
                 /**
              * Insert new records into the table using a subquery.
              *
              * @param array $columns
              * @param \Closure|\Illuminate\Database\Query\Builder|string $query
-             * @return int 
-             * @static 
-             */ 
+             * @return int
+             * @static
+             */
             public static function insertUsing($columns, $query)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->insertUsing($columns, $query);
             }
-             
+
                 /**
              * Insert or update a record matching the attributes, and fill it with values.
              *
              * @param array $attributes
              * @param array $values
-             * @return bool 
-             * @static 
-             */ 
+             * @return bool
+             * @static
+             */
             public static function updateOrInsert($attributes, $values = [])
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->updateOrInsert($attributes, $values);
             }
-             
+
                 /**
              * Run a truncate statement on the table.
              *
-             * @return void 
-             * @static 
-             */ 
+             * @return void
+             * @static
+             */
             public static function truncate()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 $instance->truncate();
             }
-             
+
                 /**
              * Create a raw database expression.
              *
              * @param mixed $value
-             * @return \Illuminate\Database\Query\Expression 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Expression
+             * @static
+             */
             public static function raw($value)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->raw($value);
             }
-             
+
                 /**
              * Get the current query value bindings in a flattened array.
              *
-             * @return array 
-             * @static 
-             */ 
+             * @return array
+             * @static
+             */
             public static function getBindings()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->getBindings();
             }
-             
+
                 /**
              * Get the raw array of bindings.
              *
-             * @return array 
-             * @static 
-             */ 
+             * @return array
+             * @static
+             */
             public static function getRawBindings()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->getRawBindings();
             }
-             
+
                 /**
              * Set the bindings on the query builder.
              *
              * @param array $bindings
              * @param string $type
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function setBindings($bindings, $type = 'where')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->setBindings($bindings, $type);
             }
-             
+
                 /**
              * Add a binding to the query.
              *
              * @param mixed $value
              * @param string $type
-             * @return \Illuminate\Database\Query\Builder 
+             * @return \Illuminate\Database\Query\Builder
              * @throws \InvalidArgumentException
-             * @static 
-             */ 
+             * @static
+             */
             public static function addBinding($value, $type = 'where')
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->addBinding($value, $type);
             }
-             
+
                 /**
              * Merge an array of bindings into our bindings.
              *
              * @param \Illuminate\Database\Query\Builder $query
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function mergeBindings($query)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->mergeBindings($query);
             }
-             
+
                 /**
              * Get the database query processor instance.
              *
-             * @return \Illuminate\Database\Query\Processors\Processor 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Processors\Processor
+             * @static
+             */
             public static function getProcessor()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->getProcessor();
             }
-             
+
                 /**
              * Get the query grammar instance.
              *
-             * @return \Illuminate\Database\Query\Grammars\Grammar 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Grammars\Grammar
+             * @static
+             */
             public static function getGrammar()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->getGrammar();
             }
-             
+
                 /**
              * Use the write pdo for query.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function useWritePdo()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->useWritePdo();
             }
-             
+
                 /**
              * Clone the query without the given properties.
              *
              * @param array $properties
-             * @return static 
-             * @static 
-             */ 
+             * @return static
+             * @static
+             */
             public static function cloneWithout($properties)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->cloneWithout($properties);
             }
-             
+
                 /**
              * Clone the query without the given bindings.
              *
              * @param array $except
-             * @return static 
-             * @static 
-             */ 
+             * @return static
+             * @static
+             */
             public static function cloneWithoutBindings($except)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->cloneWithoutBindings($except);
             }
-             
+
                 /**
              * Dump the current SQL and bindings.
              *
-             * @return \Illuminate\Database\Query\Builder 
-             * @static 
-             */ 
+             * @return \Illuminate\Database\Query\Builder
+             * @static
+             */
             public static function dump()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 return $instance->dump();
             }
-             
+
                 /**
              * Die and dump the current SQL and bindings.
              *
-             * @return void 
-             * @static 
-             */ 
+             * @return void
+             * @static
+             */
             public static function dd()
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
                                 $instance->dd();
             }
-             
+
                 /**
              * Register a custom macro.
              *
              * @param string $name
              * @param object|callable $macro
-             * @return void 
-             * @static 
-             */ 
+             * @return void
+             * @static
+             */
             public static function macro($name, $macro)
             {
                                 \Illuminate\Database\Query\Builder::macro($name, $macro);
             }
-             
+
                 /**
              * Mix another object into the class.
              *
              * @param object $mixin
              * @param bool $replace
-             * @return void 
+             * @return void
              * @throws \ReflectionException
-             * @static 
-             */ 
+             * @static
+             */
             public static function mixin($mixin, $replace = true)
             {
                                 \Illuminate\Database\Query\Builder::mixin($mixin, $replace);
             }
-             
+
                 /**
              * Dynamically handle calls to the class.
              *
              * @param string $method
              * @param array $parameters
-             * @return mixed 
+             * @return mixed
              * @throws \BadMethodCallException
-             * @static 
-             */ 
+             * @static
+             */
             public static function macroCall($method, $parameters)
             {
                                 /** @var \Illuminate\Database\Query\Builder $instance */
@@ -17475,7 +17475,7 @@
             class View extends \Illuminate\Support\Facades\View {}
             class Json extends \Facades\App\Helpers\Json {}
             class Flare extends \Facade\Ignition\Facades\Flare {}
-     
+
 }
 
 
Index: app/Bedrijf.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App;\r\n\r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n\r\nclass Bedrijf extends Model\r\n{\r\n    public function users()\r\n    {\r\n        return $this->hasMany('App\\User');\r\n    }\r\n\r\n    public function nummerplaats()\r\n    {\r\n        return $this->hasMany('App\\Nummerplaat');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/Bedrijf.php	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ app/Bedrijf.php	(date 1611306292931)
@@ -6,6 +6,7 @@
 
 class Bedrijf extends Model
 {
+
     public function users()
     {
         return $this->hasMany('App\User');
Index: .styleci.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>php:\r\n  preset: laravel\r\n  disabled:\r\n    - unused_use\r\n  finder:\r\n    not-name:\r\n      - index.php\r\n      - server.php\r\njs:\r\n  finder:\r\n    not-name:\r\n      - webpack.mix.js\r\ncss: true\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .styleci.yml	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ .styleci.yml	(date 1611306292954)
@@ -4,7 +4,7 @@
     - unused_use
   finder:
     not-name:
-      - index.php
+      - index.blade.php
       - server.php
 js:
   finder:
Index: resources/views/admin/bedrijven/index.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources/views/admin/bedrijven/index.blade.php	(date 1611310279109)
+++ resources/views/admin/bedrijven/index.blade.php	(date 1611310279109)
@@ -0,0 +1,172 @@
+@extends('layouts.template')
+
+@section('main')
+<div class="row justify-content-around">
+    <h1>Bedrijven</h1>
+    <p>
+        <a href="#!" class="btn btn-outline-success" id="btn-create">
+            <i class="fas fa-plus-circle mr-1"></i>Bedrijf toevoegen
+        </a>
+    </p>
+</div>
+        <hr>
+    @auth
+        @if(auth()->user()->isAdmin or auth()->user()->isReceptionist)
+<div class="row">
+    <div class="table-responsive col-12">
+        <table class="table">
+            <thead>
+            <tr>
+                <th>Bedrijf</th>
+                <th>Standaard wachtwoord</th>
+                <th>Nummerplaten</th>
+                <th>Bewerken</th>
+            </tr>
+            </thead>
+            <tbody>
+
+            </tbody>
+        </table>
+    </div>
+    @endif
+    @endauth
+    @include('admin.bedrijven.modal')
+
+    @endsection
+
+
+    @section('script_after')
+        <script>
+            $(function () {
+                loadTable();
+            });
+            //Laad bedrijven met AJAX
+            function loadTable() {
+                $.getJSON('/admin/qryBedrijven')
+                    .done(function (data) {
+
+                        // Clear tbody tag
+                        $('tbody').empty();
+
+                        // Loop over each item in the array
+                        $.each(data, function (key, value) {
+
+
+                            let tr = `<tr class="">
+                               <td>${value.bedrijfsnaam}</td>
+                               <td>${value.standaardWachtwoord}</td>
+                               <td>${value.plaatcombinatie}</td>
+
+                              <td data-id="${value.id}"
+                                   data-voornaam="${value.voornaam}"
+                                   data-naam="${value.naam}"
+                                   data-email="${value.email}">
+                                    <div class="btn-group btn-group-sm">
+                                        <a href="#!" class="btn btn-outline-success btn-edit">
+                                            <i class="fas fa-edit"></i>
+                                        </a>
+                                        <a href="#!" class="btn btn-outline-danger btn-delete">
+                                            <i class="fas fa-trash"></i>
+                                        </a>
+                                    </div>
+                               </td>
+
+                           </tr>`;
+
+                            // Append row to tbody
+                            $('tbody').append(tr);
+                        });
+                    })
+                    .fail(function (e) {
+                        console.log('error', e);
+
+                    });
+            }
+
+            //Bedrijf verwijderen
+
+            $('tbody').on('click', '.btn-delete', function () {
+                // Get data attributes from td tag
+                let id = $(this).closest('td').data('id');
+                let bedrijfsnaam = $(this).closest('td').data('bedrijfsnaam');
+                let standaardWachtwoord = $(this).closest('td').data('standaardWachtwoord');
+
+                // Set some values for Noty
+                let text = `<p>Wil je het bedrijf <b>${bedrijfsnaam}</b> verwijderen?</p>`;
+                let type = 'warning';
+                let btnText = 'Verwijder bedrijf';
+                let btnClass = 'btn-success';
+
+                // Show Noty
+                let modal = new Noty({
+                    type: type,
+                    text: text,
+                    buttons: [
+                        Noty.button(btnText, `btn ${btnClass}`, function () {
+                            deleteBedrijf(id);
+                            modal.close();
+                        }),
+                        Noty.button('Annuleer', 'btn btn-secondary ml-2', function () {
+                            modal.close();
+                        })
+                    ]
+                }).show();
+            });
+
+            //functie Bedrijf verwijderen
+            function deleteBedrijf(id) {
+                let pars = {
+                    '_token': '{{ csrf_token() }}',
+                    '_method': 'delete'
+                };
+                $.post(`/admin/bedrijven/${id}`, pars, 'json')
+                    .done(function (data) {
+                        console.log('data', data);
+
+                        Project2d.toast({
+                            type: data.type,    // optional because the default type is 'success'
+                            text: data.text
+                        });
+                        // Rebuild the table
+                        loadTable();
+                    })
+                    .fail(function (e) {
+                        console.log('error', e);
+                    });
+            }
+
+            //Bedrijf bewerken
+
+            $('tbody').on('click', '.btn-edit', function () {
+                // Get data attributes from td tag
+                let id = $(this).closest('td').data('id');
+                let bedrijfsnaam = $(this).closest('td').data('bedrijfsnaam');
+                let standaardWachtwoord = $(this).closest('td').data('standaardWachtwoord');
+                // Update the modal
+                $('.modal-title').text(`Edit ${bedrijfsnaam}`);
+                $('form').attr('action', `/admin/bedrijven/${id}`);
+
+                $('#bedrijfsnaam').val(bedrijfsnaam);
+                $('#standaardWachtwoord').val(standaardWachtwoord);
+                $('input[name="_method"]').val('put');
+
+                // Show the modal
+                $('#modal-bedrijven').modal('show');
+            });
+
+            //Bedrijf toevoegen
+            $('#btn-create').click(function () {
+                // Update the modal
+                $('.modal-title').text(`Bedrijf toevoegen`);
+                $('form').attr('action', `/admin/bedrijven`);
+
+                $('#bedrijfsnaam').val();
+                $('#standaardWachtwoord').val();
+
+                $('input[name="_method"]').val('post');
+                // Show the modal
+                $('#modal-bedrijven').modal('show');
+            });
+
+        </script>
+@endsection
Index: resources/views/shared/navigation.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><nav class=\"navbar navbar-expand-md shadow-sm navbar-dark bg-dark\">\r\n    <div class=\"container\">\r\n        <a class=\"navbar-brand\" href=\"/\"></a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsNav\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div class=\"collapse navbar-collapse\" id=\"collapsNav\">\r\n            <ul class=\"navbar-nav mr-auto\">\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"/\">Home</a>\r\n                </li>\r\n                @auth\r\n                @if(auth()->user()->isAdmin or auth()->user()->isReceptionist)\r\n\r\n\r\n                    <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"/admin/OverzichtGebruiker\">Overzicht gebruiker</a>\r\n                </li>\r\n\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"/OverzichtBedrijven\">Overzicht bedrijven</a>\r\n                </li>\r\n                @endif\r\n                @if(auth()->user()->isLogistiek )\r\n                <li class=\"nav-item\">\r\n                    <a class=\"nav-link\" href=\"/OverzichtKades\">Overzicht Kades</a>\r\n                </li>\r\n                @endif\r\n                @endauth\r\n            </ul>\r\n            {{--  Auth navigation  --}}\r\n            <ul class=\"navbar-nav ml-auto\">\r\n                @guest\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"/login\"><i class=\"fas fa-sign-in-alt\"></i>Login</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                        <a class=\"nav-link\" href=\"/register\"><i class=\"fas fa-signature\"></i>Register</a>\r\n                    </li>\r\n                @endguest\r\n\r\n                @auth\r\n                    <li class=\"nav-item dropdown\">\r\n                        <a class=\"nav-link dropdown-toggle\" href=\"#!\" data-toggle=\"dropdown\">\r\n                            {{ auth()->user()->naam }} <span class=\"caret\"></span>\r\n                        </a>\r\n                        <div class=\"dropdown-menu dropdown-menu-right\">\r\n                            <a class=\"dropdown-item\" href=\"/user/profile\"><i class=\"fas fa-user-cog\"></i>Update Profile</a>\r\n                            <a class=\"dropdown-item\" href=\"/user/password\"><i class=\"fas fa-key\"></i>New Password</a>\r\n                            <a class=\"dropdown-item\" href=\"/user/history\"><i class=\"fas fa-box-open\"></i>Order history</a>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <a class=\"dropdown-item\" href=\"/logout\"><i class=\"fas fa-sign-out-alt\"></i>Logout</a>\r\n                            <div class=\"dropdown-divider\"></div>\r\n                            <a class=\"dropdown-item\" href=\"/admin/kades\"><i class=\"fas fa-user-cog\"></i>Kades beheren</a>\r\n                        </div>\r\n                    </li>\r\n                @endauth\r\n            </ul>\r\n\r\n        </div>\r\n    </div>\r\n</nav>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- resources/views/shared/navigation.blade.php	(revision 2a8455b30292747d8e2144b0b7a475d802f11749)
+++ resources/views/shared/navigation.blade.php	(date 1611306712570)
@@ -18,7 +18,7 @@
                 </li>
 
                 <li class="nav-item">
-                    <a class="nav-link" href="/OverzichtBedrijven">Overzicht bedrijven</a>
+                    <a class="nav-link" href="/admin/OverzichtBedrijven">Overzicht bedrijven</a>
                 </li>
                 @endif
                 @if(auth()->user()->isLogistiek )
diff --git public/css/app.css public/css/app.css
diff --git public/mix-manifest.json public/mix-manifest.json
